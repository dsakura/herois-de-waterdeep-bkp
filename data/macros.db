{"_id":"0AoKbxdN0stB4wAS","name":"teste","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"async function promptInit(){\n  let updates = [];\n  for( let thisCombatant of game.combat.combatants){\n\n    const content = `<div class=\"form-group dialog distance-prompt\">\n      <label>${thisCombatant.name}'s initiative:</label> \n      <input type=\"number\" name=\"init\" value=\"${thisCombatant.initiative}\"/></div>`;\n    await new Dialog({\n        title: \"Manual Init\",\n        content: content,\n        default: 'ok',\n        buttons: {\n          ok: {\n            icon: '<i class=\"fas fa-check\"></i>',\n            label: 'Update Initiative',\n            default: true,\n            callback: html => {\n              const newinit = html.find('.distance-prompt.dialog [name=\"init\"]')[0].value;\n              updates.push({id: thisCombatant._id, initiative: newinit});\n            },\n          }\n        }\n      }).render(true);\n    };\n\n  game.combat.updateCombatant(updates);\n}\n\npromptInit();","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"0BwgVd1iz7jf6rpm","name":"Darkness ","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":200000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"tIjc1WtMeMkbc98k\", \"5EZNWIlY7LajpOd8\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/spell/phb-darkness.jpg","actorIds":[]}
{"_id":"0FinAyBmRg1xc39q","name":"05 - Glow","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":300000,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"glow\",\r\n    filterId: \"superSpookyGlow\",\r\n    outerStrength: 4,\r\n    innerStrength: 0,\r\n    color: 0x5099DD,\r\n    quality: 0.5,\r\n    padding: 10,\r\n    animated:\r\n    {\r\n        color: \r\n        {\r\n           active: true, \r\n           loopDuration: 3000, \r\n           animType: \"colorOscillation\", \r\n           val1:0x5099DD, \r\n           val2:0x90EEFF\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Harpoon Haul","permission":{"default":0,"MzYzNTJjZTQ5OThh":3},"type":"script","sort":100001,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Harpoon Haul\");","author":"MzYzNTJjZTQ5OThh","img":"modules/plutonium/media/icon/ship-wheel.svg","actorIds":[],"_id":"0NTMjxsUIF9RSLIX"}
{"name":"Crown of Stars","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":100001,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Crown of Stars\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/spell/xge-crown-of-stars.jpg","actorIds":[],"_id":"0l34zqkuB37SaEQd"}
{"_id":"1APVUt4NsStRmvFU","name":"roll-skill","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":11100000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/* This macro requires the advanced macros of Furnace and the LMRTFY module, v0.7+\r\n * This will request a skill check for the currently selected player using LMRTFY roll request dialog\r\n * Takes the skill as its first argument, or if not set, requests all\r\n * Example: /roll-skill \"prc\"\r\n */\r\n\r\nconst skill = args[0] || Object.keys(CONFIG.DND5E.skills);\r\nif (!actor) return;\r\nLMRTFYRoller.requestSkillChecks(actor, skill);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"1a3mwufSIcWeOyUb","name":"Flame Tongue Greatsword","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":400000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"xIySk7UUw2JJzT3S\", \"xCpg3rzVYx1ceTHW\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/skills/fire_13.jpg","actorIds":[]}
{"_id":"1vFa7zO99OmXNm1u","name":"Hexcurse Flame Tongue Greatsword","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":10900000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Hexcurse Flame Tongue Greatsword\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/skills/fire_13.jpg","actorIds":[]}
{"_id":"1xn288GHB5yhGT0o","name":"Flame Tongue Greatsword (Baleful Curse)","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":500000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"xIySk7UUw2JJzT3S\", \"9IetRDGmiY71nRc1\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/skills/fire_13.jpg","actorIds":[]}
{"_id":"24NHyRHJVzfvRrjR","name":"Fireball (Artillerist)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":600000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"jkDskn1sHQDVDYI6\", \"BLd7SYrA5rSPCaEK\");","author":"ZTQ5MTU5OTJhOWMx","img":"modules/plutonium/media/icon/spell/phb-fireball.jpg","actorIds":[]}
{"_id":"2TLFa76VCP5MS24h","name":"Escala dos Muros","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let scale = 2;\ncanvas.scene.update({\n  walls: duplicate(canvas.scene.data.walls.map(w => {\n    w.c = w.c.map(x => x * scale);\n    return w;\n  }))\n});","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/bridge.svg","actorIds":[]}
{"_id":"2nVQpuqiOTdwORGg","name":"Eldritch Smite","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":700000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"xIySk7UUw2JJzT3S\", \"Cq1mDH8Od88CHyPv\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/spells/beam-royal-3.jpg","actorIds":[]}
{"name":"Slam","permission":{"default":0,"jSIbaKrMQZ5trOzn":3},"type":"script","sort":100001,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Slam\");","author":"jSIbaKrMQZ5trOzn","img":"modules/plutonium/media/icon/mailed-fist.svg","actorIds":[],"_id":"3DiRdVWtZtactFX2"}
{"_id":"3PRBPBz8dDndT1ws","name":"Describe","permission":{"default":0,"AoaY7Qm0EqEvkIJr":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":800000,"flags":{},"scope":"global","command":"/*\r\nThis macro creates a button wich reads the following paragraph as a description (/describe).\r\n*/\r\n\r\ntry {\r\n\tvar macroName = event.srcElement.closest('button,a')?.textContent.trim(),\r\n        macroText = event.srcElement.parentElement.innerText.trim().replace(macroName,'').trim();\r\n        if (macroText && event.srcElement.className == 'entity-link') {\r\n                Narrator.createSpecialChatMessage('describe', macroText);\r\n        }\r\n}\r\ncatch(err) {\r\n\tconsole.error(err, \"Macro Narrate: failed to catch narration.\");\r\n}\r\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"3b6KpuEL8gSqwXJM","name":"Polearm","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":900000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Polearm\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/items/weapons/quarterstaff.jpg","actorIds":[]}
{"_id":"4IHZK4I8siglecgL","name":"5e Lay On Hands","permission":{"default":0,"OWUwMjUxOTE5MjE0":3,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":11200000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\n * System: D&D5e\n * Apply lay-on-hands feat to a target character.  Asks the player how many HP to heal and\n * verifies the entered value is within range before marking down usage counter. If the player\n * has OWNER permissions of target (such as GM or self-heal) the HP are applied automatically; \n * otherwise, a 'roll' message appears allowing the target character to right-click to apply healing.\n */\n\nlet confirmed = false;\nlet actorData = actor || canvas.tokens.controlled[0] || game.user.character;\nlet featData = actorData ? actorData.items.find(i => i.name===\"Lay on Hands\") : null;\n\nif(actorData == null || featData == null) \n    ui.notifications.warn(`Selected hero must have \"Lay on Hands\" feat.`);\nelse if (game.user.targets.size !== 1)\n    ui.notifications.warn(`Please target one token.`);\nelse\n{\n    let featUpdate = duplicate(featData);\n    let targetActor = game.user.targets.values().next().value.actor;\n    let maxHeal = Math.clamped(featUpdate.data.uses.value, 0, \n        targetActor.data.data.attributes.hp.max - targetActor.data.data.attributes.hp.value);\n\n    let content = `<p><em>${actorData.name} lays hands on ${targetActor.data.name}.</em></p>\n                    <p>How many HP do you want to restore to ${targetActor.data.name}?</p>\n                    <form>\n                        <div class=\"form-group\">\n                            <label for=\"num\">HP to Restore: (Max = ${maxHeal})</label>\n                            <input id=\"num\" name=\"num\" type=\"number\" min=\"0\" max=\"${maxHeal}\"></input>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"flavor\">Flavor:</label>\n                            <input id=\"flavor\" name=\"flavor\" value=\"${featUpdate.data.chatFlavor}\"></input>\n                        </div>\n                    </form>`;\n    new Dialog({\n        title: \"Lay on Hands Healing\",\n        content: content,      \n        buttons: {\n            heal: { label: \"Heal!\", callback: () => confirmed = true },\n            cancel: { label: \"Cancel\", callback: () => confirmed = false }\n        },\n        default: \"heal\",\n\n        close: html => {\n            if (confirmed) \n            {\n                let number = Math.floor(Number(html.find('#num')[0].value));\n                if (number < 1 || number > maxHeal)\n                    ui.notifications.warn(`Invalid number of charges entered = ${number}. Aborting action.`);\n                else\n                {\n                    let flavor = `<strong>${html.find('#flavor')[0].value}</strong><br>`;\n                    if (targetActor.permission !== CONST.ENTITY_PERMISSIONS.OWNER)\n                        // We need help applying the healing, so make a roll message for right-click convenience.\n                        new Roll(`${number}`).roll().toMessage({\n                            speaker: ChatMessage.getSpeaker(),\n                            flavor: `${actorData.name} lays hands on ${targetActor.data.name}.<br>${flavor}\n                            <p><em>Manually apply ${number} HP of healing to ${targetActor.data.name}</em></p>` });\n                    else {\n                        // We can apply healing automatically, so just show a normal chat message.\n                        ChatMessage.create({\n                            speaker: ChatMessage.getSpeaker(),\n                            content: `${actorData.name} lays hands on ${targetActor.data.name} for ${number} HP.<br>${flavor}`\n                        });\n                        game.actors.find(a => a._id===targetActor._id).update( {\n                            \"data.attributes.hp.value\" : targetActor.data.data.attributes.hp.value + number\n                        });\n                    }\n\n                    featUpdate.data.uses.value = featUpdate.data.uses.value - number;\n                    actorData.updateEmbeddedEntity(\"OwnedItem\", featUpdate);\n                };\n            }\n        }\n    }).render(true);\n}\n","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/skills/light_10.jpg","actorIds":[]}
{"_id":"4LWYH2mjMYB3gZh6","name":"21 - Flood","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":11300000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"flood\",\r\n    time: 0,\r\n    color: 0x0020BB,\r\n    billowy: 0.43,\r\n    tintIntensity: 0.72,\r\n    glint: 0.31,\r\n    scale: 70,\r\n    padding: 10,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0006, \r\n        animType: \"move\"\r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"4SwJ90Up05eqllcP","name":"Bless - apply","permission":{"default":0,"OWUwMjUxOTE5MjE0":3,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":11400000,"flags":{"dnd5e":{"itemMacro":true},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"DynamicEffects.applyActive(\"Cure Wounds (Spell-Storing Item)\", true)","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/spells/haste-sky-1.jpg","actorIds":[]}
{"_id":"4WpDoLEXHhh3fdte","name":"TokenMagicFX","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"(async ()=>{\nawait TokenMagic.addUpdateFilters(canvas.tokens.get(args[0]), args[1]);\n})();","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"4u3XAUvvxrG2P7Ic","name":"24 - T04 - Earth Shell","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":11500000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    shieldType: 4,\r\n    gridPadding: 2,\r\n    color: 0x755050,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 1,\r\n    lightAlpha: 1,\r\n    lightSize: 0.7,\r\n    scale: 1,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"54dbzWMXOOq7JV4c","name":"27 - T05 - Pure Fire v2 (xglow+fire)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":1000000,"flags":{},"scope":"global","command":"// In this version, the glow is blending with the fire\r\n// This is to show that the order of the filters is important\r\nlet params =\r\n[{\r\n    filterType: \"zapshadow\",\r\n    filterId: \"myPureFireShadow\",\r\n    alphaTolerance: 0.50\r\n},\r\n{\r\n    filterType: \"xglow\",\r\n    filterId: \"myPureFireAura\",\r\n    auraType: 2,\r\n    color: 0x903010,\r\n    thickness: 9.8,\r\n    scale: 3.,\r\n    time: 0,\r\n    auraIntensity: 1,\r\n    subAuraIntensity: 0.3,\r\n    threshold: 0.25,\r\n    discard: true,\r\n    animated:\r\n    {\r\n        time : \r\n        {  \r\n           active: true,\r\n           speed: 0.0027, \r\n           animType: \"move\" \r\n        },\r\n        thickness:\r\n        {\r\n           active: true,\r\n           loopDuration: 3000, \r\n           animType: \"cosOscillation\", \r\n           val1:2, \r\n           val2:3.6\r\n        }\r\n    }\r\n},\r\n{\r\n    filterType: \"fire\",\r\n    filterId: \"myPureFire\",\r\n    intensity: 1,\r\n    color: 0xFFFFFF,\r\n    amplitude: 1,\r\n    time: 0,\r\n    blend: 2,\r\n    fireBlend : 1,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: -0.0024, \r\n        animType: \"move\" \r\n      },\r\n      intensity:\r\n      {\r\n        active:true,\r\n        loopDuration: 15000,\r\n        val1: 0.8,\r\n        val2: 3,\r\n        animType: \"syncCosOscillation\"\r\n      },\r\n      amplitude:\r\n      {\r\n        active:true,\r\n        loopDuration: 4400,\r\n        val1: 1,\r\n        val2: 1.6,\r\n        animType: \"syncCosOscillation\"\r\n      }\r\n      \r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Crown of Stars","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":100001,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Crown of Stars\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/spell/xge-crown-of-stars.jpg","actorIds":[],"_id":"56qlK1oobQDI11lJ"}
{"_id":"5JmA2rkiFGhxtzgp","name":"Bite","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":1100000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Bite\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/sword-brandish.svg","actorIds":[]}
{"_id":"5fkdoelVeXu2oJzG","name":"Hexblade Curse","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let dae_effect = async function() {\nconst effect_name = \"Hexblade Curse\";\nconst effect = token.actor.effects.entries;\nfor (let i = 0; i < effect.length; i++){\nlet condition = effect[i].data.label;\nlet status = effect[i].data.disabled;\nlet effect_id = effect[i].data._id;\nif ((condition === effect_name) && (status === false)) {\nawait token.actor.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": effect_id,  \"disabled\" : true});\n}\nif ((condition === effect_name) && (status === true)){\n await token.actor.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": effect_id,  \"disabled\" : false});\n}\n}\n}\ndae_effect();","author":"OGI1ZmNiNjZhNWIz","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"5qMqSzx5w4fjgHFk","name":"Bite (Espuleta)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":11600000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"iTrdFFPm7BwR9Tpw\", \"Itu0cOOCHoWU37Hy\");","author":"ZTQ5MTU5OTJhOWMx","img":"https://i.pinimg.com/originals/2d/3e/c6/2d3ec6afce230b3f14b38d71c01638bd.jpg","actorIds":[]}
{"_id":"6NIjPP0h1AtxJiWh","name":"Alterar icone","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":1200000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Change this to the default image of your character.\nconst defaultImg = \"worlds/extinction_curse/Assets/Characters/char_Arabis_new.png\";\n\nlet doRender = true;\n\nif (token.data.img != defaultImg) {\n\tdoRender = false;\n\ttoken.update({\"img\": defaultImg});\n\ttoken.update({height: 1, width: 1});\n\tactor.update({'data.attributes.hp.temp': 0});\n}\n\nlet applyChanges = false;\nnew Dialog({\n  title: `Animal Form`,\n  content: `\n    <div>Select an animal form. Make sure you have enough space! Token expands down and to the right.<div>\n    <hr/>\n    <form>\n      <div class=\"form-group\">\n        <label>Form:</label>\n        <select id=\"shape-type\" name=\"shape-type\">\n          <option value=\"ape\">Ape</option>\n          <option value=\"bear\">Bear</option>\n          <option value=\"bull\">X Bull X</option>\n          <option value=\"cat\">Cat</option>\n          <option value=\"deer\">X Deer X</option>\n          <option value=\"frog\">Frog</option>\n          <option value=\"shark\">Shark</option>\n          <option value=\"snake\">Snake</option>\n          <option value=\"wolf\">Wolf</option>\n        </select>\n\t\t\n        <label> Level:</label>\n        <select id=\"spell-level\" name=\"spell-level\">\n          <option value=\"2\">2</option>\n          <option value=\"3\">3</option>\n          <option value=\"4\">4</option>\n          <option value=\"5\">5</option>\n        </select>\n      </div>\n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Wild Shape`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      for ( let token of canvas.tokens.controlled ) {\n        const {name} = token;\n        let form = html.find('[name=\"shape-type\"]')[0].value || \"ape\";\n        let spellLevel = parseInt(html.find('[name=\"spell-level\"]')[0].value) || 2;\n\t\t\n\t\tif (spellLevel == 2){\n\t\t\ttoken.update({height: 1, width: 1});\n\t\t\tactor.update({'data.attributes.hp.temp': 5});\n\t\t}\n\t\tif (spellLevel == 3){\n\t\t\ttoken.update({height: 1, width: 1});\n\t\t\tactor.update({'data.attributes.hp.temp': 10});\n\t\t}\n\t\tif (spellLevel == 4){\n\t\t\ttoken.update({height: 2, width: 2});\n\t\t\tactor.update({'data.attributes.hp.temp': 15});\n\t\t}\n\t\tif (spellLevel == 5){\n\t\t\ttoken.update({height: 3, width: 3});\n\t\t\tactor.update({'data.attributes.hp.temp': 20});\n\t\t}\n\t//Change all these links to your animal form art assets\t\t\n        if (form === 'ape') {\n            token.update({\"img\": \"worlds/extinction_curse/Assets/Characters/Transformed Tokens/Arabis_Ape.png\"});\n        } \n        if (form === 'bear') {\n           token.update({\"img\": \"worlds/extinction_curse/Assets/Characters/Transformed Tokens/Arabis_Bear.png\"});\n        }\n\t\tif (form === 'bull') {\n           token.update({\"img\": \"Extinction%20Curse/fantasy_bull.jpg\"});\n        }\n\t\tif (form === 'wolf') {\n           token.update({\"img\": \"worlds/extinction_curse/Assets/Characters/Transformed Tokens/Arabis_Wolf.png\"});\n        }\n        if (form === 'cat') {\n           token.update({\"img\": \"worlds/extinction_curse/Assets/Characters/Transformed Tokens/Arabis_Cat.png\"});\n        }\n        if (form === 'deer') {\n           token.update({\"img\": \"Extinction%20Curse/fantasy_deer.jpg\"});\n        }\n\t\tif (form === 'frog') {\n           token.update({\"img\": \"worlds/extinction_curse/Assets/Characters/Transformed Tokens/Arabis_Frog.png\"});\n        }\n\t\tif (form === 'shark') {\n           token.update({\"img\": \"worlds/extinction_curse/Assets/Characters/Transformed Tokens/Arabis_Shark.png\"});\n        }\n\t\tif (form === 'snake') {\n           token.update({\"img\": \"worlds/extinction_curse/Assets/Characters/Transformed Tokens/Arabis_Snake.png\"});\n        }\n      }\n    }\n  }\n}).render(doRender);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"23 - T01 - Mirror Images","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"images\",\r\n    filterId: \"myMirrorImages\",\r\n    time: 0,\r\n    nbImage: 4,\r\n    alphaImg: 1.0,\r\n    alphaChr: 0.0,\r\n    blend: 4,\r\n    ampX: 0.10,\r\n    ampY: 0.10,\r\n    zOrder: 20,\r\n    animated :\r\n    {\r\n      time: \r\n      { \r\n        active: true, \r\n        speed: 0.0010, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"6VR0TVSBI0EC25lC"}
{"name":"Chilling Rend","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":100001,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Chilling Rend\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/mailed-fist.svg","actorIds":[],"_id":"6ZfDys6f77a5vyI4"}
{"_id":"6q7kfjmCVnkPOZdu","name":"Eldritch Blast","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":1300000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"xIySk7UUw2JJzT3S\", \"ZnYIV38mtxQHVDRE\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/spell/phb-eldritch-blast.jpg","actorIds":[]}
{"_id":"6vBDy0pHDkoTFoP5","name":"29 - T02 - Phase Spider Web (xfog+web)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":1400000,"flags":{},"scope":"global","command":"let params = \r\n[{\r\n    filterType: \"web\",\r\n    filterId: \"phaseweb\",\r\n    time: 0,\r\n    animated:\r\n        {\r\n            time:\r\n            {\r\n                active: true,\r\n                speed: 0.0005,\r\n                animType: \"move\"\r\n            }\r\n        }\r\n},\r\n{\r\n    filterType: \"xfog\",\r\n    filterId: \"phaseweb\",\r\n    color: 0x30FF30,\r\n    time: 0,\r\n    animated:\r\n        {\r\n            time:\r\n            {\r\n                active: true,\r\n                speed: 0.0005,\r\n                animType: \"move\"\r\n            }\r\n        }\r\n}]\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"77hVcgz7vfg0nVss","name":"Random Cutting Words","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":11700000,"flags":{},"scope":"global","command":"// Courtesy of @Zarek\n// Selected target receives a random cutting word from a table called \"Mockeries\" along with the roll reduction.\n// You can find a mockeries table in the community table module.\n\nlet cuttingWords = () => {\n  // Setup variables\n  let tableName = \"mockeries\";\n  let mockery = \"Now go away or I shall taunt you a second time-a!\"; // if table can't be found, use this.\n\n  if (!actor) {\n    ui.notifications.warn(\"You must have an actor selected.\");\n    return\n  }\n  \n  let actorLevels = actor.data.data.levels || 1;\n  let table = game.tables.entities.find(t => t.name == tableName);\n  // Get Targets name\n  const targetId = game.user.targets.ids[0];\n  const targetToken = canvas.tokens.get(targetId);\n  if (!targetToken) {\n    ui.notifications.warn(\"You must target a token.\");\n    return\n  }\n  const targetName = targetToken.name;\n\n  // Roll the result, and mark it drawn\n  if (table) {\n    if (checkTable(table)) {\n      let roll = table.roll();\n      let result = roll.results[0];\n      mockery = result.text;\n      table.updateEmbeddedEntity(\"TableResult\", {\n        _id: result._id,\n        drawn: true\n      });\n    }\n  }\n\n  function checkTable(table) {\n    let results = 0;\n    for (let data of table.data.results) {\n      if (!data.drawn) {\n        results++;\n      }\n    }\n    if (results < 1) {\n      table.reset();\n      ui.notifications.notify(\"Table Reset\")\n      return false\n    }\n    return true\n  }\n\n  let dieType = 'd6';\n  if (actorLevels >= 15) {\n    dieType = 'd12';\n  } else if (actorLevels >= 10) {\n    dieType = 'd10';\n  } else if (actorLevels >= 5) {\n    dieType = 'd8';\n  }\n\n  let messageContent = `<p>${targetName} Reduce your roll by: <b>[[1${dieType}]]</b>.</p>`\n  messageContent += `<p>${token.name} exclaims <b><i>\"${mockery}\"</i></b></p>`\n  messageContent += `<details closed=\"\"><summary><a>Cutting Words</a></summary>\n  <p>When a creature that you can see within 60 feet of you makes an <b>Attack roll, an ability check, or a damage roll</b>, you can use your <b>Reaction</b> to expend one of your uses of <b>Bardic Inspiration</b>,\n  rolling a Bardic Inspiration die and subtracting the number rolled from the creature’s roll.</p>\n  <p>You can choose to use this feature after the creature makes its roll, but before the GM determines whether the Attack roll or ability check succeeds or fails, or before the creature deals its damage. \n  The creature is immune if it can’t hear you or if it’s immune to being <b>Charmed</b>.</p></details>`\n\n  // create the message\n  if (messageContent !== '') {\n    let chatData = {\n      user: game.user._id,\n      speaker: ChatMessage.getSpeaker(),\n      content: messageContent,\n    };\n    ChatMessage.create(chatData, {});\n  }\n};\n\ncuttingWords();\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"7o8vyiz3llzQB3YR","name":"Stinger (Espuleta)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":11800000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"iTrdFFPm7BwR9Tpw\", \"xPB48JKnL8WF6VMp\");","author":"ZTQ5MTU5OTJhOWMx","img":"https://i.pinimg.com/originals/2d/3e/c6/2d3ec6afce230b3f14b38d71c01638bd.jpg","actorIds":[]}
{"_id":"88HGiGogzDEK4qtb","name":"Roll_Initative","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":1500000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"const init_die = `1d20`;\n\nasync function roll_iniative()\n{\n  if(!game.combats.active) return;\n  let updates = duplicate(game.combats.active);\n\n  for(let combatData of updates.combatants)\n  {\n    let initiative = new Roll(`${init_die} + ${combatData.actor.data.attributes.init.value}`).roll().total;\n    combatData.initiative = initiative;\n  }\n\n  await game.combats.active.update(updates);\n  turn_message();\n}\n\nfunction turn_message()\n{\n  let combatant = game.combats.active.combatants.sort((a,b)=> b.initiative - a.initiative)[0];\n\n  ChatMessage.create({\n    content : `\n    <div class=\"flexrow\"><div style=\"flex:3\"><img src=\"${combatant.img}\" style=\"border:none\" /></div>\n      <div style=\"flex:12\">\n          <h2>${combatant.name} Turn</h2>\n      </div>\n    </div>`\n  });\n}\n\nroll_iniative();","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"8Iu6oQq6nPR3tUiF","name":"32 - T02 - Devoured by the Bewitched Flames (ripples+glow)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":1600000,"flags":{},"scope":"global","command":"let params = \r\n[{\r\n    filterType: \"ripples\",\r\n    filterId: \"SolarRipples\",\r\n    color: 0x508000,\r\n    time: 0,\r\n    alphaDiscard: true,\r\n    zOrder:50,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0009, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n},\r\n{\r\n    filterType: \"glow\",\r\n    filterId: \"glowripples\",\r\n    outerStrength: 2,\r\n    innerStrength: 1,\r\n    color: 0xFF3000,\r\n    quality: 0.5,\r\n    padding: 10,\r\n    zOrder: 100,\r\n    animated:\r\n    {\r\n        color: \r\n        {\r\n           active: true, \r\n           loopDuration: 3000, \r\n           animType: \"colorOscillation\", \r\n           val1:0xFF3000, \r\n           val2:0x30FF00\r\n        }\r\n    }\r\n}]\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"8Rek3wx4pve7he2w","name":"Divine Smite","permission":{"default":0,"OWUwMjUxOTE5MjE0":3,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":12000000,"flags":{"furnace":{"gmexecute":true,"runAsGM":false},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let confirmed = false;\n\nnew Dialog({\n    title: \"Divine Smite Damage\",\n    content: `\n     <p>Spell Slot level to use Divine Smite with.</p>\n     <form>\n      <div class=\"form-group\">\n       <label>Spell Slot Level:</label>\n       <select id=\"slot-level\" name=\"slot-level\">\n        <option value=\"1\">1</option>\n        <option value=\"2\">2</option>\n        <option value=\"3\">3</option>\n        <option value=\"4\">4</option>\n        <option value=\"5\">5</option>\n       </select>\n      </div>\n     </form>\n     `,\n    buttons: {\n        one: {\n            icon: '<i class=\"fas fa-check\"></i>',\n            label: \"SMITE!\",\n            callback: () => confirmed = true\n        },\n        two: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: \"Cancel\",\n            callback: () => confirmed = false\n        }\n    },\n    default: \"Cancel\",\n    close: html => {\n        if (confirmed) {\n            let slotLevel = parseInt(html.find('[name=slot-level]')[0].value);\n            smite(slotLevel);\n        }\n    }\n}).render(true);\n\nfunction getSpellSlots(actor, level) {\n    let spells = actor.data.data.spells;\n    switch (level) {\n        case 1:\n            return spells.spell1;\n        case 2:\n            return spells.spell2;\n        case 3:\n            return spells.spell3;\n        case 4:\n            return spells.spell4;\n        case 5:\n            return spells.spell5;\n    }\n}\n\nfunction smite(slotLevel) {\n    let targets = game.user.targets;\n    let suseptible = [\"fiend\", \"undead\"];\n    let controlledActor = canvas.tokens.controlled[0].actor;\n    let chosenSpellSlots = getSpellSlots(controlledActor, slotLevel);\n\n    if (chosenSpellSlots.value < 1) {\n        ui.notifications.error(\"No spell slots of the required level available.\");\n        return;\n    }\n    if (targets.size !== 1) {\n        ui.notifications.error(\"You must target exactly one token to Smite.\");\n        return;\n    }\n\n    targets.forEach(target => {\n        let numDice = slotLevel + 1;\n        let type = target.actor.data.data.details.type.toLocaleLowerCase();\n        if (suseptible.includes(type)) numDice += 1;\n        new Roll(`${numDice}d8`).roll().toMessage({ flavor: \"Macro Divine Smite - Damage Roll (Radiant)\", speaker })\n    })\n\n    chosenSpellSlots.value -= 1;\n}","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/spells/beam-red-2.jpg","actorIds":[]}
{"_id":"9O128enZkiWBcV81","name":"Concentrating","permission":{"default":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"// Toss this in with any spell that uses Concentrating..\n// in DAE choose \"Macro Execute\" in the value \"Concentrating\" @actor\n(async ()=>{\n    if (args[0]===\"off\"){\n        let target = await canvas.tokens.placeables.find(t=>t.name===args[1].name);\n        if (game.cub.hasCondition(\"Concentrating\", target)){\n            await game.cub.removeCondition(\"Concentrating\", target, {warn: false});\n        }\n    }\n})();","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"DisintegrateDarkRed","permission":{"default":0,"ccsO3NtPJs2xE1RS":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.OVIfKxvNI1wrK8kb"}},"scope":"global","command":"// Requires at least 1 target\nif(game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires token to be selected\nif(canvas.tokens.controlled.length == 0) ui.notifications.error(\"Please select your token\");\n// Requires FX Master Module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\nvar myStringArray = Array.from(game.user.targets)[0];\nvar arrayLength = game.user.targets.size;\nfor (var i = 0; i < arrayLength; i++) {\n\nlet mainTarget = Array.from(game.user.targets)[i];\nlet myToken = canvas.tokens.controlled [0];\n\nlet ray = new Ray(myToken.center, mainTarget.center);\nlet anDeg = -(ray.angle * 57.3);\nlet anDist = ray.distance;\n// Animation file path\nlet file = \"modules/jb2a_patreon/Library/6th_Level/Disintegrate/\";\n// Checking for range to target to choose which file to pull\nlet anFile = `${file}Disintegrate_01_Dark_Red_15ft_1000x400.webm`;\nlet anFileSize = 600;\nlet anchorX = 0.2;\nswitch(true){\n case (anDist<=600):\n    anFileSize = 600;\n    anFile = `${file}Disintegrate_01_Dark_Red_15ft_1000x400.webm`;\n    anchorX = 0.2;\n    break;\n case (anDist>1200):\n    anFileSize = 1800;\n    anFile = `${file}Disintegrate_01_Dark_Red_45ft_2200x400.webm`;\n    anchorX = 0.091;\n    break;\n default:\n    anFileSize = 1200;\n    anFile = `${file}Disintegrate_01_Dark_Red_30ft_1600x400.webm`;\n    anchorX = 0.125;\n    break;\n}\n// Scaling the Height of the animation for consistency across ranges\nlet anScale = anDist / anFileSize;\nlet anScaleY = anDist <= 600 ? 0.6  : anScale;\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: myToken.center,\n                      anchor: {\n                       x: anchorX,\n                       y: 0.5\n                      },\n                      angle: anDeg,\n                      scale: {\n                       x: anScale,\n                       y: anScaleY\n                      }\n                    }; \n\ncanvas.fxmaster.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\n// Add some sound\n/*\nawait wait (300);\nlet soundFile = `sound path here`;\nAudioHelper.play({src: soundFile, volume: 1.0, autoplay: true, loop: false}, true);\n*/\n// Or play random sounds on each attack\n/*\nlet soundHome = \"CustomSounds/battle/\";\n\nlet m1 = `sound 01 file location here`;\nlet m2 = `sound 02 file location here`;\nfunction random_sound(sounds)\n{\nreturn sounds[Math.floor(Math.random()*sounds.length)];\n}\n\nvar sounds = [m1, m2];\n\nlet roll = new Roll('1d3').roll().total;\nlet soundFile = random_sound(sounds);\nAudioHelper.play({src: soundHome + soundFile, volume: 0.9, autoplay: true, loop: false}, true);\n*/\n\n// Delete comments to activate token Magic FX. Requires the Token Magic FX Modules to be installed\n/*\nlet params =\n[{\n    filterType: \"fire\",\n    filterId: \"myFire\",\n    intensity: 3,\n    color: 0xFFFFFF,\n    amplitude: 2,\n    time: 0,\n    blend: 10,\n    fireBlend : 1,\n    alphaDiscard: true,\n    zOrder: 50,\n    animated :\n    {\n      time : \n      { \n        active: true, \n        speed: -0.0024, \n        animType: \"move\" \n      }\n    }\n},{\n    filterType: \"glow\",\n    filterId: \"glowripples\",\n    outerStrength: 4,\n    innerStrength: 2,\n    color: 0x7A0000,\n    quality: 0.5,\n    padding: 10,\n    zOrder: 100,\n}];\nawait wait(500);\nTokenMagic.addUpdateFiltersOnTargeted(params);\nawait wait(2000);\nTokenMagic.deleteFiltersOnTargeted();\n*/\n}\n}\nCast ()","author":"OWUwMjUxOTE5MjE0","img":"modules/jb2a_patreon/Library/6th_Level/Disintegrate/Disintegrate_01_Dark_Red_Thumb.webp","actorIds":[],"_id":"9R3w4cHRFylqzCJ0"}
{"_id":"9TRjyRJ4bjdeZESJ","name":"Restaurar HP","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":1700000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"token.update({\"actorData.data.attributes.hp.value\" : actor.data.data.attributes.hp.value})","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/regen.svg","actorIds":[]}
{"_id":"9muUzMpbbjMIHFw5","name":"09 - Twist","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":12100000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"twist\",\r\n    radiusPercent: 120,\r\n    angle: 0,\r\n    animated:\r\n    {\r\n        angle:         \r\n        { \r\n            active: true, \r\n            animType: \"sinOscillation\",\r\n            loopDuration: 10000, \r\n            val1: -0.6*Math.PI, \r\n            val2: +0.6*Math.PI\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"A45t6P9rfkTUCGpe","name":"Pact  Greatsword","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":1800000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Pact  Greatsword\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/items/weapons/sword-great.jpg","actorIds":[]}
{"name":"Star Lance","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":100001,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Star Lance\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/spell/xge-crown-of-stars.jpg","actorIds":[],"_id":"A7lLMRf95KFEjYvi"}
{"_id":"APQsPPCcdUIKOS6D","name":"journal-dialog","permission":{"8pIGCEozfXNtPyHL":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":13600000,"flags":{},"scope":"global","command":"// This macro requires the advanced macros of Furnace\r\n// This will display the contents of a journal as a dialog\r\n// Takes one argument, the journal name\r\n// Example: /journal-dialog \"Welcome to my world\"\r\n\r\nconst journal = game.journal.entities.find(j => j.name === args[0])\r\nif (!journal) return;\r\nnew Dialog({content: journal.data.content,\r\n            buttons: {ok: {label: args[1] || \"ok\"}}}).render(true)","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Alvo_Hexblade_Curse","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"AT1bR3Ajp0ITFtdz"}
{"_id":"AhzKU4Zki0tbxbBx","name":"Link Actors","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":12200000,"flags":{},"scope":"global","command":"const scene = game.scenes.active;\nconst unlinked = canvas.scene.data.tokens.map(t => {\n    const actor = game.actors.entities.find(a => a.name === t.name);\n    if (actor) {\n        return {\n            _id: t._id,\n            actorId: actor.id\n        }\n    } else {\n        console.log(t.name);\n        return {\n            _id: t._id,\n            actorId: \"\"\n        }\n    }\n});\nconst updates = duplicate(unlinked);\n\nscene.updateEmbeddedEntity(\"Token\", updates);\n\nui.notifications.info('Tokens linked to actors.');\nconsole.log(updates);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"AiCHxpITJahxJDUy","name":"Transformar WildShape","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":12300000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"canvas.tokens.controlled[0].actor.transformInto(game.actors.getName('Giant Spider'), { keepMental: true, mergeSaves: true, mergeSkills: true });","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"AlYj1jlp5PixPOdS","name":"24 - T10 - Evil Aura","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":1900000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"myEvilField\",\r\n    shieldType: 10,\r\n    gridPadding: 1,\r\n    color: 0xFF3010,\r\n    time: 0,\r\n    blend: 5,\r\n    intensity: 1,\r\n    lightAlpha: 4,\r\n    lightSize: 0.8,\r\n    scale: 0.5,\r\n    radius: 1,\r\n    chromatic: false,\r\n    zOrder: 512,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0012, \r\n        animType: \"move\" \r\n      },\r\n      lightSize:        \r\n      {\r\n        val1: 0.4, val2: 1.5,\r\n        animType: \"syncCosOscillation\",\r\n        loopDuration: 5000\r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"AtXnHJNfy8a1yLKy","name":"Undead Fortitude","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let content = `\n        <form>\n            <div class=\"form-group\">\n                <label for=\"num\">Damage to target: </label>\n                <input id=\"num\" name=\"num\" type=\"number\" min=\"0\"></input>\n            </div>\n        </form>`;\n            new Dialog({\n                title: \"Undead Fortitude Save\",\n                content: content,\n                buttons: {\n                    one: {\n                        label: \"Radiant Damage or Crit\",\n                        callback: () => {\n                            token.update({ hp: 0 }, { skipUndeadCheck: true })\n                            ui.notifications.notify(\"Target dies outright\")\n                            return;\n                        },\n                    },\n                    two: {\n                        label: \"Normal Damage\",\n                        callback: async (html) => {\n                            let roll = await token.actor.rollAbilitySave(`con`);\n                            let number = Number(html.find(\"#num\")[0].value);\n                            console.log(number)\n                            if (roll.total >= (5 + number)) {\n                                ui.notifications.notify(\"Target survives\")\n                                token.update({ \"actorData.data.attributes.hp.value\": 1 }, { skipUndeadCheck: true });\n                            } else if (roll.total < (5 + number)) {\n                                ui.notifications.notify(\"Target dies\")\n                                token.update({ \"actorData.data.attributes.hp.value\": 0 }, { skipUndeadCheck: true })\n                            }\n                        },\n                    },\n                },\n            }).render(true)","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"B0p0LDR8GlGIOVQE","name":"Spirit Guardians","permission":{"default":0,"NDAwODQ0YzA2ODM1":3},"type":"script","sort":12400000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"MLwpZTVAEwVSGhKu\", \"4NX8p3ivgZn60qsO\");","author":"NDAwODQ0YzA2ODM1","img":"systems/dnd5e/icons/spells/needles-sky-2.jpg","actorIds":[]}
{"_id":"B4cCPdyuZk7ufT2e","name":"35 - T05 - Black Fire (xfire)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":2000000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"xfire\",\r\n    filterId: \"myBlackXFire\",\r\n    time: 0,\r\n    color: 0x707070,\r\n    blend: 11,\r\n    amplitude: 1,\r\n    dispersion: 2.2,\r\n    chromatic: false,\r\n    scaleX: 2.5,\r\n    scaleY: 2,\r\n    inlay: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: -0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"B7kT6K5jEVXfydQr","name":"32 - T02 - Devoured by the Bewitched Flames (ripples+glow)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":12500000,"flags":{},"scope":"global","command":"let params = \r\n[{\r\n    filterType: \"ripples\",\r\n    filterId: \"SolarRipples\",\r\n    color: 0x508000,\r\n    time: 0,\r\n    alphaDiscard: true,\r\n    zOrder:50,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0009, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n},\r\n{\r\n    filterType: \"glow\",\r\n    filterId: \"glowripples\",\r\n    outerStrength: 2,\r\n    innerStrength: 1,\r\n    color: 0xFF3000,\r\n    quality: 0.5,\r\n    padding: 10,\r\n    zOrder: 100,\r\n    animated:\r\n    {\r\n        color: \r\n        {\r\n           active: true, \r\n           loopDuration: 3000, \r\n           animType: \"colorOscillation\", \r\n           val1:0xFF3000, \r\n           val2:0x30FF00\r\n        }\r\n    }\r\n}]\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"BR1AJM6dJCdCIFrf","name":"23 - Mirror Images","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":1800000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"images\",\r\n    time: 0,\r\n    padding: 60,\r\n    alpha: 0.9,\r\n    blend: 4,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0010, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"Bh7mvxffy63KWEoj","name":"Divine Smite v2","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":11900000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"/*\n * The Smite macro emulates the Divine Smite feature of Paladins in DnD 5e. A spell slot level to use\n * can be selected, which increases the number of damage dice, and smiting a fiend or undead\n * will also increase the number of damage dice.\n *\n * First, select a token to perform the smite, then target an enemy to be smitten. Make your regular\n * attack and then if you choose to use Divine Smite, run this macro.\n */\n\n//Configurable variables\nlet maxSpellSlot = 5; //Highest spell-slot level that may be used.\nlet affectedCreatureTypes = [\"fiend\", \"undead\"]; //Creature types that take extra damage.\nlet allowConsumeSpellSlotChoice = false; //Can the user choose whether to consume the spell slot?\nlet consumeSpellSlot = true; //Does the macro consume a spell slot?\nlet allowCriticalHit = true; //Can the user choose whether the dice should be doubled as a critical hit?\nlet allowConsumepactSlot = true; //Can the user choose to use pact Magic slots, if present?\nlet macroFlavor = `Macro Divine Smite - Damage Roll (Radiant)`; //Flavor to show in the chat roll.\n\nlet dieSize = `d8`; //Die size to use for the SMITE.\n//\nif (allowCriticalHit) {\n  macroFlavor += ` - Critical Hit!`;\n}\nlet optionsText = `<p>Spell Slot level to use Divine Smite with.</p><form>\n <div class=\"form-group\"><label>Spell Slot Level:</label><select id=\"slot-level\" name=\"slot-level\">`;\n\nlet s_actor = game.user.character || canvas.tokens.controlled[0]?.actor;\n\nif (s_actor?.data.items.find((i) => i.name === \"Divine Smite\") === undefined) {\n  return ui.notifications.error(\n    `No valid actor selected that can use this macro.`\n  );\n}\n\n//#region Functions\nlet confirmed = false;\nlet criticalhit = false;\nif (getAvailableSlots(s_actor) || !consumeSpellSlot) {\n  for (let i = 1; i < maxSpellSlot; i++) {\n    let chosenSpellSlots = getSpellSlots(s_actor, i);\n    if (chosenSpellSlots.value > 0 && consumeSpellSlot) {\n      optionsText += `<option type=\"spell\" value=\"${i}\">${i} - ${chosenSpellSlots.value} slots available</option>`;\n    } else if (!consumeSpellSlot) {\n      optionsText += `<option type=\"spell\" value=\"${i}\">${i}</option>`;\n    }\n  }\n  if (getSpellSlots(s_actor, \"pact\")) {\n    optionsText += `<option type=\"pact\" value=\"pact\">Pact Magic level ${actor.data.data.spells.pact.level} - ${actor.data.data.spells.pact.value} slots available</option>`;\n  }\n  optionsText += `</select></div>`;\n  if (allowCriticalHit) {\n    optionsText += `<div class=\"form-group\"><label>Critical Hit:</label>\n       <input type=\"checkbox\" name=\"criticalCheckbox\" /></div>`;\n  }\n  if (allowConsumeSpellSlotChoice) {\n    optionsText += `<div class=\"form-group\"><label>Consume Spell Slot:</label>\n        <input type=\"checkbox\" name=\"consumeSpellSlot\" checked=\"${consumeSpellSlot}\" /></div>`;\n  }\n  optionsText += `</div></form>`;\n  // Create a dialogue box to select spell slot level to use when smiting.\n  new Dialog({\n    title: \"Divine Smite Damage\",\n    content: optionsText,\n    buttons: {\n      one: {\n        icon: '<i class=\"fas fa-check\"></i>',\n        label: \"SMITE!\",\n        callback: () => (confirmed = true),\n      },\n      two: {\n        icon: '<i class=\"fas fa-times\"></i>',\n        label: \"Cancel\",\n        callback: () => (confirmed = false),\n      },\n    },\n    default: \"Cancel\",\n    close: (html) => {\n      if (confirmed) {\n        let slotLevel = html.find(\"[name=slot-level]\")[0].value;\n        let userConsumeSpellSlot = html.find(\"[name=consumeSpellSlot]\")[0]\n          ?.checked;\n        let criticalHit = html.find(\"[name=criticalCheckbox]\")[0].checked;\n        smite(\n          s_actor,\n          slotLevel,\n          criticalHit,\n          consumeSpellSlot || userConsumeSpellSlot\n        );\n      }\n    },\n  }).render(true);\n} else {\n  return ui.notifications.error(\n    `No spell slots available to use this feature.`\n  );\n}\n/**\n * Gives the spell slot information for a particular actor and spell slot level.\n * @param {Actor5e} actor - the actor to get slot information from.\n * @param {string} level - the spell slot level to get information about. Can use pact to call Warlock levels.\n * @returns {object} contains value (number of slots remaining), max, and override.\n */\nfunction getSpellSlots(actor, level) {\n    if (level == \"pact\"){\n        return actor.data.data.spells.pact.value;\n    }\n  return actor.data.data.spells[`spell${level}`];\n}\n\n/**\n * Gives the spell slots available for\n * @param {Actor5e} actor - the actor to get slot information from.\n * @returns {boolean} True if any spell slots of any spell level are available to be used.\n */\nfunction getAvailableSlots(actor) {\n  for (let slot in actor.data.data.spells) {\n    if (actor.data.data.spells[slot].value > 0) {\n      return true;\n    }\n  }\n  if (allowConsumepactSlot) {\n    if (actor.data.data.spells.pact.value > 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Use the controlled token to smite the targeted token.\n * @param {Actor5e} actor - the actor that is performing the action.\n * @param {string} slotLevel - the spell slot level to use when smiting.\n * @param {boolean} criticalHit - whether the hit is a critical hit.\n * @param {boolean} consumeSpellSlot - whether to consume the selected spell slot.\n * @param {boolean} bonusDieCreatureType - whether to add an additional die due to creature type.\n */\nfunction smite(actor, slotLevel, criticalHit, consumeSpellSlot,bonusDieCreatureType) {\n  let chosenSpellSlots = getSpellSlots(actor, slotLevel);\n  let updateValue = `data.spells.spell${slotLevel}.value`;\n  if (slotLevel == \"pact\"){\n      slotLevel = actor.data.data.spells.pact.level;\n    updateValue = `data.spells.pact.value`;\n  }\n  let numDice = slotLevel + 1;\n    if (criticalHit) numDice *= 2;\n    if (bonusDieCreatureType) numDice += 1;\n    new Roll(`${numDice}${dieSize}`).roll().toMessage({\n      flavor: macroFlavor,\n      speaker,\n    });\n  if (consumeSpellSlot) {\n    let objUpdate = new Object();\n    objUpdate[updateValue] = chosenSpellSlots - 1;\n    actor.update(objUpdate);\n  }\n}\n//#endregion","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"BlwX7xwgj0s0LqXM","name":"End Turn","permission":{"default":0,"MzYzNTJjZTQ5OThh":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/*\nAuthor: willisrocks\nDescription: \n\nEnds the current actors turn in a combat encounter. Useful when you don't pop out your combat tracker\nand want to end the turn from your hotbar.\n\nIf the user is a gamemaster, it will always end the current turn. For players, it will only end \nthe turn when the current actor in the turn order is owned by you. \n\nBased on the work of reddit user serrag97: https://www.reddit.com/r/FoundryVTT/comments/j1b8gs/next_turn_shortcut/\n*/\n\n\nmain()\n\nasync function main() {\n    try {\n        // If you have the Gamemaster role, you can advance\n        // the turn for any actor\n        const isGM = game.users.get(game.userId).hasRole(4);\n        if (isGM) {\n            game.combats.active.nextTurn();\n            return;\n        }\n\n        // Otherwise, we check that the user owns the current token\n        // in the turn order\n        const currTokenId = game.combats.active.current.tokenId;\n        const combatant = game.combats.active.data.combatants.find(c => c.tokenId === currTokenId);\n        const player = combatant.players.find(p => p._id === game.userId);\n        if (player) {\n            game.combats.active.nextTurn();\n            return;\n        } else {\n            ui.notifications.info('You can only advance the turn on your turn');\n        }\n    } catch(e) {\n        ui.notifications.error(e);\n        return;\n    }\n}","author":"MzYzNTJjZTQ5OThh","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"BuQBnfqvSkbn0ttZ","name":"Monk Ki","permission":{"default":0,"OWUwMjUxOTE5MjE0":3,"MzYzNTJjZTQ5OThh":3},"type":"script","folder":null,"sort":300000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\n * Monk Ki Point spender\n * \n * This macro will prompt which Feature you want to spend Ki points on.\n * \n * Flurry of Blows: Automatically cast two Unarmed Strike's\n * Stunning Strike: Automatically show the saving throw DC\n * Deflect Missiles: Automatically show the damage reduction\n */\n(async () => {\n    const kiName = \"Ki Points\";\n    const errNoMonkToken = \"Please select a single monk token.\";\n\n    const sendChat = async (msg) => {\n        let chatData = {\n            user: game.user.id,\n            speaker: ChatMessage.getSpeaker(),\n            content: msg,\n        };\n        ChatMessage.create(chatData, {});\n    }\n\n    if (!actor) {\n        ui.notifications.warn(errNoMonkToken);\n        return\n    }\n\n    let monk = actor.items.find(i => i.name === 'Monk' && i.type === 'class');\n    if (!monk) {\n        ui.notifications.warn(errNoMonkToken);\n        return\n    }\n\n    let monkLevels = monk.data.data.levels || 20;\n    //let subClass = monk.data.data.subclass;\n\n    if (monkLevels < 2) {\n        ui.notifications.warn('You must have a least 2 Monk levels to use ki points.');\n        return\n    }\n\n    class KiFeature {\n        /**\n         * @param {string} name\n         * @param {string} fallbackText\n         * @param {number} requireLevel\n         * @param {function} action\n         * @param {function} appendTemplate\n         * @param {number} kiCost\n         */\n        constructor(name, fallbackText, requireLevel, action, appendTemplate, kiCost) {\n            this.name = name;\n            this.fallbackText = fallbackText;\n            this.requireLevel = requireLevel;\n            this.kiCost = kiCost || 1;\n            if (action) {\n                this.action = action;\n            }\n            if (appendTemplate) {\n                this.appendTemplate = appendTemplate;\n            }\n        }\n\n        render(allowHigher) {\n            let entry = null;\n\n            const pack = game.packs.get(\"dnd5e.classfeatures\");\n            if (!pack) {\n                console.warn('Could not find \"dnd5e.classfeatures\" compendium.');\n            } else {\n                entry = pack.index.find(e => e.name === this.name);\n            }\n\n            if (!allowHigher && this.requireLevel && monkLevels && this.requireLevel > monkLevels) {\n                ui.notifications.warn(`You need to have ${this.requireLevel} monk levels, you only have ${monkLevels}.`)\n                return\n            }\n\n            if (entry) {\n                pack.getEntity(entry._id).then(o => {\n                    let template = `@Compendium[dnd5e.classfeatures.${entry._id}]{${this.name}}\n                    ${o.data.data.description.value}`;\n                    if (this.appendTemplate) {\n                        template += '\\n\\n' + this.appendTemplate();\n                    }\n                    sendChat(template);\n                    if (this.action) {\n                        this.action();\n                    }\n                });\n            } else {\n                console.warn(`Could not find \"${this.name}\" entry in compendium.`);\n                let template = this.fallbackText;\n                if (this.appendTemplate) {\n                    template += '\\n\\n' + this.appendTemplate();\n                }\n                sendChat(template);\n                if (this.action) {\n                    this.action();\n                }\n            }\n        }\n    }\n\n   const openHand = !!actor.items.find(o => o.data.name === 'Open Hand Technique') ? `<br />In addition, you can impose one of the following: <ul><li>It must succeed on a <b>Dexterity</b> saving throw or be knocked prone.</li><li>It must make a <b>Strength</b> saving throw. If it fails, you can push it up to 15 feet away from you.</li><li>It can’t take reactions until the end of your next turn.</li></ul> Saving throw <b>DC ${10 + actor.data.data.abilities.wis.mod}</b>` : \"\";\n\n    const features = [\n        new KiFeature(\"Ki: Flurry of Blows\",\n            `Immediately after you take the <b>Attack</b> action on your turn, you can spend 1 ki point to make two unarmed strikes as a bonus action. ${openHand}`,\n            2,\n            function () {\n                // Automatically roll two Unarmed Strike attacks\n                let strike = actor.items.find(o => o.data.name === 'Unarmed Strike' && o.data.labels.activation === '1 Action')\n                if (strike) {\n                    strike.roll();\n                    strike.roll();\n                }\n            }),\n        new KiFeature(\"Ki: Patient Defense\",\n            \"You can spend 1 ki point to take the <b>Dodge</b> action as a bonus action on your turn.\",\n            2),\n        new KiFeature(\"Ki: Step of the Wind\",\n            \"You can spend 1 ki point to take the <b>Disengage</b> or <b>Dash</b> action as a bonus action on your turn, and your jump distance is doubled for the turn.\",\n            2),\n        new KiFeature(\"Deflect Missiles\",\n            `Starting at 3rd level, you can use your reaction to deflect or catch the missile when you are hit by a ranged weapon attack. When you do so, the damage you take from the attack is reduced by 1d10 + your Dexterity modifier + your monk level. <br />\n\n        If you reduce the damage to 0, you can catch the missile if it is small enough for you to hold in one hand and you have at least one hand free. If you catch a missile in this way, you can spend 1 ki point to make a ranged attack with the weapon or piece of ammunition you just caught, as part of the same reaction. You make this attack with proficiency, regardless of your weapon proficiencies, and the missile counts as a monk weapon for the attack, which has a normal range of 20 feet and a long range of 60 feet.`,\n            3,\n            null,\n            function () {\n                return `Damage reduction: [[/r 1d10+${actor.data.data.abilities.dex.mod}+${monkLevels}]]`;\n            }),\n        new KiFeature(\"Ki: Stunning Strike\",\n            \"Starting at 5th level, you can interfere with the flow of ki in an opponent’s body. When you hit another creature with a melee weapon attack, you can spend 1 ki point to attempt a stunning strike. The target must succeed on a Constitution saving throw or be <b>stunned</b> until the end of your next turn.\",\n            5,\n            null,\n            function () {\n                // Append the saving throw DC to the chat message\n                return `CON saving throw (DC [[8+${actor.data.data.abilities.wis.mod}+@attributes.prof]])`;\n            }),\n        new KiFeature(\"Ki: Diamond Soul\",\n            `Beginning at 14th level, your mastery of ki grants you proficiency in all saving throws.\n\n        Additionally, whenever you make a saving throw and fail, you can spend 1 ki point to reroll it and take the second result.`,\n            14),\n        new KiFeature(\"Ki: Empty Body\",\n            `Beginning at 18th level, you can use your action to spend 4 ki points to become invisible for 1 minute. During that time, you also have resistance to all damage but force damage.\n\n        Additionally, you can spend 8 ki points to cast the astral projection spell, without needing material components. When you do so, you can’t take any other creatures with you.`,\n            18,\n            null,\n            function () {\n                return \"Note: 4 ki points have been spent. Adjust manually if casting astral projection spell.\";\n            },\n            4),\n    ];\n\n    const consumeKi = (feature, allowNegative, allowHigher) => {\n        let hasAvailableResource = false;\n        let selected = features.find(o => o.name == feature);\n        let kiCost = selected.kiCost || 1;\n\n        // Look for Resources under the Core actor data\n        let resourceKey = Object.keys(actor.data.data.resources).filter(k => actor.data.data.resources[k].label === kiName).shift();\n        if (resourceKey && (actor.data.data.resources[resourceKey].value >= kiCost || allowNegative)) {\n            hasAvailableResource = true;\n            actor.data.data.resources[resourceKey].value -= kiCost;\n        }\n\n        // Look for Ki Points Feat that has uses\n        actor.items.filter(i => i.data.name === kiName && i.data.hasUses && (i.data.data.uses.value >= kiCost || allowNegative)).forEach(i => {\n            hasAvailableResource = true;\n            i.data.data.uses.value -= kiCost\n        })\n\n        if (!hasAvailableResource) {\n            ui.notifications.warn(`${actor.name} does not have any ${kiName} left!`);\n            return false;\n        }\n        if (actor.sheet.rendered) {\n            // Update the actor sheet if it is currently open\n            actor.render(true);\n        }\n\n        if (selected) {\n            selected.render(allowHigher);\n        }\n\n        return true;\n    };\n\n    (async () => {\n        let template = `\n        <form>\n            <div class=\"form-group\">\n                <label>Select feature:</label>\n                <select id=\"feature\" name=\"feature\">`\n        features.filter(o => o.requireLevel <= monkLevels).forEach(o => {\n            template += `<option value=\"${o.name}\">${o.name}</option>`;\n        });\n        template += `</select>\n            </div>\n            <div class=\"form-group\">\n                <label>Allow consuming Ki into negative? <input type=\"checkbox\" id=\"allow-negative\" name=\"allow-negative\" value=\"1\"></label>\n            </div>\n            <div class=\"form-group\">\n                <label>Allow consuming Ki feats of higher level? <input type=\"checkbox\" id=\"allow-higher\" name=\"allow-higher\" value=\"1\"></label>\n            </div>\n        </form>`;\n        new Dialog({\n            title: `Monk Ki Point Spender`,\n            content: template,\n            buttons: {\n                yes: {\n                    icon: \"<i class='fas fa-check'></i>\",\n                    label: `Apply`,\n                    callback: (html) => {\n                        let feature = html.find('#feature')[0].value;\n                        let allowNegative = html.find('#allow-negative')[0].checked;\n                        let allowHigher = html.find('#allow-higher')[0].checked;\n                        consumeKi(feature, allowNegative, allowHigher);\n                    }\n                },\n                no: {\n                    icon: \"<i class='fas fa-times'></i>\",\n                    label: `Cancel`\n                },\n            },\n            default: \"yes\"\n        }).render(true);\n    })();\n})()","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/skills/yellow_13.jpg","actorIds":[]}
{"_id":"Cp5tQssSfSqD4lHN","name":"Pistol (DMG)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":1900000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"yUaOBOfm6pF7gQqZ\", \"4YSuJP47RTlFfAy9\");","author":"ZTQ5MTU5OTJhOWMx","img":"modules/plutonium/media/icon/pocket-bow.svg","actorIds":[]}
{"_id":"Ct373IzduHFtTpDk","name":"Adic Prof Arma","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":2100000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"Hooks.on(\"createOwnedItem\", (actor, item, sheet, id) => {\n    let { weaponType } = item.data;\n    let { name } = item;\n    let { weaponProf } = actor.data.data.traits;\n    let proficient = false;\n\n    let pass_type = (weaponType === 'simpleM' || weaponType === 'simpleR') ? 'sim'\n      : (weaponType === 'martialM' || weaponType === 'martialR') ? 'mar' : null;\n    if (weaponProf.value.includes(pass_type)) proficient = true;\n    if (weaponProf.custom.split(\" \").map(s => s.slice(0, -1)).includes(name)) proficient = true;\n\n    if (proficient) {\n      actor.updateOwnedItem({_id : item.id, \"data.proficient\" : true});\n    } else {\n      ui.notifications.notify(\"Item Name could not be matched to proficiency , please adjust manually\");\n    }\n  });","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"DHiAAUHG3piIHH8j","name":"Criar Luz Ambiente Ex","permission":{"OWUwMjUxOTE5MjE0":3},"type":"script","sort":2000000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Create a (pre-configured) lightsource on the current scene. \n// This example is a blue light for \"activating a stargate.\"\n\nAmbientLight.create({\n  t: \"l\", // l for local. The other option is g for global.\n  x: 1100, // horizontal positioning\n  y: 1150, // vertical positioning\n  dim: 20.50, // the total radius of the light, including where it is dim.\n  bright: 19.00, // the bright radius of the light\n  angle: 360, // the coverage of the light. (Try 30 for a \"spotlight\" effect.)\n  rotation: 0, // the beam direction of the light in degrees (if its angle is less than 360 degrees.) \n               // Oddly, degrees are counted from the 6 o'clock position.\n  tintColor: \"#0080FF\", // Light coloring.\n  tintAlpha: 0.5 // Light opacity (or \"brightness,\" depending on how you think about it.) \n});","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"DvMRmHK9rwaZR8bW","name":"animate-pan","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":2100000,"flags":{},"scope":"global","command":"/* Pan the camera to the X, Y and scale positions.\r\n * See the 'pan-camera' macro for more details.\r\n * The first argument is the duration in milliseconds for the panning animation\r\n * The second argument is X, third argument is Y and fourth argument is the zoom level\r\n * Example: /animate-pan 500 1500 1500 0.5\r\n */\r\n\r\ncanvas.animatePan({duration: args[0], x: args[1], y: args[2], scale: args[3]})","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"DyMeFZ4Rgsvy8IdK","name":"20 - Waves","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":2200000,"flags":{},"scope":"global","command":"// Below, you can turn on the anchor animation.\r\nlet params =\r\n[{\r\n    filterType: \"wave\",\r\n    time: 0,\r\n    anchorX: 0.5,\r\n    anchorY: 0.5,\r\n    strength: 0.015,\r\n    frequency: 60,\r\n    color: 0xFFFFFF,\r\n    maxIntensity: 3.0,\r\n    minIntensity: 0.8,\r\n    padding:10,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0085, \r\n        animType: \"move\" \r\n      },\r\n      anchorX :\r\n      {\r\n        active: false,\r\n        val1: 0.15,\r\n        val2: 0.85,\r\n        animType: \"syncCosOscillation\",\r\n        loopDuration: 20000\r\n      },\r\n      anchorY :\r\n      {\r\n        active: false,\r\n        val1: 0.15,\r\n        val2: 0.85,\r\n        animType: \"syncSinOscillation\",\r\n        loopDuration: 20000\r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"E13K5jYbIge0oAEL","name":"Pistol","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":2300000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"iTrdFFPm7BwR9Tpw\", \"T90faSkBhxSfGhpg\");","author":"ZTQ5MTU5OTJhOWMx","img":"worlds/herois-de-waterdeep/characters/186_-_Zaak/token.png","actorIds":[]}
{"_id":"E29mckERgWljk950","name":"02 - Adjustment","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":2400000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"adjustment\",\r\n    saturation: 1,\r\n    brightness: 1,\r\n    contrast: 1,\r\n    gamma: 1,\r\n    red: 4,\r\n    green: 0.5,\r\n    blue: 0.5,\r\n    alpha: 0.5,\r\n    animated:\r\n    {\r\n        alpha: \r\n        { \r\n           active: true, \r\n           loopDuration: 5000, \r\n           animType: \"syncCosOscillation\",\r\n           val1: 0.5,\r\n           val2: 1 }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"E3ruuQcBCLh18cy8","name":"Greatsword of Life Stealing","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":2500000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"MTIzMWFmZDU3ZDVl\", \"MTU2NDU5MThiYzJm\");","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/skills/violet_24.jpg","actorIds":[]}
{"_id":"E9sBKkeQQTgyCI5r","name":"Tinker's Tools","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":2600000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"OTAxNTAwZmJlZDYy\", \"ijGTXkodxM1r7Qmy\");","author":"ZTQ5MTU5OTJhOWMx","img":"systems/dnd5e/icons/skills/mech_7.jpg","actorIds":[]}
{"_id":"EdOJvreKXxTp1wql","name":"15 - Cosmic Ray","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":2700000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"ray\",\r\n    time: 0,\r\n    color: 0xCF8000,\r\n    alpha: 0.5,\r\n    divisor: 32,\r\n    anchorX: 0,\r\n    anchorY: 0,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.0005, \r\n          animType: \"move\" \r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"ElLDCHI2OFcDHntl","name":"Parry on/off","permission":{"default":0,"OWUwMjUxOTE5MjE0":3,"MzYzNTJjZTQ5OThh":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.CBITwEj3TjVbXLUv"}},"scope":"global","command":"//type the name of the EFFECT present on an actor to toggle it\nlet dae_effect = async function() {\nconst effect_name = \"Agile Parry\";\nconst effect = token.actor.effects.entries;\nfor (let i = 0; i < effect.length; i++){\n     let condition = effect[i].data.label;\n     let status = effect[i].data.disabled;\n     let effect_id = effect[i].data._id;\n     if ((condition === effect_name) && (status === false)) {\n        await token.actor.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": effect_id,  \"disabled\" : true});\n     }\n     if ((condition === effect_name) && (status === true)){\n        await token.actor.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": effect_id,  \"disabled\" : false});\n    }\n}\n}\ndae_effect();","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/skills/weapon_22.jpg","actorIds":[]}
{"_id":"EpkHhVdY275v2XPV","name":"Bite","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":2300000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Bite\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/sword-brandish.svg","actorIds":[]}
{"_id":"Eu7ct1nLp3Ho7cPJ","name":"Summon","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"Summoner.placeAndSummon(\n  actor,\n  \"Shadow Spirit\",\n  {},\n  { setSpellBonuses: true }\n);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"DisintegratePurpleBlue","permission":{"default":0,"ccsO3NtPJs2xE1RS":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.qaU6l1AuKrRD9ijC"}},"scope":"global","command":"// Requires at least 1 target\nif(game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires token to be selected\nif(canvas.tokens.controlled.length == 0) ui.notifications.error(\"Please select your token\");\n// Requires FX Master Module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\nvar myStringArray = Array.from(game.user.targets)[0];\nvar arrayLength = game.user.targets.size;\nfor (var i = 0; i < arrayLength; i++) {\n\nlet mainTarget = Array.from(game.user.targets)[i];\nlet myToken = canvas.tokens.controlled [0];\n\nlet ray = new Ray(myToken.center, mainTarget.center);\nlet anDeg = -(ray.angle * 57.3);\nlet anDist = ray.distance;\n// Animation file path\nlet file = \"modules/jb2a_patreon/Library/6th_Level/Disintegrate/\";\n// Checking for range to target to choose which file to pull\nlet anFile = `${file}Disintegrate_01_Regular_PurpleBlue_15ft_1000x400.webm`;\nlet anFileSize = 600;\nlet anchorX = 0.2;\nswitch(true){\n case (anDist<=600):\n    anFileSize = 600;\n    anFile = `${file}Disintegrate_01_Regular_PurpleBlue_15ft_1000x400.webm`;\n    anchorX = 0.2;\n    break;\n case (anDist>1200):\n    anFileSize = 1800;\n    anFile = `${file}Disintegrate_01_Regular_PurpleBlue_45ft_2200x400.webm`;\n    anchorX = 0.091;\n    break;\n default:\n    anFileSize = 1200;\n    anFile = `${file}Disintegrate_01_Regular_PurpleBlue_30ft_1600x400.webm`;\n    anchorX = 0.125;\n    break;\n}\n// Scaling the Height of the animation for consistency across ranges\nlet anScale = anDist / anFileSize;\nlet anScaleY = anDist <= 600 ? 0.6  : anScale;\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: myToken.center,\n                      anchor: {\n                       x: anchorX,\n                       y: 0.5\n                      },\n                      angle: anDeg,\n                      scale: {\n                       x: anScale,\n                       y: anScaleY\n                      }\n                    }; \n\ncanvas.fxmaster.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\n\n// Add some sound\n/*\nawait wait (300);\nlet soundFile = `sound path here`;\nAudioHelper.play({src: soundFile, volume: 1.0, autoplay: true, loop: false}, true);\n*/\n// Or play random sounds on each attack\n/*\nlet soundHome = \"CustomSounds/battle/\";\n\nlet m1 = `sound 01 file location here`;\nlet m2 = `sound 02 file location here`;\nfunction random_sound(sounds)\n{\nreturn sounds[Math.floor(Math.random()*sounds.length)];\n}\n\nvar sounds = [m1, m2];\n\nlet roll = new Roll('1d3').roll().total;\nlet soundFile = random_sound(sounds);\nAudioHelper.play({src: soundHome + soundFile, volume: 0.9, autoplay: true, loop: false}, true);\n*/\n\n// Delete comments to activate token Magic FX. Requires the Token Magic FX Modules to be installed\n/*\nlet params =\n[{\n    filterType: \"fire\",\n    filterId: \"myFire\",\n    intensity: 3,\n    color: 0xFFFFFF,\n    amplitude: 2,\n    time: 0,\n    blend: 10,\n    fireBlend : 1,\n    alphaDiscard: true,\n    zOrder: 50,\n    animated :\n    {\n      time : \n      { \n        active: true, \n        speed: -0.0024, \n        animType: \"move\" \n      }\n    }\n},{\n    filterType: \"glow\",\n    filterId: \"glowripples\",\n    outerStrength: 4,\n    innerStrength: 2,\n// Change color here in hex\n    color: 0x7E00AD,\n    quality: 0.5,\n    padding: 10,\n    zOrder: 100,\n}];\nawait wait(500);\nTokenMagic.addUpdateFiltersOnTargeted(params);\nawait wait(2000);\nTokenMagic.deleteFiltersOnTargeted();\n*/\n}\n}\nCast ()","author":"OWUwMjUxOTE5MjE0","img":"modules/jb2a_patreon/Library/6th_Level/Disintegrate/Disintegrate_01_Regular_PurpleBlue_Thumb.webp","actorIds":[],"_id":"F4Oh1gDswinq9tCZ"}
{"_id":"FDjRuzQoDv6i1kew","name":"Jogar Tocha","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Drops a 0.5 sized token in the controlled token's current square and \n//reduces vision if it appears like the torch was the only source of light.\n//author: honeybadger#2614\n\nif (canvas.tokens.controlled.length !== 1) {\n  ui.notifications.error(\"Please select only one token.\");\n}\nelse{\n  for ( let charToDrop of canvas.tokens.controlled ) {\n    Token.create({\n      name: \"Dropped Torch\",\n      x: charToDrop.data.x,\n      y: charToDrop.data.y,\n      img: \"systems/dnd5e/icons/items/inventory/torch.jpg\",\n      width: 0.5,\n      height: 0.5,\n      scale: 1,\n      lockRotation: false,\n      rotation: 0,\n      vision: true,\n      dimLight: 40,\n      brightLight: 20,      \n      lightAlpha: .2,\n      hidden: false,\n      actorLink: false,\n      actorData: {},\n      disposition: CONST.TOKEN_DISPOSITIONS.NEUTRAL,\n      lightColor: \"#ffa742\"\n    });\n    let dialogEditor = new Dialog({\n  title: `Token Light Picker`,\n  content: `Pick the token's resulting light source.`,\n  buttons: {\n    none: {\n      label: `None`,\n      callback: () => {\n        charToDrop.update({\"dimLight\": 0, \"brightLight\": 0, \"lightAngle\": 360,});\n      }\n    },\n    candle: {\n      label: `Candle`,\n      callback: () => {\n        charToDrop.update({\"dimLight\": 10, \"brightLight\": 5, \"lightAngle\": 360, \"lightAlpha\": \".2\", \"lightColor\": \"#ffa742\",});\n      }\n    },\n  },\n  default: \"none\",\n  close: () => {}\n});\n\ndialogEditor.render(true)\n  }\n}","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"FOAD7iTkgAifJXTB","name":"24 - T07 - Mage Armor","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":2800000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"myMageField\",\r\n    shieldType: 7,\r\n    gridPadding: 1.05,\r\n    color: 0xFFFFFF,\r\n    time: 0,\r\n    blend: 4,\r\n    intensity: 0.8,\r\n    lightAlpha: 1,\r\n    lightSize: 0.45,\r\n    scale: 1,\r\n    radius: 1,\r\n    chromatic: false,\r\n    zOrder: 512,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"FPgMB8CO0Vml2H68","name":"17 - Fumes","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":2900000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"fumes\",\r\n    color: 0x909090,\r\n    time: 0,\r\n    blend: 8,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.001, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"FQaNeGxKgZTrGRcH","name":"Hex GM","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"const conditionIconPath = 'systems/dnd5e/icons/spells/horror-eerie-2.jpg';\nconst toggle_macro = game.macros.getName(\"toggle_condition\");\nlet macroActor = token;\nlet chatMsg = '';\n\n(async () => {\n  let cast = false;\n  for (let t of game.user.targets) {\n    await toggle_macro.execute(t.id, conditionIconPath);\n\n    if (t.data.effects.includes(conditionIconPath)) {cast = true;}\n    if (cast) {chatMsg = `${macroActor.name} has cast Hex on ${t.name}`;} else {chatMsg = `${t.name}'s Hex has expired`;}\n    if (chatMsg !== '') {let chatData = {user: game.user._id, speaker: ChatMessage.getSpeaker(), content: chatMsg}; ChatMessage.create(chatData, {});\n   }\n }\n if (cast) game.dnd5e.rollItemMacro(\"Hex\");\n})();","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/spells/horror-eerie-2.jpg","actorIds":[]}
{"name":"24 - T10 - Evil Aura","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"myEvilField\",\r\n    shieldType: 10,\r\n    gridPadding: 1,\r\n    color: 0xFF3010,\r\n    time: 0,\r\n    blend: 5,\r\n    intensity: 1,\r\n    lightAlpha: 4,\r\n    lightSize: 0.8,\r\n    scale: 0.5,\r\n    radius: 1,\r\n    chromatic: false,\r\n    zOrder: 512,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0012, \r\n        animType: \"move\" \r\n      },\r\n      lightSize:        \r\n      {\r\n        val1: 0.4, val2: 1.5,\r\n        animType: \"syncCosOscillation\",\r\n        loopDuration: 5000\r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"FT8PH9D9rc9ugynC"}
{"_id":"FuQj4GqQlg0oglzK","name":"Stealth Check","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":3000000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Grabs selected tokens and rolls a stealth check against all other tokens passive perception on the map. Then returns the result.\n\n// getting all actors of selected tokens\nlet actors = canvas.tokens.controlled.map(({ actor }) => actor);\n\n// if there are no selected tokens, roll for the player's character.\nif (actors.length < 1) {\n  actors = game.users.entities.map(entity => {\n    if (entity.active && entity.character !== null) {\n      return entity.character;\n    }\n  });\n}\nconst validActors = actors.filter(actor => actor != null);\n\nlet messageContent = 'pp = passive perception<br>';\n\n// roll for every actor\nfor (const selectedActor of validActors) {\n  const stealthMod = selectedActor.data.data.skills.ste.total; // stealth roll\n  const stealth = new Roll(`1d20+${stealthMod}`).roll().total; // rolling the formula\n  messageContent += `<hr><h3>${selectedActor.name} stealth roll was a <b>${stealth}</b>.</h3>`; // creating the output string\n\n  // grab a list of unique tokens then check their passive perception against the rolled stealth.\n  const uniqueActor = {};\n  const caughtBy = canvas.tokens.placeables\n    .filter(token => !!token.actor)\n    .filter(({ actor }) => { // filter out duplicate token names. ie: we assume all goblins have the same passive perception\n      if (uniqueActor[actor.name]) {\n        return false;\n      }\n      uniqueActor[actor.name] = true;\n      return true;\n    })\n    .filter(({ actor }) => {\n      return selectedActor.id !== actor.id; // Don't check to see if the token sees himself.\n    })\n    .filter(({ actor }) => actor.data.data.skills.prc.passive >= stealth); // check map tokens passives with roller stealth\n\n  if (!caughtBy.length) {\n    messageContent += 'Stealth successful!<br>';\n  } else {\n    messageContent += 'Stealth questionable:<br>';\n    caughtBy.map(({ actor }) => {\n      messageContent += `<b>${actor.name}</b> pp(${actor.data.data.skills.prc.passive}).<br>`;\n    });\n  }\n}\n\n// create the message\nconst chatData = {\n  user: game.user._id,\n  speaker: game.user,\n  content: messageContent,\n  whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\n};\nChatMessage.create(chatData, {});\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/mystery-man.svg","actorIds":[]}
{"_id":"GB5jISVfqXcMoJzy","name":"Thieves’ Tools","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":3100000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"OTAxNTAwZmJlZDYy\", \"wHQ1cIn2Gvd1Q35j\");","author":"ZTQ5MTU5OTJhOWMx","img":"systems/dnd5e/icons/items/inventory/lockpick.jpg","actorIds":[]}
{"_id":"GbYwJmN6h59ZXdQc","name":"Polearm Curse","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":2400000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Polearm Curse\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/items/weapons/quarterstaff.jpg","actorIds":[]}
{"_id":"GgLRYvKuRphFePtT","name":"Pistol (DMG)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":3200000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"yUaOBOfm6pF7gQqZ\", \"4YSuJP47RTlFfAy9\");","author":"ZTQ5MTU5OTJhOWMx","img":"modules/plutonium/media/icon/pocket-bow.svg","actorIds":[]}
{"_id":"GkI4FcS9ceOdMhbo","name":"30 - T02 - Infernal Web (field+web)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":3300000,"flags":{},"scope":"global","command":"let params = \r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"infernalWeb\",\r\n    shieldType: 1,\r\n    gridPadding: 1.5,\r\n    color: 0xCC2050,\r\n    time: 0,\r\n    blend: 3,\r\n    intensity: 1,\r\n    lightAlpha: 1,\r\n    lightSize: 0.8,\r\n    scale: 1,\r\n    radius: 1,\r\n    chromatic: false,\r\n    zOrder: 512,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0012, \r\n        animType: \"move\" \r\n      },\r\n      lightSize:        \r\n      {\r\n        val1: 0.4, val2: 1.5,\r\n        animType: \"syncCosOscillation\",\r\n        loopDuration: 5000\r\n      }\r\n    }\r\n}\r\n,{\r\n    filterType: \"web\",\r\n    filterId: \"infernalWeb\",\r\n    time: 100,\r\n    div1: 16,\r\n    div2: 8,\r\n    tear: 0.45,\r\n    amplitude: 0.8,\r\n    thickness: 2,\r\n    color: 0xAA3030,\r\n    zOrder: 1024,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0005, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}]\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"GsyMYReP4mWqeNdP","name":"27 - T01 - Burning Aura (xglow)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":2500000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"zapshadow\",\r\n    filterId: \"myZapShadow\",\r\n    alphaTolerance: 0.50\r\n},\r\n{\r\n    filterType: \"xglow\",\r\n    filterId: \"myBurningAura\",\r\n    auraType: 2,\r\n    color: 0x903010,\r\n    thickness: 9.8,\r\n    scale: 4.,\r\n    time: 0,\r\n    auraIntensity: 2,\r\n    subAuraIntensity: 1.5,\r\n    threshold: 0.40,\r\n    discard: true,\r\n    animated:\r\n    {\r\n        time : \r\n        {  \r\n           active: true,\r\n           speed: 0.0027, \r\n           animType: \"move\" \r\n        },\r\n        thickness:\r\n        {\r\n           active: true,\r\n           loopDuration: 3000, \r\n           animType: \"cosOscillation\", \r\n           val1:2, \r\n           val2:5\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"Gx96MZaubfmhlH6d","name":"Delete filters on Selected","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":3400000,"flags":{},"scope":"global","command":"// Delete all filters on the selected tokens/tiles\r\nTokenMagic.deleteFiltersOnSelected();","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"HbX3WDVyOrxCTXqr","name":"Eldritch Blast","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":2600000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"xIySk7UUw2JJzT3S\", \"ZnYIV38mtxQHVDRE\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/spell/phb-eldritch-blast.jpg","actorIds":[]}
{"_id":"HsbCL6jxmyv3Sfe5","name":"Condições Mapa","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"(async()=>{\nlet apply = false;\nlet remove = false;\nlet all = false;\nlet target = canvas.tokens.controlled[0];\nlet conditionsApplied = \"\";\nlet conditionOptions = \"\";\nlet conditions_list = game.cub.conditions;\nif(!target) return ui.notifications.error(`Please target exactly 1 token.`);\nfor(let i = 0; i < conditions_list.length; i++) {\n    let condition_on = conditions_list[i];\n    if (game.cub.hasCondition(condition_on.name, target)){\n    conditionsApplied +=`<span style=\"box-shadow: 2px 2px rgba(0, 0, 0, 0.3);margin-top:5px;margin-left:5px;border:1px solid transparent;background:#6c757d;color:#fff;display: inline-block;padding: .25em .4em;font-size: 75%;line-height: 1;text-align: center;white-space: nowrap;vertical-align: baseline;    border-radius: .25rem;transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;\"><img src=\"${condition_on.icon}\" height=\"20px\" width=\"20px\" style=\"margin-right:10px;\">${condition_on.name}</span>`;\n } \n}\nfor(let i = 0; i < conditions_list.length; i++) {\n    let condition_toggle = conditions_list[i];\n    let check_on = game.cub.hasCondition(condition_toggle.name, target) ? `ff0000` : `333`;\n    conditionOptions +=`<li style=\"display:inline-block;width:33%;font-size:12px;padding:5px;\">\n    <div style=\"border:1px solid #${check_on};border-radius: .25rem;box-shadow: 2px 2px rgba(0, 0, 0, 0.3);\">\n    <input type=\"checkbox\" value=\"${condition_toggle.name}\" name=\"conditionBox\">\n    <label for=\"${condition_toggle.name}\"><img src=\"${condition_toggle.icon}\" height=\"20px\" width=\"20px\" style=\"margin-right:5px;\"><span style=\"height:27px;line-height:27px;\">${condition_toggle.name}</span></label>\n    </div>\n    </li>`;\n}\nlet the_content = `<form><div><p>Current Effects on Target:</p>${conditionsApplied}</div><hr><p>Pick a Condition to Add or Remove.</p>\n<div style=\"height: 370px;overflow: scroll;\">\n<ul style=\"list-style:none;margin:0;padding:0;\">${conditionOptions}</ul></div></div>\n</form>`;\nlet x = new Dialog({\n\ttitle: \"Condition Manager\",\n\tcontent: the_content,\n\tbuttons: {\n        apply: { label: \"Apply it\", callback: () => apply = true },\n        remove: { label: \"Remove it\", callback: () => remove = true },\n        all: { label: \"Remove All\", callback: () => all = true }\n    },\n\tclose: async (html) => {\n        if (apply){\n        const con_list = [];\n        for(let i = 0; i < conditions_list.length; i++) {\n            if (html.find('[name=conditionBox]')[i].checked) {\n             let get_list = html.find('[name=conditionBox]')[i].value;\n            con_list.push(get_list);\n           }\n        }\n           await game.cub.addCondition(con_list, target);\n        }\n        if (remove){\n        const con_list = [];\n        for(let i = 0; i < conditions_list.length; i++) {\n            if (html.find('[name=conditionBox]')[i].checked) {\n                let get_list = html.find('[name=conditionBox]')[i].value;\n                con_list.push(get_list);\n            }\n           }\n           await game.cub.removeCondition(con_list, target);\n        }\n        if(all){\n           await game.cub.removeAllConditions(target);\n        }\n    }\n});\nx.position.width = 700;\nx.position.height = 560;\nx.render(true);\n})();","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/daze.svg","actorIds":[]}
{"_id":"I4rdC5AGlFtjGHL8","name":"22 - Smoke","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":3500000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"smoke\",\r\n    color: 0x00FF00,\r\n    time: 0,\r\n    blend: 0,\r\n    dimX: 1,\r\n    dimY: 1,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: -0.006, \r\n        animType: \"move\"\r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"IlUvmK0vRTbjgiY3","name":"11 - Blur","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":2700000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"blur\",\r\n    filterId: \"myBlur\",\r\n    padding: 10,\r\n    quality: 4.0,\r\n    blur: 0,\r\n    blurX: 0,\r\n    blurY: 0,\r\n    animated:\r\n    {\r\n        blurX: \r\n        { \r\n           active: true, \r\n           animType: \"syncCosOscillation\", \r\n           loopDuration: 500, \r\n           val1: 0, \r\n           val2: 6\r\n        },\r\n        blurY: \r\n        { \r\n           active: true, \r\n           animType: \"syncCosOscillation\", \r\n           loopDuration: 750, \r\n           val1: 0, \r\n           val2: 6}\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"IwEe4BgrCv8uLCbH","name":"24 - T06 - Air Bubble","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":3600000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    shieldType: 6,\r\n    gridPadding: 1,\r\n    color: 0x306090,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 1.3,\r\n    lightAlpha: 1,\r\n    lightSize: 0.7,\r\n    scale: 1,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"J0Jni2X4XtrW6DOb","name":"Arcane Jolt (Battle Smith 9)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":3700000,"flags":{"dnd5e":{"itemMacro":true},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"BetterRolls.quickRollById(\"iTrdFFPm7BwR9Tpw\", \"Lg7eiYklRh0zppQt\");","author":"ZTQ5MTU5OTJhOWMx","img":"icons/svg/lightning.svg","actorIds":[]}
{"_id":"J1tUyd9lEDgmRGK1","name":"Hexblade's Curse","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":2800000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//------------------------------------------------------\n// Hexblade's Curse Toggle\n//     Toggles the bonus damage to weapon and spell\n//     attacks as well as the critical hit range change\n//     due to Hexblade's Curse for dnd5e characters.\n//\n//     It whispers the toggle's status to the GM,  and \n//     shows an icon on the character's token when \n//     the effect is active.\n//\n//     The only set-up that is required, is putting the\n//     warlock's character id below here. You can find \n//     this id by right-clicking on an Actor in Foundry\n//     and selecting Export Data. The very first field in\n//     the .json file is called \"_id\" and the string following\n//     it is the id you need.\n//------------------------------------------------------\nconst actor = game.actors.get(\"xez33WOwJpZxlHKM\");\n//------------------------------------------------------\n\nconst currentCritThreshold = actor.getFlag(\"dnd5e\",\"weaponCriticalThreshold\")\nconst prof = actor.data.data.attributes.prof;\n\nif (currentCritThreshold == 20) {\nactor.setFlag(\"dnd5e\",\"weaponCriticalThreshold\",19);\nconsole.log(\"Melee weapon attack damage bonus:\",actor.data.data.bonuses.mwak.damage)\nconsole.log(\"Proficiency bonus:\",actor.data.data.attributes.prof)\nlet updates = {\n'data.bonuses.mwak.damage': prof,\n'data.bonuses.rwak.damage': prof,\n'data.bonuses.msak.damage': prof,\n'data.bonuses.rsak.damage': prof\n};\nactor.update(updates);\n//console.log(\"Hexblade's Curse Activated\");\nlet msgContent = \"Hexblade's Curse: Target Acquired\";\nlet chatData = {\n  user:  game.user.id,\n  speaker: game.user,\n  content:  msgContent,\n  //whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\n};\nChatMessage.create(chatData,{});\n} else {\nactor.setFlag(\"dnd5e\",\"weaponCriticalThreshold\",20);\nlet updates = {\n'data.bonuses.mwak.damage': 0,\n'data.bonuses.rwak.damage': 0,\n'data.bonuses.msak.damage': 0,\n'data.bonuses.rsak.damage': 0\n};\nactor.update(updates);\n//console.log(\"Hexblade's Curse Deactivated\");\nlet msgContent = \"Hexblade's Curse: Target Lost\";\nlet chatData = {\n  user:  game.user.id,\n  speaker: game.user,\n  content:  msgContent,\n  //whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\n};\nChatMessage.create(chatData,{});\n}","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"JcQBzyRqoynGoAoK","name":"27 - T06 - Pure Ice (xglow+smoke)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":2900000,"flags":{},"scope":"global","command":"let params =\r\n    [{\r\n        filterType: \"zapshadow\",\r\n        filterId: \"myPureIceZapShadow\",\r\n        alphaTolerance: 0.50\r\n    },\r\n    {\r\n        filterType: \"xglow\",\r\n        filterId: \"myPureIceAura\",\r\n        auraType: 1,\r\n        color: 0x5099DD,\r\n        thickness: 4.5,\r\n        scale: 10,\r\n        time: 0,\r\n        auraIntensity: 0.25,\r\n        subAuraIntensity: 1,\r\n        threshold: 0.5,\r\n        discard: false,\r\n        animated:\r\n        {\r\n            time:\r\n            {\r\n                active: true,\r\n                speed: 0.0018,\r\n                animType: \"move\"\r\n            },\r\n            thickness:\r\n            {\r\n                val1: 2, val2: 2.5,\r\n                animType: \"cosOscillation\",\r\n                loopDuration: 3000\r\n            },\r\n            subAuraIntensity:\r\n            {\r\n                val1: 0.45, val2: 0.65,\r\n                animType: \"cosOscillation\",\r\n                loopDuration: 6000\r\n            },\r\n            auraIntensity:\r\n            {\r\n                val1: 0.9, val2: 2.2,\r\n                animType: \"cosOscillation\",\r\n                loopDuration: 3000\r\n            }\r\n        }\r\n    },\r\n    {\r\n        filterType: \"smoke\",\r\n        filterId: \"myPureIceSmoke\",\r\n        color: 0x80CCFF,\r\n        time: 0,\r\n        blend: 2,\r\n        dimX: 0.3,\r\n        dimY: 1,\r\n        animated:\r\n        {\r\n            time:\r\n            {\r\n                active: true,\r\n                speed: -0.006,\r\n                animType: \"move\"\r\n            },\r\n            dimX:\r\n            {\r\n                val1: 0.4, val2: 0.2,\r\n                animType: \"cosOscillation\",\r\n                loopDuration: 3000\r\n            }\r\n        }\r\n    }];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"Jn5rFH74UBc5jowT","name":"Wand (Scorching Ray - Spell Stored)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":3000000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"jkDskn1sHQDVDYI6\", \"ryXMp6uTAxR7kY2L\");","author":"ZTQ5MTU5OTJhOWMx","img":"systems/dnd5e/icons/items/weapons/staff-green.jpg","actorIds":[]}
{"_id":"K3eazLfucSCnl7vp","name":"Efeitos On/Off","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"(async ()=>{\nlet target = canvas.tokens.controlled[0];\nlet effect = target.actor.effects.entries;\nconsole.log(effect);\nlet confirmed = false;\nlet selectOptions = \"\";\nfor (let i = 0; i < effect.length; i++){\nconst effect_name = effect[i].data.label;\nconst effect_id = effect[i].data._id;\nconst effect_status = effect[i].data.disabled;\nconst effect_switch = effect_status === true ? \"Off\" : \"On\";\nselectOptions +=`<option value=\"${effect_id}\">${effect_name} [${effect_switch}]</option>`;\n}\n\nlet the_content = `<form class=\"flexcol\"><div class=\"form-group\"><select id=\"element\">${selectOptions}</select></div></form>`;\n  new Dialog({\n\t  title: `DAE Toggle on ${target.data.name}.`,\n\t  content: the_content,\n\t\tbuttons: {\n            yes: {                \n                label: 'Turn it Off',\n                callback: (html) => {\n                    let element = html.find('#element').val();                  \n                    target.actor.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": element,  \"disabled\" : true});\n                }\n              },\n              no: {                \n                label: 'Turn it On',\n                callback: (html) => {\n                    let element = html.find('#element').val();                  \n                    target.actor.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": element,  \"disabled\" : false});\n                } \n              },\n              remove: {\n                label: 'Delete It',\n                callback: (html) => {\n                    let element = html.find('#element').val();                  \n                    target.actor.deleteEmbeddedEntity(\"ActiveEffect\", element);\n                } \n              }\n            }\n        }).render(true);\n\n})();","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/degen.svg","actorIds":[]}
{"_id":"KFgRbF2Ey0ajoKrI","name":"E - Click, click, click and click !","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":3800000,"flags":{},"scope":"global","command":"let glowFunc = async function() {\r\n\r\n   const myTokens = canvas.tokens.placeables;\r\n\r\n   for (const myToken of myTokens ){\r\n       if (myToken.TMFXhasFilterId(\"funnyAlternateGlow\")) {\r\n           await myToken.TMFXdeleteFilters(\"funnyAlternateGlow\");\r\n       } else {\r\n           let params =\r\n           [{\r\n               filterType: \"glow\",\r\n               filterId: \"funnyAlternateGlow\",\r\n               color: Math.floor(Math.random() * 16777215),\r\n               animated: null\r\n           }];\r\n           await myToken.TMFXaddUpdateFilters(params);\r\n       }\r\n   }\r\n};\r\n\r\nglowFunc();","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"KTlg5EQuqiUjGoky","name":"Criar Cenas por Pasta","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":3900000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**  Quick and dirty import Macro to create scenes with list of images/videos\r\n* Macro type: script\r\n* Made by Ties de Kok (github.com/tiesdekok)\r\n* Parts might be copied from the Foundry VTT discord server\r\n------ Instructions --------\r\n1. @param backgroundsToImport is an Array with filenames referring to images/videos\r\n2. @param parentFolderName is the name of the folder in the FVTT Scenes tab\r\n3. @param localFolder is the filesystem folder inside you FVTT storage > data where you videos/images are stored\r\n4. Modify line 38 and change .mp4 to whatever you filetype is\r\n------ Current Known limitations ---------\r\n* Many, this will break in many cases but it is only supposed to be ran a couple times to auto-generate scenes once you find a bunch of new backgrounds.\r\n*/\r\n\r\n(async () => {\r\n\r\nvar backgroundsToImport = ['ABANDONED CAVERN - GRID.mp4', 'ADMaps_DUNGEON SLAVE MARKET.mp4', 'ADMaps_TWISTED CAVES - GRID.mp4'];\r\nvar parentFolderName = 'Animated maps - unused'\r\nvar localFolder = 'animated_maps'\r\n\r\nasync function createSceneCustom (imgName) {\r\n    var parentFolder = game.folders.filter(t => (t.data.name == parentFolderName))[0];\r\n    var imgPath = localFolder + \"/\" + imgName + \".mp4\";\r\n    \r\n    var createData = {name: imgName, \r\n                      navigation: false, \r\n                      folder: parentFolder.data._id,\r\n                      img: imgPath};\r\n    var createdScene = await Scene.create(createData)\r\n    BackgroundLayer.createThumbnail(createdScene.data.img).then(data => {\r\n        createdScene.update({thumb: data.thumb});\r\n      });  \r\n}\r\n\r\nbackgroundsToImport.forEach(imgName => {\r\n    createSceneCustom(imgName.replace('.mp4', '')\r\n    )\r\n})\r\n\r\n})()","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"KnEpPAaBtPCTBdQR","name":"Pegar Tocha","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//GM ONLY MACRO (players cannot delete)\n//Will find and delete a \"Dropped Torch\" within 1 grid unit and apply vision changes\n//to the controlled token.\n//author:honeybadger#2614\n\nif (canvas.tokens.controlled.length !== 1) {\n  ui.notifications.error(\"Please select only one token to pick up a torch.\");\n  return;\n}\n\n// collect all tokens named \"Dropped Torch\"\nlet canvasTokens = canvas.scene.getEmbeddedCollection('Token');\nlet droppedTorches = canvasTokens.filter(candidate => candidate.name == \"Dropped Torch\");\nif(droppedTorches.length === 0){\n  ui.notifications.error(\"There are no Dropped Torches on this scene!\");\n}\n\n//grab the selected token's position (we know only one is selected)\nlet selectedToken = canvas.tokens.controlled[0];\n\n//create the search reducer (use 5e rules: distance = max(distX, distY)\nconst findClosestTorch = (closestTorch, currentTorch) => {\n   //X,Y distance current torch\n   let distX = Math.abs(currentTorch.x - selectedToken.x);\n   let distY = Math.abs(currentTorch.y - selectedToken.y);\n   let currentDistance = Math.max(distX, distY);\n\n   //X,Y distance closest torch\n   let distCloseX = Math.abs(closestTorch.x - selectedToken.x);\n   let distCloseY = Math.abs(closestTorch.y - selectedToken.y);\n   let closestDistance = Math.max(distCloseX, distCloseY);\n\n   let minimum = Math.min(closestDistance, currentDistance);\n\n   //match the resulting minimum distance to either the current or previous torch\n   return minimum === closestDistance ? closestTorch : currentTorch;\n}\n\nlet minimumTorch = droppedTorches.reduce(findClosestTorch, droppedTorches[0]);\n\n//check that its within arm's reach\nlet gridSize = canvas.grid.size;\nlet torchDeltaX = Math.abs(selectedToken.x - minimumTorch.x);\nlet torchDeltaY = Math.abs(selectedToken.y - minimumTorch.y);\nif (torchDeltaX <= gridSize && torchDeltaY <= gridSize){\n   //torch within reach\n   ui.notifications.info(\"You picked up a nearby torch.\");\n   \n   //find the actual torch object on the canvas and delete it\n   canvas.scene.deleteEmbeddedEntity('Token', minimumTorch._id);\n\n   //sanitize vision numbers for max();\n   let currentBright = isNaN(selectedToken.brightLight) ? 0 : selectedToken.brightLight;\n   let currentDim = isNaN(selectedToken.dimLight) ? 0 : selectedToken.dimLight;\n\n   //update the controlled token's vision (just bright/dim radius if its smaller, do not adjust \"has sight\")\n   let newBright = Math.max(currentBright, 20);\n   let newDim = Math.max(currentDim, 40);\n   selectedToken.update({\"brightLight\": newBright,\n                         \"dimLight\": newDim,\n                         \"lightColor\": newBright === 20 ? \"#ffa742\" : \"#ffffff\"});\n}\nelse{\n  ui.notifications.error(\"Dropped torch not within reach (1 grid unit). Get closer.\");\n}","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Manopla Manshoon","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Manopla Manshoon\");","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/skills/ice_10.jpg","actorIds":[],"_id":"L7lYmg5moqzAPluT"}
{"_id":"LSHlX1hRgg9yYNRD","name":"19 - Fire","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":4000000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"fire\",\r\n    intensity: 1,\r\n    color: 0xFFFFFF,\r\n    amplitude: 1,\r\n    time: 0,\r\n    blend: 2,\r\n    fireBlend : 1,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: -0.0019, \r\n        animType: \"move\" \r\n      },\r\n      intensity:\r\n      {\r\n        active:true,\r\n        loopDuration: 15485,\r\n        val1: 1,\r\n        val2: 2,\r\n        animType: \"syncCosOscillation\"\r\n      },\r\n      amplitude:\r\n      {\r\n        active:true,\r\n        loopDuration: 4567,\r\n        val1: 1,\r\n        val2: 2,\r\n        animType: \"syncCosOscillation\"\r\n      }\r\n      \r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"LlL6VCIqBz1AUraM","name":"Invisible","permission":{"default":0,"devnIbfBHb74U9Zv":3,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":4100000,"flags":{"furnace":{"gmexecute":true,"runAsGM":true},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"//#args 0=tokenId 1 = sceneId\r\nlet hide = args[0] === \"on\";\r\nscene.updateEmbeddedEntity(\"Zaak Novissimo\", {\"_id\": args[1], \"hidden\": hide})","author":"ZTQ5MTU5OTJhOWMx","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"ML4sBYqFzuxQ0jkK","name":"Performance Debug","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":4200000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"ChatMessage.create({\n    user: game.user._id,\n    content: JSON.stringify({\n        Walls: canvas.walls.placeables.length,\n        Lights: canvas.lighting.placeables.length,\n        Tokens: canvas.tokens.placeables.length,\n        Dimensions: {x: canvas.dimensions.width, y: canvas.dimensions.height}\n    }, null, 2),\n    speaker: ChatMessage.getSpeaker()\n}, {});","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"MNTqWfkJGn05QlwU","name":"Smith's Tools","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":4300000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"OTAxNTAwZmJlZDYy\", \"BfTcMWttPtFmOxp0\");","author":"ZTQ5MTU5OTJhOWMx","img":"systems/dnd5e/icons/items/inventory/hammer.jpg","actorIds":[]}
{"_id":"MTADDQ29KcFvZjAc","name":"New Macro","permission":{"default":0,"jSIbaKrMQZ5trOzn":3},"type":"chat","sort":11000000,"flags":{},"scope":"global","command":"","author":"jSIbaKrMQZ5trOzn","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Fire Ballista","permission":{"default":0,"MzYzNTJjZTQ5OThh":3},"type":"script","sort":100001,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Fire Ballista\");","author":"MzYzNTJjZTQ5OThh","img":"modules/plutonium/media/icon/ship-wheel.svg","actorIds":[],"_id":"MVckiwksHfvQ5qpH"}
{"name":"26 - T01 - Spectral Body (liquid)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"liquid\",\r\n    filterId: \"mySpectralBody\",\r\n    color: 0x20AAEE,\r\n    time: 0,\r\n    blend: 8,\r\n    intensity: 4,\r\n    spectral: true,\r\n    scale: 0.9,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.0010, \r\n          animType: \"move\" \r\n       },\r\n       color: \r\n       {\r\n          active: true, \r\n          loopDuration: 6000, \r\n          animType: \"colorOscillation\", \r\n          val1:0xFFFFFF, \r\n          val2:0x00AAFF\r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"MWNzGS6nqJMp9eTJ"}
{"_id":"Mnasrl5mxFxPRRes","name":"Eldritch Blast","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":3100000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Eldritch Blast\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/spell/phb-eldritch-blast.jpg","actorIds":[]}
{"name":"Polygon Drawing To Walls","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"/**\n * Converts selected polygon drawing to a wall\n * @Author: cole#9640\n */\n\nlet drawings = canvas.drawings.controlled;\n\ndrawings = drawings.filter(drawing =>  {\n    if (!drawing.isPolygon) {\n        ui.notifications.warn(`Drawing \"${drawing.data._id}\" is not a polygon, skipping`);\n        return false;\n    }\n    return true;\n});\n\nif (drawings.length) {\n    const newWalls = drawings.flatMap((drawing) => {\n        const { x, y, width, height } = drawing.data;\n        const xCenterOffset = width/2;\n        const yCenterOffset = height/2;\n        \n        const θ = toRadians(drawing.data.rotation);\n        const cosθ = Math.cos(θ);\n        const sinθ = Math.sin(θ);\n        \n        const points = drawing.data.points.map((point) => {\n            const offsetX = point[0] - xCenterOffset;\n            const offsetY = point[1] - yCenterOffset;\n            const rotatedX = (offsetX * cosθ - offsetY * sinθ);\n            const rotatedY = (offsetY * cosθ + offsetX * sinθ);\n            return [rotatedX + x + xCenterOffset, rotatedY + y + yCenterOffset];\n        });\n        \n        return points.slice(0, points.length - 1)\n            .map((point, i) => {\n                return { c: point.concat(points[i + 1]) };\n            });\n    });\n    \n    canvas.scene.createEmbeddedEntity(\"Wall\", newWalls);\n    canvas.walls.activate();\n} else {\n    ui.notifications.error(\"No polygon drawings selected!\");\n}\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"Ms3HqGWc8XMNcJRY"}
{"_id":"N0KworcQZcZySHHS","name":"00 - A - Delete filters on Selected","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":3200000,"flags":{},"scope":"global","command":"// Delete all filters on the selected tokens/tiles\nTokenMagic.deleteFiltersOnSelected();","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"N7UVKJ6OKTz4pR4r","name":"Hexblade's Curse","permission":{"default":0,"OWUwMjUxOTE5MjE0":3,"OGI1ZmNiNjZhNWIz":3},"type":"script","folder":null,"sort":100000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"DynamicEffects.togglePassive(\"Hexblade's Curse\", \"feat\")","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/skills/affliction_03.jpg","actorIds":[]}
{"_id":"NPD3I1FQYOLiE9xz","name":"Tabela Visão Limitada","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"const thisTable = game.tables.getName(\"Aerial Encounters\");\nconst thisRoll = thisTable.roll();\nawait game.dice3d.showForRoll(thisRoll.roll); //show this roll via DSN\nawait thisTable.draw(thisRoll);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"NffaFWvWuMoR1yLb","name":"35 - T05 - Black Fire (xfire)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","folder":null,"sort":200000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\n[{\n    filterType: \"xfire\",\n    filterId: \"myBlackXFire\",\n    time: 0,\n    color: 0x707070,\n    blend: 12.9,\n    amplitude: 1,\n    dispersion: 2.2,\n    chromatic: false,\n    scaleX: 2.5,\n    scaleY: 2,\n    inlay: false,\n    animated :\n    {\n      time : \n      { \n        active: true, \n        speed: -0.0015, \n        animType: \"move\" \n      }\n    }\n}];\n\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"NiGLbtBcoa0eK6OO","name":"TesteHexblade","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":3300000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"async function send_msg(speaking_actor, content){\n    ChatMessage.create({\n        user: game.user._id,\n        speaker: ChatMessage.getSpeaker(speaking_actor),\n        content: content\n    });\n}\n\nasync function main() {\n    if (canvas.tokens.controlled.length != 1) {\n        ui.notifications.error(\"Selecione apenas um token\");\n        return;\n    }\n    let actor_handle = canvas.tokens.controlled[0].actor;\n    if (actor_handle.getFlag(\"dnd5e\", \"weaponCriticalThreshold\") == 20 && actor_handle.getFlag(\"dnd5e\", \"spellCriticalThreshold\") == 20) {\n        actor_handle.setFlag(\"dnd5e\", \"weaponCriticalThreshold\", 19);\n        actor_handle.setFlag(\"dnd5e\", \"spellCriticalThreshold\", 19);\n        send_msg(actor_handle, \"[Hexblade's Curse] Alcance crit expandido para 19.\");\n    } else if (actor_handle.getFlag(\"dnd5e\", \"weaponCriticalThreshold\") == 19 && actor_handle.getFlag(\"dnd5e\", \"spellCriticalThreshold\") == 19) {\n        actor_handle.setFlag(\"dnd5e\", \"weaponCriticalThreshold\", 20);\n        actor_handle.setFlag(\"dnd5e\", \"spellCriticalThreshold\", 20);\n        send_msg(actor_handle, \"Redefinir intervalo crit para 20\");\n    } else {\n        send_msg(actor_handle, \"Os intervalos de críticos se tornaram incompatíveis ou foram alterados manualmente. Os valores não foram alterados.\");\n    }\n}\n\nmain();","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/skills/violet_04.jpg","actorIds":[]}
{"_id":"Nn490rHNRUz3XhoE","name":"Calligrapher's Supplies","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":4400000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"OTAxNTAwZmJlZDYy\", \"F0IAgujNUKYLJDwm\");","author":"ZTQ5MTU5OTJhOWMx","img":"systems/dnd5e/icons/items/inventory/note-letter.jpg","actorIds":[]}
{"_id":"O1cG9NkuIO5ZX3zL","name":"05 - Glow","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":4500000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"glow\",\r\n    distance: 10,\r\n    outerStrength: 8,\r\n    innerStrength: 0,\r\n    color: 0x003000,\r\n    quality: 0.5,\r\n    padding: 10,\r\n    animated:\r\n    {\r\n        color: \r\n        {\r\n           active: true, \r\n           loopDuration: 3000, \r\n           animType: \"colorOscillation\", \r\n           val1:0x003000, \r\n           val2:0x00FF00\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"O5LiXyltuuw43KlS","name":"Glaive Curse","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":3400000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Glaive Curse\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/items/weapons/glaive.png","actorIds":[]}
{"_id":"P4UVeU7AKYL6eiCa","name":"03 - Drop Shadow","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":4600000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"shadow\",\r\n    rotation: 35,\r\n    blur: 2,\r\n    quality: 5,\r\n    distance: 20,\r\n    alpha: 0.7,\r\n    padding: 10,\r\n    shadowOnly: false,\r\n    color: 0x000000,\r\n    animated:\r\n    {\r\n        blur:     \r\n        { \r\n           active: true, \r\n           loopDuration: 500, \r\n           animType: \"syncCosOscillation\", \r\n           val1: 2, \r\n           val2: 4\r\n        },\r\n        rotation:\r\n        {\r\n           active: true,\r\n           loopDuration: 100,\r\n           animType: \"syncSinOscillation\",\r\n           val1: 33,\r\n           val2: 37\r\n        }\r\n     }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"P5EjkQXV0lMgXVn4","name":"33 - T01 - Evade Stance (transform)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":3500000,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"let params =\r\n    [{\r\n        filterType: \"transform\",\r\n        filterId: \"dodgeStance\",\r\n        padding: 50,\r\n        animated:\r\n        {\r\n            translationX:\r\n            {\r\n                animType: \"sinOscillation\",\r\n                val1: -0.125,\r\n                val2: +0.125,\r\n                loopDuration: 1400,\r\n            },\r\n            translationY:\r\n            {\r\n                animType: \"cosOscillation\",\r\n                val1: -0.035,\r\n                val2: +0.035,\r\n                loopDuration: 1400,\r\n            }\r\n        }\r\n    }];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"P91ohpe4dDYtpeNn","name":"Claws (Espuleta)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":4700000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"iTrdFFPm7BwR9Tpw\", \"xi1jyw2Ljc5z10bY\");","author":"ZTQ5MTU5OTJhOWMx","img":"https://i.pinimg.com/originals/2d/3e/c6/2d3ec6afce230b3f14b38d71c01638bd.jpg","actorIds":[]}
{"name":"Crown of Stars","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":100001,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Crown of Stars\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/spell/xge-crown-of-stars.jpg","actorIds":[],"_id":"PEvhDDG6cMnFsTOd"}
{"_id":"PQYVNujZEz4BVcho","name":"Bless - apply","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":4800000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"DynamicEffects.applyActive(\"Bless\", true, \"spell\")","author":"ZTQ5MTU5OTJhOWMx","img":"systems/dnd5e/icons/spells/haste-sky-1.jpg","actorIds":[]}
{"_id":"PZEf5VAc7AH07c4j","name":"Hunter's Mark","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":3600000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"tIjc1WtMeMkbc98k\", \"pPbx5A6wYB90aIay\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/spell/phb-hunters-mark.jpg","actorIds":[]}
{"_id":"PaJK7e3FKX9AZZ7g","name":"Remove Conditions","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":4900000,"flags":{},"scope":"global","command":"for ( let token of canvas.tokens.controlled ){\n  await token.update({\"effects\": []});\n}\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"PjZTpTttFpydNRUj","name":"Encontrar Luz pela Cor","permission":{"OWUwMjUxOTE5MjE0":3},"type":"script","sort":5000000,"flags":{},"scope":"global","command":"// Courtesy of @FloRad\r\n// Right here's a macro that looks for lights of a certain color, \r\n// sets a different color and then logs out the ids of the \r\n// lights it previously found using the marker color\r\n(async () => {\r\n    let foundLights = [];\r\n    let markingColor = \"#00ff00\"\r\n    let newColor = \"#bbb\"\r\n    let scene = game.scenes.active;\r\n\r\n    canvas.lighting.placeables.forEach(l => { if (l.data.tintColor === markingColor && l.scene === scene) foundLights.push(l.id) })\r\n\r\n    const updates = []\r\n    foundLights.forEach(id => {\r\n        updates.push({ _id: id, tintColor: newColor });\r\n    })\r\n\r\n    await scene.updateEmbeddedEntity(\"AmbientLight\", updates);\r\n\r\n    console.log(foundLights)\r\n})()","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"PnLuSytHReXEaYPD","name":"C - Electric Multi-Filters","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":5100000,"flags":{},"scope":"global","command":"// works better with tokens or tiles with no shadows\r\nlet params =\r\n[{\r\n    filterType: \"shadow\",\r\n    blur: 2,\r\n    quality: 5,\r\n    distance: 0,\r\n    alpha: 1.,\r\n    padding: 100,\r\n    color: 0xFFFFFF,\r\n    animated:\r\n    {\r\n        blur:     \r\n        { \r\n           active: true, \r\n           loopDuration: 500, \r\n           animType: \"syncCosOscillation\", \r\n           val1: 2, \r\n           val2: 4\r\n        },\r\n     }\r\n},\r\n{\r\n    filterType: \"electric\",\r\n    color: 0xFFFFFF,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 5,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0020, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"PuNsG5TYfLBZq6Zz","name":"26 - T01 - Spectral Body (liquid)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":3700000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"liquid\",\r\n    filterId: \"mySpectralBody\",\r\n    color: 0x20AAEE,\r\n    time: 0,\r\n    blend: 8,\r\n    intensity: 4,\r\n    spectral: true,\r\n    scale: 0.9,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.0010, \r\n          animType: \"move\" \r\n       },\r\n       color: \r\n       {\r\n          active: true, \r\n          loopDuration: 6000, \r\n          animType: \"colorOscillation\", \r\n          val1:0xFFFFFF, \r\n          val2:0x00AAFF\r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"QREGG4HplrgNpJUK","name":"08 - Old film","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":5200000,"flags":{},"scope":"global","command":"// special : the OldFilm filter need an Outline filter to be contained (or else, it will affect all the container)\r\nlet params =\r\n[{\r\n    filterType: \"oldfilm\",\r\n    sepia: 0.9,\r\n    noise: 0.3,\r\n    noiseSize: 1.0,\r\n    scratch: 0.8,\r\n    scratchDensity: 0.5,\r\n    scratchWidth: 1.2,\r\n    vignetting: 0.3,\r\n    vignettingAlpha: 0.7,\r\n    vignettingBlur: 0.3,\r\n    animated:\r\n    {\r\n        seed:        \r\n        { \r\n           active: true, \r\n           animType: \"randomNumber\", \r\n           val1: 0, \r\n           val2: 1 \r\n        },\r\n        vignetting:  \r\n        { \r\n           active: true, \r\n           animType: \"syncCosOscillation\" , \r\n           loopDuration: 2000, \r\n           val1: 0.2, \r\n           val2: 0.4 }\r\n    }\r\n},\r\n{\r\n    filterType: \"outline\",\r\n    color: 0x000000,\r\n    thickness: 0,\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"QbBSVFnj6jzEyKSB","name":"pan-camera","permission":{"FRJk2q4bH9IdLZDf":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":5300000,"flags":{},"scope":"global","command":"// Pan the canvas camera to a position X and Y, in pixels.\r\n// Can also set the zoom level using the third optional argument.\r\n// Example: /pan-camera 1500\r\n// Example: /pan-camera 2500 2000 0.3\r\n\r\ncanvas.pan({x: args[0], y: args[1], scale: args[2]})","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"QlwJYZ9mkNS5xC0Z","name":"Pistol","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":5400000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"iTrdFFPm7BwR9Tpw\", \"T90faSkBhxSfGhpg\");","author":"ZTQ5MTU5OTJhOWMx","img":"worlds/herois-de-waterdeep/characters/186_-_Zaak/token.png","actorIds":[]}
{"_id":"Qyp4N3D46uIKz71t","name":"Token HP","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":5500000,"flags":{},"scope":"global","command":"/**\n * Roll/Reroll selected token HP\n * Author: Tielc#7191\n */\n\nconst tokens = canvas.tokens.controlled;\nlet choice = 0;\n\nif (tokens.length > 0){\n\ttokens.forEach(rollHP);\n} else {\n\tprintMessage(\"No Tokens were selected\");\n}\n\nfunction rollHP(token, index){\n\tlet actor = token.actor;\n\tlet formula = actor.data.data.attributes.hp.formula;\n\t\t\n\tif (actor.data.type != \"npc\" || !formula) return;\n\t\n\tlet hp = new Roll(formula).roll().total;\n\t\n\tactor.data.data.attributes.hp.value = hp;\n\tactor.data.data.attributes.hp.max = hp;\n\t\n\tprintMessage('<h2>' + actor.data.name + '</h2><strong>HP:</strong> ' + actor.data.data.attributes.hp.value + '/' + actor.data.data.attributes.hp.max + '<span style=\"float:right\"><em>(' + token.data._id + ')</em></span>');\n}\n\nfunction printMessage(message){\n\tlet chatData = {\n\t\tuser : game.user._id,\n\t\tcontent : message,\n\t\tblind: true,\n\t\twhisper : game.users.entities.filter(u => u.isGM).map(u => u._id)\n\t};\n\n\tChatMessage.create(chatData,{});\t\n}\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"RBRlcABxcMSiFawA","name":"Armor of Agathys","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":3800000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"xIySk7UUw2JJzT3S\", \"NJFii1BptBymS5WF\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/spell/phb-armor-of-agathys.jpg","actorIds":[]}
{"_id":"RGq8miCKkj6GZM9I","name":"07 - Distortion","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":3900000,"flags":{},"scope":"global","command":"// you can change the mask of the filter\r\n// the mask must have a power of 2 h and w (512x512, 128x128, ...) \r\n// the distortion applies on black and white and shades of grey\r\n// after testing the first version of this macro try this :\r\n// -> maskPath: \"/modules/tokenmagic/fx/assets/waves-2.png\"\r\n\r\nlet params =\r\n[{\r\n    filterType: \"distortion\",\r\n    filterId: \"myDistortion\",\r\n    maskPath: \"/modules/tokenmagic/fx/assets/distortion-1.png\",\r\n    maskSpriteScaleX: 5,\r\n    maskSpriteScaleY: 5,\r\n    padding: 20,\r\n    animated:\r\n    {\r\n        maskSpriteX: { active: true, speed: 0.05, animType: \"move\" },\r\n        maskSpriteY: { active: true, speed: 0.07, animType: \"move\" }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"RJkD6WuWLdek2eM3","name":"Sneak Attack","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":5600000,"flags":{},"scope":"global","command":"//\t\tDISCLAIMER:\t\tThis macro is heavily based on the original D&D 5e Rage Macro masterwork written by Felix#6196.\n//\t\t\t\t\t\tNorc#5108 created and is maintaining this macro.\n//\n//\t\t\t\t\t\tUpdates:\t1.\t2020/06/05: Initial version.\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tBonus Tip: Sneak Attack as a Condition                                                                                                                       \n//!!!\tIf you use the Combat Utility Belt module's Condition Lab, try adding a condition called \"Sneaky\" with the same icon \t\t\t   \n//!!!\tas the optional sneak attack icon overlay, 'icons/svg/mystery-man-black.svg' by default.  See EXPERIMENTAL MACRO ICON/NAME TOGGLE below.\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!   OPTIONAL TOKEN ICON-\tOn by default. If a path to a sneak attack icon is defined, it displays like a condition on the sneaking rogue.\n//!!!\t\t\t\t\t\t\tTo use a different icon, manually change the filepath below or leave it empty ('') to disable the effect.\n//!!!\nconst sneakIconPath = 'icons/svg/mystery-man-black.svg';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tEXPERIMENTAL MACRO ICON/NAME TOGGLE\t\tIf enabled, the macro icon and name toggles based on whether the rogue is currently sneaking. \n//!!!\t\t\t\t\t\t\t\t\t\t\tCAUTIONS: \t1. \tThis feature is off by default and is intended for ADVANCED USERS ONLY. \n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t2. \tRequires configuration using \"The Furnace\" module for a player to run!\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tThe GM needs to grant The Furnace's \"Run as GM\" permission for this macro.\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t3. \tWorks best with only one rogue using this feature at a time.\n\n\t\t\t\t//To auto-toggle the macro's icon/name, override toggleMacro to true below.\n\t\t\t\tconst toggleMacro = false;\n\n\t\t\t\t//To use a different icon, manually change the filepath here\n\t\t\t\tconst stopSneakIconPath = 'icons/svg/cowled.svg';\n\n\t\t\t\t//You must update the following constant to this macro's exact name for the macro icon toggling to work.\n\t\t\t\tconst sneakMacroName = 'Sneak Attack';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nlet toggleResult = false;\nlet enabled = false;\nlet errorReason = '';\nlet sneakAttack = {};\nlet rogue = {};\nlet rogueLvls = 0;\nlet sneakDice = 0;\nlet chatMsg = '';\nlet oldMDmg = '';\nlet oldRDmg = '';\n\nlet macroActor = actor;\nlet macroToken = token;\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tBASIC LOCALIZATION SUPPORT\t\t\t\tSets names of D&D5E features as constants instead of hardcoding to allow easier translation.\n//!!!\t\t\t\t\t\t\t\t\t\t\tSets error messages as constants also for easier translation.\n\n\t\t\t\tconst rogueClassName = 'Rogue';\n\t\t\t\tconst sneakAttackFeatureName = 'Sneak Attack';\n\n\t\t\t\tconst errorSelectRogue = 'Please select a single rogue token.';\n\t\t\t\tconst warnMacroNotFound = ' is not a valid macro name, please fix. Sneak attack toggle successful but unable to alter macro.';\n\t\t\t\tconst errorSelectToken = 'Please select a token.';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n//check to ensure token is selected and attempt to define the sneak attack feature\nif (macroActor !== null && macroActor !== undefined) {\n\tsneakAttack = macroActor.items.find(i => i.name == `${sneakAttackFeatureName}`);\n} else {\nerrorReason = `${errorSelectToken}`;\n}\n\n//check to ensure token is a rogue\nif (errorReason == '' && macroActor.items.find(i => i.name == `${rogueClassName}`) !== undefined) {\n\trogue = macroActor.items.find(i => i.name == `${rogueClassName}`);\n} else {\n\terrorReason = `${errorSelectRogue}`;\n}\n\nconsole.log(`Error reason is: ${errorReason}`);\n//main execution now that errors are caught\n\nif (errorReason == '') {\n\t\n\tchatMsg = '';\n\tlet enabled = false;\n\t// store the state of the sneak attack toggle in flags\n\tif (macroActor.data.flags.sneakMacro !== null && macroActor.data.flags.sneakMacro !== undefined) {\n\t\tenabled = true;\n\t}\n\t\n\t// if sneak attack is active, disable it\n\tif (enabled) {\n\t\tchatMsg = `${macroActor.name} is no longer sneak attacking.`;\n\t\t// ranged and melee weapon attack bonus\n\t\tlet obj = {};\n\t\tobj['flags.sneakMacro'] = null;\t\t\n\t\tobj['data.bonuses.mwak.damage'] = macroActor.data.flags.sneakMacro.oldMDmg;\t\t\t\n\t\tobj['data.bonuses.rwak.damage'] = macroActor.data.flags.sneakMacro.oldRDmg;\t\n\t\tmacroActor.update(obj);\n\t\t\n\t// if sneak attack is disabled, enable it\n\t} else {\t\t\n\t\tchatMsg = `${macroActor.name} starts sneak attacking!`;\n\t\t\n\t\tlet obj = {};\n\t\tobj['flags.sneakMacro.enabled'] = true;\n\n\t\t// Preserve old mwak damage bonus if there was one\n\t\tlet oldMDmg = macroActor.data.data.bonuses.mwak.damage;\n\t\tif (oldMDmg==null || oldMDmg == undefined || oldMDmg == '') oldMDmg = 0;\n\t\tobj['flags.sneakMacro.oldMDmg'] = JSON.parse(JSON.stringify(oldMDmg));\n\n\t\t// Preserve old rwak damage bonus if there was one\n\t\tlet oldRDmg = macroActor.data.data.bonuses.rwak.damage;\n\t\tif (oldRDmg==null || oldRDmg == undefined || oldRDmg == '') oldRDmg = 0;\n\t\tobj['flags.sneakMacro.oldRDmg'] = JSON.parse(JSON.stringify(oldRDmg));\n\n\t\t\n\t\t// Determining the rogue level\n\t\trogueLvls = rogue.data.data.levels;\n\n\t\t// Formula to determine the sneak attack damage depending on rogue level\t\n\t\tsneakDice = Math.ceil(rogueLvls/2);\n\t\n\t\t//actually add the bonus sneak attack damage to the previous bonus damage\n\t\t//respect roll formulas if present.\n\t\tif (oldMDmg==null || oldMDmg == undefined || oldMDmg == '' || oldMDmg == 0) {\n\t\t\tobj['data.bonuses.mwak.damage'] = `${sneakDice}d6`;\n\t\t} else {\n\t\t\tobj['data.bonuses.mwak.damage'] = `${oldMDmg} + ${sneakDice}d6`;\n\t\t}\n\n\t\tif (oldRDmg==null || oldRDmg == undefined || oldRDmg == '' || oldRDmg == 0) {\n\t\t\tobj['data.bonuses.rwak.damage'] = `${sneakDice}d6`;\n\t\t} else {\n\t\t\tobj['data.bonuses.rwak.damage'] = `${oldRDmg} + ${sneakDice}d6`;\n\t\t}\t\n\n\t\tmacroActor.update(obj);\n\n\t}\t\n\t\n\t//mark or unmark character's token with Sneaky effect icon, if sneakIconPath is defined\n\t(async () => { \n\t\ttoggleResult = await macroToken.toggleEffect(sneakIconPath);\n\t\tif (toggleResult == enabled) macroToken.toggleEffect(sneakIconPath);  \n\t})();\n\n\t//toggle macro icon and name, if enabled\n\tif (toggleMacro) {\n//\t\tNorc's preferred icons, not sure if publicly available\n//\t\tsneakyMacroImgPath = 'systems/dnd5e/icons/skills/shadow_17.jpg';\n//\t\tstopSneakIconPath = 'systems/dnd5e/icons/skills/yellow_11.jpg';\n\t\tlet sneakMacro = game.macros.getName(sneakMacroName);\n\t\t\t//Also check for name of macro in its \"off\" form\n\t\t\tif (sneakMacro == null || sneakMacro == undefined) {\n\t\t\t\tsneakMacro = game.macros.getName('Stop ' + sneakMacroName);\n\t\t\t}\n\t\tlet obj = {};\n\t\tif ( (sneakMacro !== null && sneakMacro !== undefined) && \n\t\t\t\t+ (stopSneakIconPath !== null && stopSneakIconPath !== undefined && stopSneakIconPath !== '') ) {\n\t\t\tif (enabled) {\n\t\t\tobj['img'] = sneakIconPath;\n\t\t\tobj['name'] = sneakMacroName;\n\t\t\t} else {\n\t\t\tobj['img'] = stopSneakIconPath;\n\t\t\tobj['name'] = 'Stop ' + sneakMacroName;\n\t\t\t}\n\t\t\tsneakMacro.update(obj);\n\t\t} else {\n\t\tui.notifications.warn(`${sneakMacroName} ${warnMacroNotFound}`);\t\t\t\n\t\t}\n\t}\n\n} else {\nui.notifications.error(`${errorReason}`);\t\n}\nif (chatMsg !== '') {\n\tlet chatData = {\n\t\tuser: game.user._id,\n\t\tspeaker: ChatMessage.getSpeaker(),\n\t\tcontent: chatMsg\n\t};\n\tChatMessage.create(chatData, {});\n}","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"RmOT49sAPqKbbviT","name":"Claws","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":4000000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Claws\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/skills/red_31.jpg","actorIds":[]}
{"_id":"RwmiWEpvMBCOCqiB","name":"Activate Effects","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":5700000,"flags":{},"scope":"global","command":"DynamicEffects.activateItem()","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"SHJER9yW5OYZDrKE","name":"Scorching Ray (Artillerist)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":4100000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"jkDskn1sHQDVDYI6\", \"TZ4FezwyYJdkjeFR\");","author":"ZTQ5MTU5OTJhOWMx","img":"modules/plutonium/media/icon/spell/phb-scorching-ray.jpg","actorIds":[]}
{"_id":"Sb5O4ReTwmYjVigu","name":"Favored by the Gods","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":4200000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"xIySk7UUw2JJzT3S\", \"nIAeCAv70Hw0OpZl\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/mighty-force.svg","actorIds":[]}
{"_id":"THOhkCFfRHzex6sg","name":"Activate Effects","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":5800000,"flags":{},"scope":"global","command":"DynamicEffects.activateItem()","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"TNF44nwzNKenwbm7","name":"Hunters Mark - GM Conditions","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":5900000,"flags":{},"scope":"global","command":"//This macro must be called 'GMConditions' and be on the GM's\n//hot bar for the castMark.js macro to function correctly.\n//you must tick the option 'Excecute Macro As GM' to grant\n//players access to this macro.\n\n\nconst action = args[0]\nconst condition = args[1]\nconst targetId = args[2]\nconst target = canvas.tokens.get(targetId);\nif (action == \"apply\"){\n    game.cub.applyCondition(condition, target, {warn: true});\n}\nelse if (action == \"remove\"){\n    game.cub.removeCondition(condition, target, {warn: true});\n}\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"TdNUtsUphrg8T0i9","name":"Bite","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":4300000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Bite\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/sword-brandish.svg","actorIds":[]}
{"_id":"TnMEEhd3jedysryn","name":"Bless - apply","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":6000000,"flags":{"dnd5e":{"itemMacro":true},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"DynamicEffects.togglePassive(\"Cure Wounds (Spell-Storing Item)\", \"feat\")","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/spells/haste-sky-1.jpg","actorIds":[]}
{"_id":"UL50GK8wCRalBF8y","name":"Pistol (DMG) > Cure Wounds","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":6100000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"MagicItems.roll(\"Pistol (DMG)\",\"Cure Wounds\");","author":"ZTQ5MTU5OTJhOWMx","img":"systems/dnd5e/icons/spells/heal-jade-1.jpg","actorIds":[]}
{"_id":"UM9It1TvDWy6qj9j","name":"Mudar Atitude","permission":{"OWUwMjUxOTE5MjE0":3},"type":"script","sort":6200000,"flags":{},"scope":"global","command":"let applyChanges = false;\r\nnew Dialog({\r\n  title: `Token Disposition Changer`,\r\n  content: `\r\n    <form>\r\n      <div class=\"form-group\">\r\n        <label>Disposition Type:</label>\r\n        <select id=\"dispo-type\" name=\"dispo-type\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"hostile\">Hostile</option>\r\n          <option value=\"neutral\">Neutral</option>\r\n          <option value=\"friendly\">Friendly</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n    `,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Apply Changes`,\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel Changes`\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n      for ( let token of canvas.tokens.controlled ) {\r\n        let dispoType = html.find('[name=\"dispo-type\"]')[0].value || \"none\";\r\n        switch (dispoType) {\r\n          case \"hostile\":\r\n            token.update({\"disposition\": -1});\r\n            break;\r\n          case \"friendly\":\r\n            token.update({\"disposition\": 1});\r\n            break;\r\n          case \"neutral\":\r\n            token.update({\"disposition\": 0});\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n        }\r\n      }\r\n    }\r\n  }\r\n}).render(true);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"UOscRLhTuQluDyJm","name":"Exp_Loot_Combat_Macro","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":4400000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"const default_actor_ids = game.users\n  .filter(user => user.character)\n  .map(user => user.character.id);\n\nconst actors = (canvas.tokens.controlled.length !== 0) ? canvas.tokens.controlled.map(token=> token.actor) \n  : (game.user.targets.size !== 0) ? Array.from(game.user.targets).map(target=> target.actor) \n  : game.actors.filter(actor => default_actor_ids.includes(actor.id));\n\nconst defeated = canvas.tokens.placeables.filter(token=> \n  token.data.disposition === -1 && \n  token.data.overlayEffect === `icons/svg/skull.svg`\n);\n\n(async ()=>{\n  //check for # of defeated => if 0 && args[0] === `??` => dialog\n  if(!defeated || !actors ) return;\n\n  let experience_gain = defeated.reduce((acc, value) =>{ return (acc + value.actor.data.data.details.xp.value) } , 0);\n\n  let difference_experience = divideValue(experience_gain, actors.length);\n\n  for(let actor of actors)\n  {\n    await actor.update({\n      \"data.details.xp.value\" : actor.data.data.details.xp.value + difference_experience\n    });\n  }\n\n  ChatMessage.create({\n    content : `${actors.map(actor=> actor.name).join(`/`)} has gained ${difference_experience} experience.`\n  });\n\n  for(let defeat of defeated)\n  { await create_loot_actor(defeat); }\n})();\n\nfunction divideValue(Obj, Value)\n{\n  if(Value === 1) return Obj;\n\n  let Remainder = 0;\n  let Update = Obj;\n\n  Remainder = Update%Value;\n  Update = Math.floor(Update/Value);\n\n  console.log(`EXP_LOOT | There was ${Remainder} left over.`);\n\n  return Update;\n}\n\nasync function create_loot_actor(token)\n{\n  //delete items that have value of 0 or null\n  await token.actor.deleteOwnedItem(\n    token.actor.items\n      .filter(item=> !item.data.data?.price  || item.data.data.price === 0)\n      .map(item => item.id)\n  );\n  //change loot sheet\n  await token.actor.update({\n    \"flags.core.sheetClass\" : \"dnd5e.LootSheet5eNPC\",\n    /*[`permission.default`] : ENTITY_PERMISSIONS.OBSERVER*/\n  });\n  //change overlay, change permissions, change loot sheet\n  await token.update({\n    /*\"actorData.permission.default\" : 2,*/\n    overlayEffect : `icons/svg/chest.svg`\n  });\n  await token.toggleCombat();\n}","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"UpjUE2jtPDftQNEX","name":"18 - Electric","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":6300000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"electric\",\r\n    color: 0xFFFFFF,\r\n    time: 0,\r\n    blend: 1,\r\n    intensity: 5,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0020, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"VCZUb3ytmbghnwgQ","name":"Flame Tongue Greatsword","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":4500000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Flame Tongue Greatsword\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/skills/fire_13.jpg","actorIds":[]}
{"_id":"VEJgYbsAIRSjZHz1","name":"24 - T09 - Water Defense","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":6400000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    shieldType: 9,\r\n    gridPadding: 1,\r\n    color: 0x1090CC,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 1,\r\n    lightAlpha: 1,\r\n    lightSize: 0.7,\r\n    scale: 2,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"VLGxaPi8Jgnnertf","name":"06 - Bloom","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":6500000,"flags":{},"scope":"global","command":"let params = \r\n[{\r\n   filterType: \"xbloom\",\r\n   threshold: 0.35,\r\n   bloomScale: 0,\r\n   brightness: 1.2,\r\n   blur: 0.1,\r\n   padding: 10,\r\n   quality: 15,\r\n   blendMode: 0,\r\n   animated:\r\n   {\r\n       bloomScale: \r\n       { \r\n          active: true, \r\n          loopDuration: 2000, \r\n          animType: \"syncCosOscillation\", \r\n          val1: 0, \r\n          val2: 2\r\n       },\r\n       threshold:  \r\n       { \r\n          active: false, \r\n          loopDuration: 2000, \r\n          animType: \"syncCosOscillation\", \r\n          val1: 0.05, \r\n          val2: 1.9\r\n       }\r\n   }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);\r\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"VNSRrJRyJsWm80C5","name":"11 - Blur","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":6600000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"blur\",\r\n    padding: 10,\r\n    quality: 4.0,\r\n    blur: 0,\r\n    blurX: 0,\r\n    blurY: 0,\r\n    animated:\r\n    {\r\n        blurX: \r\n        { \r\n           active: true, \r\n           animType: \"syncCosOscillation\", \r\n           loopDuration: 500, \r\n           val1: 0, \r\n           val2: 6\r\n        },\r\n        blurY: \r\n        { \r\n           active: true, \r\n           animType: \"syncCosOscillation\", \r\n           loopDuration: 750, \r\n           val1: 0, \r\n           val2: 6}\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"VWUleMezrA5zGM57","name":"Smite Naegoth","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"/*\n * The Smite macro emulates the Divine Smite feature of Paladins in DnD 5e. A spell slot level to use\n * can be selected, which increases the number of damage dice, and smiting a fiend or undead\n * will also increase the number of damage dice.\n *\n * First, select a token to perform the smite, then target an enemy to be smitten. Make your regular\n * attack and then if you choose to use Divine Smite, run this macro.\n */\n\n//Configurable variables\nlet maxSpellSlot = 5; //Highest spell-slot level that may be used.\nlet affectedCreatureTypes = [\"fiend\", \"undead\"]; //Creature types that take extra damage.\nlet allowConsumeSpellSlotChoice = false; //Can the user choose whether to consume the spell slot?\nlet consumeSpellSlot = true; //Does the macro consume a spell slot?\nlet allowCriticalHit = true; //Can the user choose whether the dice should be doubled as a critical hit?\nlet allowConsumepactSlot = true; //Can the user choose to use pact Magic slots, if present?\nlet macroFlavor = `Macro Divine Smite - Damage Roll (Necrotic)`; //Flavor to show in the chat roll.\n\nlet dieSize = `d8`; //Die size to use for the SMITE.\n//\nif (allowCriticalHit) {\n  macroFlavor += ` - Critical Hit!`;\n}\nlet optionsText = `<p>Spell Slot level to use Divine Smite with.</p><form>\n <div class=\"form-group\"><label>Spell Slot Level:</label><select id=\"slot-level\" name=\"slot-level\">`;\n\nlet s_actor = game.user.character || canvas.tokens.controlled[0]?.actor;\n\nif (s_actor?.data.items.find((i) => i.name === \"Divine Smite\") === undefined) {\n  return ui.notifications.error(\n    `No valid actor selected that can use this macro.`\n  );\n}\n\n//#region Functions\nlet confirmed = false;\nlet criticalhit = false;\nif (getAvailableSlots(s_actor) || !consumeSpellSlot) {\n  for (let i = 1; i < maxSpellSlot; i++) {\n    let chosenSpellSlots = getSpellSlots(s_actor, i);\n    if (chosenSpellSlots.value > 0 && consumeSpellSlot) {\n      optionsText += `<option type=\"spell\" value=\"${i}\">${i} - ${chosenSpellSlots.value} slots available</option>`;\n    } else if (!consumeSpellSlot) {\n      optionsText += `<option type=\"spell\" value=\"${i}\">${i}</option>`;\n    }\n  }\n  if (getSpellSlots(s_actor, \"pact\")) {\n    optionsText += `<option type=\"pact\" value=\"pact\">Pact Magic level ${actor.data.data.spells.pact.level} - ${actor.data.data.spells.pact.value} slots available</option>`;\n  }\n  optionsText += `</select></div>`;\n  if (allowCriticalHit) {\n    optionsText += `<div class=\"form-group\"><label>Critical Hit:</label>\n       <input type=\"checkbox\" name=\"criticalCheckbox\" /></div>`;\n  }\n  if (allowConsumeSpellSlotChoice) {\n    optionsText += `<div class=\"form-group\"><label>Consume Spell Slot:</label>\n        <input type=\"checkbox\" name=\"consumeSpellSlot\" checked=\"${consumeSpellSlot}\" /></div>`;\n  }\n  optionsText += `</div></form>`;\n  // Create a dialogue box to select spell slot level to use when smiting.\n  new Dialog({\n    title: \"Divine Smite Damage\",\n    content: optionsText,\n    buttons: {\n      one: {\n        icon: '<i class=\"fas fa-check\"></i>',\n        label: \"SMITE!\",\n        callback: () => (confirmed = true),\n      },\n      two: {\n        icon: '<i class=\"fas fa-times\"></i>',\n        label: \"Cancel\",\n        callback: () => (confirmed = false),\n      },\n    },\n    default: \"Cancel\",\n    close: (html) => {\n      if (confirmed) {\n        let slotLevel = html.find(\"[name=slot-level]\")[0].value;\n        let userConsumeSpellSlot = html.find(\"[name=consumeSpellSlot]\")[0]\n          ?.checked;\n        let criticalHit = html.find(\"[name=criticalCheckbox]\")[0].checked;\n        smite(\n          s_actor,\n          slotLevel,\n          criticalHit,\n          consumeSpellSlot || userConsumeSpellSlot\n        );\n      }\n    },\n  }).render(true);\n} else {\n  return ui.notifications.error(\n    `No spell slots available to use this feature.`\n  );\n}\n/**\n * Gives the spell slot information for a particular actor and spell slot level.\n * @param {Actor5e} actor - the actor to get slot information from.\n * @param {string} level - the spell slot level to get information about. Can use pact to call Warlock levels.\n * @returns {object} contains value (number of slots remaining), max, and override.\n */\nfunction getSpellSlots(actor, level) {\n    if (level == \"pact\"){\n        return actor.data.data.spells.pact.value;\n    }\n  return actor.data.data.spells[`spell${level}`];\n}\n\n/**\n * Gives the spell slots available for\n * @param {Actor5e} actor - the actor to get slot information from.\n * @returns {boolean} True if any spell slots of any spell level are available to be used.\n */\nfunction getAvailableSlots(actor) {\n  for (let slot in actor.data.data.spells) {\n    if (actor.data.data.spells[slot].value > 0) {\n      return true;\n    }\n  }\n  if (allowConsumepactSlot) {\n    if (actor.data.data.spells.pact.value > 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Use the controlled token to smite the targeted token.\n * @param {Actor5e} actor - the actor that is performing the action.\n * @param {string} slotLevel - the spell slot level to use when smiting.\n * @param {boolean} criticalHit - whether the hit is a critical hit.\n * @param {boolean} consumeSpellSlot - whether to consume the selected spell slot.\n * @param {boolean} bonusDieCreatureType - whether to add an additional die due to creature type.\n */\nfunction smite(actor, slotLevel, criticalHit, consumeSpellSlot,bonusDieCreatureType) {\n  let chosenSpellSlots = getSpellSlots(actor, slotLevel);\n  let updateValue = `data.spells.spell${slotLevel}.value`;\n  if (slotLevel == \"pact\"){\n      slotLevel = actor.data.data.spells.pact.level;\n    updateValue = `data.spells.pact.value`;\n  }\n  let numDice = slotLevel + 1;\n    if (criticalHit) numDice *= 2;\n    if (bonusDieCreatureType) numDice += 1;\n    new Roll(`${numDice}${dieSize}`).roll().toMessage({\n      flavor: macroFlavor,\n      speaker,\n    });\n  if (consumeSpellSlot) {\n    let objUpdate = new Object();\n    objUpdate[updateValue] = chosenSpellSlots - 1;\n    actor.update(objUpdate);\n  }\n}\n//#endregion","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/skills/affliction_18.jpg","actorIds":[]}
{"_id":"Ve3f2d3Xnj2Ev6iU","name":"Critico 19","permission":{"default":0,"OWUwMjUxOTE5MjE0":3,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":4600000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"actor.setFlag('dnd5e', 'weaponCriticalThreshold', 19)\nactor.setFlag('dnd5e', 'spellCriticalThreshold', 19)\nlet msgContent = \"Crítico 19 Ativado\";\nlet chatData = {\n  user:  game.user.id,\n  speaker: game.user,\n  content:  msgContent,\n  whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\n};\nChatMessage.create(chatData,{});","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/skills/violet_04.jpg","actorIds":[]}
{"_id":"VkDdgQPY3tqkTQWR","name":"Delete filters on Selected","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":6700000,"flags":{},"scope":"global","command":"// Delete all filters on the selected tokens/tiles\r\nTokenMagic.deleteFiltersOnSelected();","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"VuOlsj3DATwUXt9Y","name":"Greatsword of Life Stealing","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":6800000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"MTIzMWFmZDU3ZDVl\", \"MTU2NDU5MThiYzJm\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/skills/violet_24.jpg","actorIds":[]}
{"_id":"WLCqEHEKGlSCyXVw","name":"27 - T04 - Pure Fire (xglow+fire)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":4700000,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"fire\",\r\n    filterId: \"myPureFire\",\r\n    intensity: 1,\r\n    color: 0xFFFFFF,\r\n    amplitude: 1,\r\n    time: 0,\r\n    blend: 2,\r\n    fireBlend : 1,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: -0.0024, \r\n        animType: \"move\" \r\n      },\r\n      intensity:\r\n      {\r\n        active:true,\r\n        loopDuration: 15000,\r\n        val1: 0.8,\r\n        val2: 2,\r\n        animType: \"syncCosOscillation\"\r\n      },\r\n      amplitude:\r\n      {\r\n        active:true,\r\n        loopDuration: 4400,\r\n        val1: 1,\r\n        val2: 1.4,\r\n        animType: \"syncCosOscillation\"\r\n      }\r\n      \r\n    }\r\n},\r\n{\r\n    filterType: \"zapshadow\",\r\n    filterId: \"myPureFireShadow\",\r\n    alphaTolerance: 0.50\r\n},\r\n{\r\n    filterType: \"xglow\",\r\n    filterId: \"myPureFireAura\",\r\n    auraType: 2,\r\n    color: 0x903010,\r\n    thickness: 9.8,\r\n    scale: 4.,\r\n    time: 0,\r\n    auraIntensity: 2,\r\n    subAuraIntensity: 1.5,\r\n    threshold: 0.40,\r\n    discard: true,\r\n    animated:\r\n    {\r\n        time : \r\n        {  \r\n           active: true,\r\n           speed: 0.0027, \r\n           animType: \"move\" \r\n        },\r\n        thickness:\r\n        {\r\n           active: true,\r\n           loopDuration: 3000, \r\n           animType: \"cosOscillation\", \r\n           val1:2, \r\n           val2:5\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"WLzDdL4hjq1zOgOd","name":"31 - T02 - Fairy Outline (globes+glow)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":4800000,"flags":{},"scope":"global","command":"// works better with non-round forms\r\nlet params = \r\n[{\r\n    filterType: \"globes\",\r\n    filterId: \"glowingGlobes\",\r\n    time: 0,\r\n    color: 0x3080EE,\r\n    distortion: 0.9,\r\n    scale: 320,\r\n    alphaDiscard: true,\r\n    zOrder: 1,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n},\r\n{\r\n    filterType: \"glow\",\r\n    filterId: \"superSpookyGlow\",\r\n    outerStrength: 4,\r\n    innerStrength: 0,\r\n    color: 0xFF3000,\r\n    quality: 0.5,\r\n    padding: 10,\r\n    animated:\r\n    {\r\n        color: \r\n        {\r\n           active: true, \r\n           loopDuration: 3000, \r\n           animType: \"colorOscillation\", \r\n           val1:0xFF3000, \r\n           val2:0x30FF00\r\n        }\r\n    }\r\n}]\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"WlGAxPLPy2WT91PI","name":"A - Multi-Filters Example","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":6900000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"fog\",\r\n    color: 0x00FF50,\r\n    density: 0.20,\r\n    time: 0,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 1.2, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n},\r\n{\r\n    filterType: \"ray\",\r\n    time: 0,\r\n    color: 0x00DE50,\r\n    alpha: 0.25,\r\n    divisor: 32,\r\n    anchorY: 0,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.0005, \r\n          animType: \"move\" \r\n       }\r\n    }\r\n},\r\n{\r\n    filterType: \"glow\",\r\n    distance: 10,\r\n    outerStrength: 8,\r\n    innerStrength: 0,\r\n    color: 0x003000,\r\n    quality: 0.5,\r\n    padding: 10,\r\n    animated:\r\n    {\r\n        color: \r\n        {\r\n           active: true, \r\n           loopDuration: 3000, \r\n           animType: \"colorOscillation\", \r\n           val1:0x003000, \r\n           val2:0x00EF00\r\n        }\r\n    }\r\n}\r\n];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"WuCZ8hAKCCth2KJq","name":"35 - T07 - SuperFrost (xfire)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":4900000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"xfire\",\r\n    filterId: \"mySuperFrost\",\r\n    color: 0xACC5C5,\r\n    time: 0,\r\n    blend: 5,\r\n    amplitude: 1,\r\n    dispersion: 0,\r\n    chromatic: false,\r\n    scaleX: 1,\r\n    scaleY: 1,\r\n    inlay: true,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: -0.0020, \r\n        animType: \"move\" \r\n      }  \r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"Y8nGsdasXmg9oVin","name":"30 - T01 - Simple Web (web)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":7000000,"flags":{},"scope":"global","command":"let params = \r\n[{\r\n    filterType: \"web\",\r\n    filterId: \"simpleweb\",\r\n    time: 100,\r\n    div1: 20,\r\n    div2: 10,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0005, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}]\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"YUbbZJy4OQtrxCAT","name":"Shield","permission":{"default":0,"OWUwMjUxOTE5MjE0":3,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":5000000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let dae_effect = async function() {\nconst effect_name = \"Shield\";\nconst effect = token.actor.effects.entries;\nfor (let i = 0; i < effect.length; i++){\nlet condition = effect[i].data.label;\nlet status = effect[i].data.disabled;\nlet effect_id = effect[i].data._id;\nif ((condition === effect_name) && (status === false)) {\nawait token.actor.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": effect_id,  \"disabled\" : true});\n}\nif ((condition === effect_name) && (status === true)){\n await token.actor.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": effect_id,  \"disabled\" : false});\n}\n}\n}\ndae_effect();","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/spells/protect-acid-1.jpg","actorIds":[]}
{"_id":"YncRXlVhIEHnVwz6","name":"20 - Waves","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":7100000,"flags":{},"scope":"global","command":"// Below, you can turn on the anchor animation.\r\nlet params =\r\n[{\r\n    filterType: \"wave\",\r\n    time: 0,\r\n    anchorX: 0.5,\r\n    anchorY: 0.5,\r\n    strength: 0.015,\r\n    frequency: 60,\r\n    color: 0xFFFFFF,\r\n    maxIntensity: 3.0,\r\n    minIntensity: 0.8,\r\n    padding:10,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0085, \r\n        animType: \"move\" \r\n      },\r\n      anchorX :\r\n      {\r\n        active: false,\r\n        val1: 0.15,\r\n        val2: 0.85,\r\n        animType: \"syncCosOscillation\",\r\n        loopDuration: 20000\r\n      },\r\n      anchorY :\r\n      {\r\n        active: false,\r\n        val1: 0.15,\r\n        val2: 0.85,\r\n        animType: \"syncSinOscillation\",\r\n        loopDuration: 20000\r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Wand (Scorching Ray - Spell Stored)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":100001,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Wand (Scorching Ray - Spell Stored)\");","author":"ZTQ5MTU5OTJhOWMx","img":"systems/dnd5e/icons/items/weapons/staff-green.jpg","actorIds":[],"_id":"YoOCZVIwjRbc778K"}
{"_id":"YoiikQJs3sJLOn33","name":"24 - T05 - Mega Earth Shell (on top)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":7200000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    shieldType: 5,\r\n    gridPadding: 3,\r\n    color: 0x905555,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 1.2,\r\n    lightAlpha: 1,\r\n    lightSize: 0.7,\r\n    scale: 1,\r\n    radius: 1,\r\n    zIndex: 5,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"Z3oBW7Mje8EFBxjU","name":"Great Weapon Master","permission":{"default":0,"OWUwMjUxOTE5MjE0":3,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":5100000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/*\nCreated Monkan#8752 with guidance from the Rage macro in the FVTT Community Macros\n\nTips to make it work\n 1 -    Have a feature called 'Great Weapon Master' for your character.\n 2 -    Make sure you have your weapons with Heavy property filled out. \n 3 -    if you make any changes to your damage or attack calculations, make sure you toggle it off.\n        As it stores the old values to replace once you disable the feat.  It could undo your changes.\n*/\n\nlet gwm='';\nlet chatMsg='';\n\n\nif (actor !== undefined && actor !== null) {\n    // find the feat Great Weapon Master\n    gwm = actor.items.find(i => i.name === 'Great Weapon Master');\n    if (gwm == undefined) { \n        ui.notifications.warn(\"Please select a single token with the Great Weapon Master feat.\");        \n    }\n\n    if (gwm !== undefined && gwm !== null) {\n\t\tchatMsg = '';\n\t\tlet enabled = false;\n\t\t// store the state of the GWM toggle in flags\n\t\tif (actor.data.flags.gwmMacro !== null && actor.data.flags.gwmMacro !== undefined) {\n\t\t\tenabled = true;\n\t\t}\n\t\t// if GWM is active, disable it\n\t\tif (enabled) {\n            chatMsg = `${actor.name} is swinging Normally now.`;\n            \n            let obj = {};\n\t\t\tobj['flags.gwmMacro'] = null;\t\t\t\n\t\t\tactor.update(obj);\n\n\t\t\t// reset items\n\t\t\tfor (let item of actor.items) {\n\t\t\t\tif (item.data.flags.gwmMacro !== null && item.data.flags.gwmMacro !== undefined) {\n\t\t\t\t\t// restoring the old value from flags\n                    let oldDmg = item.data.flags.gwmMacro.oldDmg;\n                    let oldAtk = item.data.flags.gwmMacro.oldAtk;\n\t\t\t\t\tlet obj = {};\n                    obj['data.damage.parts'] = oldDmg;\n                    obj['data.attackBonus'] = oldAtk;\n\t\t\t\t\tobj['flags.gwmMacro'] = null;\n\t\t\t\t\titem.update(obj);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t// if GWM is disabled, enable it\n\t\t} else {\n            chatMsg = `${actor.name} is swinging Harder!`;\n            \n            let obj = {};\n\t\t\tobj['flags.gwmMacro.enabled'] = true;\n\t\t\tactor.update(obj);\n\n            // update items\n            let gwmAtk = -5;\n\t\t\tlet gwmDmg = 10;\n\t\t\tfor (let item of actor.items) {\n                let isMelee = getProperty(item, 'data.data.actionType') === 'mwak';\n                let isHeavy = getProperty(item, 'data.data.properties.hvy')\n\t\t\t\tif (isMelee && isHeavy && item.data.data.damage.parts.length > 0) {\n\t\t\t\t\tconsole.log('updating ' + item);\n                    let obj = {};\n                    let atk = item.data.data.attackBonus;\n                    let dmg = item.data.data.damage.parts;\n                    // Save old attack and damage values\n                    obj['flags.gwmMacro.oldDmg'] = JSON.parse(JSON.stringify(dmg));\n                    obj['flags.gwmMacro.oldAtk'] = JSON.parse(JSON.stringify(atk));\n                    // Set the new attack and damage values\n                    if (atk !== null) {\n                        atk += '' + gwmAtk;\n                    } else {\n                        atk = gwmAtk;\n                    }\n\t\t\t\t\tdmg[0][0] = `${dmg[0][0]} + ${gwmDmg}`;\n                    obj['data.damage.parts'] = dmg;\n                    obj['data.attackBonus'] = atk;\n\t\t\t\t\titem.update(obj);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n    }\n\n} else ui.notifications.warn(\"Please select a token.\");\n\n// write to chat if needed:\nif (chatMsg !== '') {\n\tlet chatData = {\n\t\tuser: game.user._id,\n\t\tspeaker: ChatMessage.getSpeaker(),\n\t\tcontent: chatMsg\n    };\n\tChatMessage.create(chatData, {});\n}","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/skills/red_16.jpg","actorIds":[]}
{"_id":"ZgLLVRXHbaEqClo9","name":"Resolve Surprise","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":7300000,"flags":{},"scope":"global","command":"// Resolve who is surprised between groups of players and enemies or individual players and enemies\n// This macro requires The Furnance module with \"Advanced Macros\" turned on.\n// ReadMe: https://gitlab.com/x.technocat/foundry-macros/-/blob/e67f9441b2d6d442258db1d51aa2be3ead97569d/surprise-macros/README.md\n\n// Get player character tokens\nconst playerActors = getPlayerActors();\n\n// Get hostile tokens\nconst enemyActors = getEnemyActors();\n\nlet warnMsg = \"\";\n\n// Main function\nconst isSuccessful = checkSurprise(playerActors, enemyActors);\n\nif (!isSuccessful) {\n  return ui.notifications.warn(warnMsg);\n}\n\nfunction checkSurprise(playerActors, enemyActors) {\n  if (!game.user.isGM) {\n    warnMsg = \"You do not have permission to run this macro.\";\n    return false;\n  }\n  if (!playerActors.length > 0) {\n    warnMsg =\n      \"Could not find player characters in the scene. Please add player characters to the scene.\";\n    return false;\n  }\n  if (!enemyActors.length > 0) {\n    warnMsg =\n      \"Could not find hostile tokens. You need tokens with hostile dispositions in the scene to check for Surprise!\";\n    return false;\n  }\n\n  // Displays a popup and handles the input. Thanks to PaperPunk for this.\n  let calculateSurprise = false;\n\n  new Dialog({\n    title: `What Group is Sneaking?`,\n    content: `\n    <form>\n      <div>\n        <label>Select which group is sneaking/ambushing:</label><br><br>\n        <div style=\"margin:auto; width: 50%;\">\n        <input type=\"radio\" name=\"sneaking-group\" id=\"enemies\" value=\"enemies\" checked=\"checked\">\n        <label for=\"enemies\"><b>Enemy</b> is sneaking</label><br>\n        <input type=\"radio\" name=\"sneaking-group\" id=\"party\" value=\"party\">\n        <label for=\"party\"><b>Party</b> is sneaking</label><br>\n        </div>\n        <br>\n      </div>\n    </form>\n    `,\n    buttons: {\n      yes: {\n        icon: \"<i class='fas fa-check'></i>\",\n        label: `Calculate Surprise`,\n        callback: () => (calculateSurprise = true), //if \"yes\" is selected, apply the selection.\n      },\n      no: {\n        icon: \"<i class='fas fa-times'></i>\",\n        label: `Cancel Surprise`,\n      },\n    },\n    // Defaulting to yes, so that when someone selects something and hits enter, it doesn't cancel:\n    default: \"yes\",\n\n    // Handle the input\n    close: (html) => {\n      if (calculateSurprise) {\n        // Determine which group is sneaking based on the user's selection\n        const sneakyOptions = html.find('[name=\"sneaking-group\"]'); \n        let sneakingGroup;\n        for (const option of sneakyOptions) {\n          if(option.checked) {\n            sneakingGroup = option.value;\n            break;\n          }\n        }      \n\n        let results = ``;\n        let lowestStealthCheck = 0;\n\n        switch (sneakingGroup) {\n          case \"enemies\":\n            lowestStealthCheck = rollStealth(enemyActors);\n            results = calculateSurpriseResults(\n              lowestStealthCheck,\n              playerActors\n            );\n            break;\n\n          case \"party\":\n            lowestStealthCheck = rollStealth(playerActors);\n            results = calculateSurpriseResults(\n              lowestStealthCheck, \n              enemyActors);\n            break;\n        }\n\n        handleChatMessage(results, lowestStealthCheck);\n      }\n    },\n  }).render(true); // display pop up window\n\n  return true; // no issues and we're done here!\n}\n\nfunction handleChatMessage(results, lowestStealth) {\n  let messageContent = ``;\n  messageContent += `<b>Lowest Stealth: </b> [[${lowestStealth}]] <br><br>`;\n  messageContent += results;\n\n  const surpriseRules =\n    \"<br><b>Surprise Rules</b><br>\" +\n    \"Compare the Dexterity (Stealth) checks of anyone hiding with the passive Wisdom (Perception) score of each creature on the opposing side. Any character or monster that doesn't notice <i><b>a</b></i> threat is surprised at the start of the encounter. <br><br>\" +\n    \"If you're surprised, you can't move or take an action on your first turn of the combat, and you can't take a reaction until that turn ends. A member of a group can be surprised even if the other members aren't.<br><br> <i>PHB. 189</i>\";\n\n  messageContent += surpriseRules;\n\n  let chatData = {\n    user: game.user._id,\n    speaker: game.user.name,\n    content: messageContent,\n    whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\n  };\n\n  ChatMessage.create(chatData, {});\n}\n\nfunction getPlayerActors() {\n  // Get tokens in the scene that are player characters and not NPCs. Prioritize selected tokens.\n  const controlledPlayerActors = canvas.tokens.controlled\n    .filter((pc) => pc.actor.isPC && pc.actor.data.type === \"character\")\n    .map((a) => a.actor);\n\n  if (controlledPlayerActors.length > 0) {\n    return controlledPlayerActors;\n  }\n\n  // If none are selected, use all the player characters in the scene\n  return canvas.tokens.children[0].children\n    .filter((pc) => pc.actor.isPC && pc.actor.data.type === \"character\")\n    .map((a) => a.actor);\n}\n\nfunction getEnemyActors() {\n  // Prioritize selected hostile enemies\n  const controlledEnemyActors = canvas.tokens.controlled\n    .filter((ec) => ec.actor.isPC === false && ec.data.disposition === -1)\n    .map((a) => a.actor);\n\n  if (controlledEnemyActors.length > 0) {\n    return controlledEnemyActors;\n  }\n\n  // If none are selected, use all the enemies in the scene that are hostile\n  return canvas.tokens.children[0].children\n    .filter((ec) => ec.actor.isPC === false && ec.data.disposition === -1)\n    .map((a) => a.actor);\n}\n\nfunction rollStealth(sneakyGroup) {\n  // Roll stealth for the sneaking group\n  let stealthResults = [];\n  for (let actor of sneakyGroup) {\n    let stealth =\n      new Roll(\"1d20\").roll().total + actor.data.data.skills.ste.mod;\n    stealthResults.push(stealth);\n  }\n\n  // Return the lowest stealth roll, it's all we need\n  return Math.min(...stealthResults);\n}\n\nfunction calculateSurpriseResults(lowestStealth, perceptiveGroup) {\n  let resultMsg = ``;\n\n  const surprisedTxt = `[<span style=\"color:red\">Surprised</span>]`;\n  const notSurprisedTxt = `[<span style=\"color:green\">Not Surprised</span>]`;\n  const alertTxt = `<i>Alert</i>`;\n\n  const lowestPerception = Math.min.apply(\n    Math,\n    perceptiveGroup.map(function (actor) {\n      return actor.data.data.skills.prc.passive;\n    })\n  );\n\n  if (lowestPerception >= lowestStealth) {\n    resultMsg += `<i>No one is Surprised!</i> <br>`;\n  } else {\n    for (let actor of perceptiveGroup) {\n      const name = actor.data.name;\n      const prc = actor.data.data.skills.prc.passive;\n      let msg = ``;\n\n      // If Alert feat not surprised, else if win perception not surprised, else surprised\n      const alertFeat = actor.data.items.find((p) => p.name === \"Alert\");\n      if (alertFeat) {\n        msg = `${name} (${prc}) -- ${notSurprisedTxt} ${alertTxt}`;\n      } else if (prc >= lowestStealth) {\n        msg = `${name} (${prc}) -- ${notSurprisedTxt}`;\n      } else {\n        msg = `${name} (${prc}) -- ${surprisedTxt}`;\n      }\n\n      // Append this actor's surprise result to chat message variable.\n      resultMsg += `${msg} <div style=\"border-bottom: 1px solid gray\"></div> <br>`;\n    }\n  }\n\n  return resultMsg;\n}\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"ZoKQ3ffBWC7uLLXA","name":"All Token’s Passive Perception","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":5200000,"flags":{},"scope":"global","command":"// Pull the passive perception of each token in the current scene and whisper the results to the GM.\n// Only tested with the 5e System in Foundry.\n// Author: @Drunemeton#7955. Based on the original macro by author @Erogroth#7134.\n\n// Initalize variables.\nlet pcArray = [];\nlet npcArray = [];\nlet messageContentPC = \"\";\nlet messageContentNPC = \"\";\nlet messageHeaderPC = \"<b>PC Passive Perception</b><br>\";\nlet messageHeaderNPC = \"<b>NPC Passive Perception</b><br>\";\n\n// Gather tokens in the current scene into an array.\nlet tokens = canvas.tokens.placeables.filter((token) => token.data);\n\n// From the tokens array sort into PC and NPC arrays.\nfor (let count of tokens) {\n  let tokenType = count.actor.data.type;\n  let tokenName = count.data.name;\n  let tokenPassive = count.actor.data.data.skills.prc.passive;\n  \n  if(tokenType === \"character\") {\n    pcArray.push({ name: tokenName, passive: tokenPassive });\n  } \n  if(tokenType === \"npc\") {\n    npcArray.push({ name: tokenName, passive: tokenPassive });\n  }\n}\n\n// Sort each array.\nsortArray(pcArray);\nsortArray(npcArray);\n\n// Build chat message, with PCs first, then NPCs.\nfor (let numPC of pcArray) {\n  messageContentPC += `${numPC.name}: <b>${numPC.passive}</b><br>`;\n}\nfor (let numNPC of npcArray) {\n  messageContentNPC += `${numNPC.name}: <b>${numNPC.passive}</b><br>`;\n}\n\nlet chatMessage = (messageHeaderPC + messageContentPC + `<br>` + messageHeaderNPC + messageContentNPC);\n\nlet chatData = {\n  user: game.user._id,\n  speaker: ChatMessage.getSpeaker(),\n  content: chatMessage,\n  whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\n};\n\n// Display chat message.\nChatMessage.create(chatData, {});\n\n// Sort each array by Name.\n  function sortArray(checkArray) {\n    checkArray.sort(function (a, b) {\n      var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n      var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      // names must be equal\n      return 0;\n    });\n\n    // Sort array by Passive Perception.\n    checkArray.sort(function (a, b) {\n      return b.passive - a.passive;\n    });\n  }\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"Zouei5r4ingYXoDX","name":"D - Auto-Destroy Example","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":7400000,"flags":{},"scope":"global","command":"let params = \r\n[{\r\n    filterType: \"bevel\",\r\n    autoDestroy: true,\r\n    rotation: 0,\r\n    thickness: 5,\r\n    lightColor: 0x00FF00,\r\n    lightAlpha: 0.7,\r\n    shadowColor: 0xFF0000,\r\n    shadowAlpha: 0.4,\r\n    animated :\r\n    {\r\n       rotation: \r\n       { \r\n          active: true,\r\n          clockWise: true, \r\n          loopDuration: 1000,\r\n          loops: 5,\r\n          animType: \"rotation\"\r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);\r\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"ZpnJlQgXquhWE8xo","name":"Claws","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":5300000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Claws\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/sword-brandish.svg","actorIds":[]}
{"_id":"ZqqLTjyzxMO2AVd4","name":"Dispel Magic","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":5400000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"jkDskn1sHQDVDYI6\", \"yPwsuUhNMsAd8XhL\");","author":"ZTQ5MTU5OTJhOWMx","img":"modules/plutonium/media/icon/spell/phb-dispel-magic.jpg","actorIds":[]}
{"name":"DisintegrateDarkRed","permission":{"default":0,"ccsO3NtPJs2xE1RS":3,"OWUwMjUxOTE5MjE0":3},"type":"script","folder":null,"sort":400000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.OVIfKxvNI1wrK8kb"}},"scope":"global","command":"// Requires at least 1 target\nif(game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires token to be selected\nif(canvas.tokens.controlled.length == 0) ui.notifications.error(\"Please select your token\");\n// Requires FX Master Module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\nvar myStringArray = Array.from(game.user.targets)[0];\nvar arrayLength = game.user.targets.size;\nfor (var i = 0; i < arrayLength; i++) {\n\nlet mainTarget = Array.from(game.user.targets)[i];\nlet myToken = canvas.tokens.controlled [0];\n\nlet ray = new Ray(myToken.center, mainTarget.center);\nlet anDeg = -(ray.angle * 57.3);\nlet anDist = ray.distance;\n// Animation file path\nlet file = \"modules/jb2a_patreon/Library/6th_Level/Disintegrate/\";\n// Checking for range to target to choose which file to pull\nlet anFile = `${file}Disintegrate_01_Dark_Red_15ft_1000x400.webm`;\nlet anFileSize = 600;\nlet anchorX = 0.2;\nswitch(true){\n case (anDist<=600):\n    anFileSize = 600;\n    anFile = `${file}Disintegrate_01_Dark_Red_15ft_1000x400.webm`;\n    anchorX = 0.2;\n    break;\n case (anDist>1200):\n    anFileSize = 1800;\n    anFile = `${file}Disintegrate_01_Dark_Red_45ft_2200x400.webm`;\n    anchorX = 0.091;\n    break;\n default:\n    anFileSize = 1200;\n    anFile = `${file}Disintegrate_01_Dark_Red_30ft_1600x400.webm`;\n    anchorX = 0.125;\n    break;\n}\n// Scaling the Height of the animation for consistency across ranges\nlet anScale = anDist / anFileSize;\nlet anScaleY = anDist <= 600 ? 0.6  : anScale;\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: myToken.center,\n                      anchor: {\n                       x: anchorX,\n                       y: 0.5\n                      },\n                      angle: anDeg,\n                      scale: {\n                       x: anScale,\n                       y: anScaleY\n                      }\n                    }; \n\ncanvas.fxmaster.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\n// Add some sound\n/*\nawait wait (300);\nlet soundFile = `sound path here`;\nAudioHelper.play({src: soundFile, volume: 1.0, autoplay: true, loop: false}, true);\n*/\n// Or play random sounds on each attack\n/*\nlet soundHome = \"CustomSounds/battle/\";\n\nlet m1 = `sound 01 file location here`;\nlet m2 = `sound 02 file location here`;\nfunction random_sound(sounds)\n{\nreturn sounds[Math.floor(Math.random()*sounds.length)];\n}\n\nvar sounds = [m1, m2];\n\nlet roll = new Roll('1d3').roll().total;\nlet soundFile = random_sound(sounds);\nAudioHelper.play({src: soundHome + soundFile, volume: 0.9, autoplay: true, loop: false}, true);\n*/\n\n// Delete comments to activate token Magic FX. Requires the Token Magic FX Modules to be installed\n/*\nlet params =\n[{\n    filterType: \"fire\",\n    filterId: \"myFire\",\n    intensity: 3,\n    color: 0xFFFFFF,\n    amplitude: 2,\n    time: 0,\n    blend: 10,\n    fireBlend : 1,\n    alphaDiscard: true,\n    zOrder: 50,\n    animated :\n    {\n      time : \n      { \n        active: true, \n        speed: -0.0024, \n        animType: \"move\" \n      }\n    }\n},{\n    filterType: \"glow\",\n    filterId: \"glowripples\",\n    outerStrength: 4,\n    innerStrength: 2,\n    color: 0x7A0000,\n    quality: 0.5,\n    padding: 10,\n    zOrder: 100,\n}];\nawait wait(500);\nTokenMagic.addUpdateFiltersOnTargeted(params);\nawait wait(2000);\nTokenMagic.deleteFiltersOnTargeted();\n*/\n}\n}\nCast ()","author":"OWUwMjUxOTE5MjE0","img":"modules/jb2a_patreon/Library/6th_Level/Disintegrate/Disintegrate_01_Dark_Red_Thumb.webp","actorIds":[],"_id":"ZrQtx6qLxnfKzzSD"}
{"_id":"aBh1OeJvXzdzUxin","name":"Speed Factor","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"var sizes = {\n  \"tiny\" : +5,\n  \"sm\" : +2,\n  \"med\" : +0,\n  \"lg\" : -2,\n  \"huge\" : -5,\n  \"grg\" : -8\n};\n\nvar actions = {\n\t\"Medium Action                  (+0)\" : +0,\n\t\"Melee, Heavy Weapon            (-2)\" : -2,\n\t\"Melee, Light or Finess Weapon  (+2)\" : +2,\n\t\"Melee, Two-Handed Weapon       (-2)\" : -2,\n\t\"Ranged, Loading Weapon         (-5)\" : -5,\n\t\"Spellcasting, 1st level        (-1)\" : -1,\n\t\"Spellcasting, 2nd level        (-2)\" : -2,\n\t\"Spellcasting, 3rd level        (-3)\" : -3,\n\t\"Spellcasting, 4th level        (-4)\" : -4,\n\t\"Spellcasting, 5th level        (-5)\" : -5,\n\t\"Spellcasting, 6th level        (-6)\" : -6,\n\t\"Spellcasting, 7th level        (-7)\" : -7,\n\t\"Spellcasting, 8th level        (-8)\" : -8,\n\t\"Spellcasting, 9th level        (-9)\" : -9\n//optional rules as suggested by AngryDM, comment them if you don't want them\n   ,\"Very Slow Action               (-5)\" : -5,\n\t\"Slow Action                    (-2)\" : -2,\n\t\"Fast Action                    (+2)\" : +2,\n\t\"Very Fast Action               (+5)\" : +5\n}\n\nvar disableTexts = 'disabled=\"disabled\"'\n\nvar options = new Array ()\nfor (var key in actions) {\noptions.push(key)\n}\n\nif (canvas.tokens.controlled.length >= 1) {\n\t(async ()=>{\n\t\tfor (let token of canvas.tokens.controlled) {\n\t\t\tlet combatant = game.combats.active.combatants.find(c => c.tokenId === token.id)\n\t\t\tif (combatant == null){\n\t\t\t\tconsole.log(token.name + \" is not in combat\")\n\t\t\t} else {\n\t\t\t\tlet data = [\n\t\t\t\t{type : `text`, label : `Base modifier : `, options : `${token.actor.data.data.attributes.init.total}` },\n\t\t\t\t{type : `text`, label : `Size modifier : `, options : `${sizes[token.actor.data.data.traits.size]}` },\n\t\t\t\t{type : `select`, label : `Action : `, options}\n\t\t\t];\n                let rv = await quick_dialog({data}, combatant.name);\n\t\t\t\trollInit(token, rv)\n\t\t\t}\n\t\t}\n\t})();\n} else {\n\t(async ()=>{\n\t\tif (game.user.character == null){\n\t\t\tconsole.log(\"player has no player selected in player configuration menu\")\n\t\t} else {\n\t\t\tfor (let token of game.user.character.getActiveTokens()) {\n\t\t\t\tlet combatant = game.combats.active.combatants.find(c => c.tokenId === token.id)\n\t\t\t\tif (combatant == null){\n\t\t\t\t\tconsole.log(token.name + \" is not in combat\")\n\t\t\t\t} else {\n\t\t\t\t\tlet data = [\n\t\t\t\t\t{type : `text`, label : `Base modifier : `, options : `${token.actor.data.data.attributes.init.total}` },\n\t\t\t\t\t{type : `text`, label : `Size modifier : `, options : `${sizes[token.actor.data.data.traits.size]}` },\n\t\t\t\t\t{type : `select`, label : `Action : `, options}\n\t\t\t\t\t];\n\t\t\t\t\tlet rv = await quick_dialog({data}, combatant.name);\n\t\t\t\t\trollInit(token, rv)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})();\n}\n\n\n\nasync function quick_dialog({data, title = `Select your action for `} = {}, name)\n{\n  data = data instanceof Array ? data : [data];\n\n  let value = await new Promise((resolve) => {\n    let content = `\n    <table style=\"width:100%\">\n      ${data.map(({type, label, options}, i)=> {\n        if(type.toLowerCase() === `select`)\n        {\n          return `<tr><th style=\"width:50%\"><label>${label}</label></th><td style=\"width:50%\"><select id=\"${i}qd\">${options.map((e,i)=> `<option value=\"${e}\">${e}</option>`).join(``)}</td></tr>`;\n        }else{\n          return `<tr><th style=\"width:50%\"><label>${label}</label></th><td style=\"width:50%\"><input type=\"${type}\" ${disableTexts} id=\"${i}qd\" value=\"${options instanceof Array ? options[0] : options}\"/></td></tr>`;\n        }\n      }).join(``)}\n    </table>`;\n\n    new Dialog({\n      title : title + name,\n\t  content,\n      buttons : {\n        Ok : { label : `Roll Initiative!`, callback : (html) => {\n          resolve(Array(data.length).fill().map((e,i)=>{\n            let {type} = data[i];\n            if(type.toLowerCase() === `select`)\n            {\n              return html.find(`select#${i}qd`).val();\n            }else{\n                return html.find(`input#${i}qd`)[0].value;\n            }\n          }));\n        }}\n      }\n    }).render(true);\n  });\n  return value;\n}\n\nfunction rollInit(selectedToken, initBonus){\n\tlet combatant = game.combats.active.combatants.find(c => c.tokenId === selectedToken.id)\n\tvar formula = ''\n\tif (selectedToken.actor.data.flags != null && selectedToken.actor.data.flags.dnd5e != null && selectedToken.actor.data.flags.dnd5e.initiativeAdv){\n\t\tformula = '2d20kh + @dexBonus + @sizemod + @init'\n\t} else {\n\t\tformula = '1d20 + @dexBonus + @sizemod + @init'\n\t}\n\tlet r= new Roll(formula, {dexBonus : initBonus[0], sizemod: initBonus[1], init: actions[initBonus[2]]}).roll()\n\nr.toMessage({flavor : `${combatant.name} chooses ${initBonus[2]} and rolls for Initiative!`});\ngame.combats.active.updateCombatant({_id: combatant._id, initiative: r.total})\n}","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"aIeErHn3DS8tQnVd","name":"Bless","permission":{"default":0,"NDAwODQ0YzA2ODM1":3},"type":"script","sort":7500000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"MLwpZTVAEwVSGhKu\", \"8TbhXQBN0ZaoDFRu\");","author":"NDAwODQ0YzA2ODM1","img":"systems/dnd5e/icons/spells/haste-sky-1.jpg","actorIds":[]}
{"_id":"aQwkayVLRRy8ALTF","name":"Link Actor","permission":{"OWUwMjUxOTE5MjE0":3},"type":"script","sort":7600000,"flags":{},"scope":"global","command":"// Finds unlinked actors on the current scene and updates actor based on the name.\r\n// Actor names not found in your game will be displayed in the console.\r\n\r\nlet unlinked = canvas.scene.data.tokens.filter(a => a.actorLink === false);\r\n\r\nunlinked.forEach(t => {\r\n    let tok = canvas.tokens.get(t._id);\r\n    let link = game.actors.entities.find(a => a.name === t.name);\r\n    if (link) {\r\n        tok.update({\r\n            // If you need your actors actually linked (HP updated on the sheet. Not usually needed for NPCs) uncomment the line below.\r\n            // actorLink: true, // THIS WILL LINK EVERY ACTOR ON THE SCENE AND IS NOT RECOMMENDED FOR NPCs\r\n            actorId: link._id\r\n        })\r\n    } else {\r\n        console.log('Actor not found: ' + tok.name);\r\n    }\r\n});\r\n\r\nui.notifications.info('Tokens linked to actors.');","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"ap2kYRho25WHvBmP","name":"Hunters Mark - Cast Mark","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":7700000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"//This marco is designed to be used in conjunction with MarkAttackWrapper.json\n//and GMConditions.js.\n\n//It is designed to replace the standard rollItemMacro for either the Hex\n//spell or the hunter's mark Spell on either the warlock or ranger, but\n//it will work on any class with hex or hunter's mark by changing the Localization\n//parameters. To use hex, replace warlockName variable below and if you\n//would like to use it with hunter's mark replace rangerName variable below.\n\n// CAUTION! if you change your global damage variables while this macro is\n//active the change will be erased. It should work fine with dynamic effects.\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//This macro is designed to be used with the combat utility belt module.\n//and the furnace module. Once you have it installed, you will have to enable \n//enhanced conditions, and create a condition called 'Marked' as the Localization \n//parameter below. You just need to update that parameter to match whatever condition \n//name you want if you want to use a different name in condition lab.\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//Localization\nconst rangerName = \"Ranger\";\nconst warlockName = \"Warlock\";\nconst rangerSpell = \"Hunter's Mark\";\nconst warlockSpell = \"Hunter's Mark\";\nconst condition = \"Marked\";\nconst flagScope = \"world\";\n\n//parameters\nif (!token) ui.notifications.error(\"Please select your token first.\");\nlet myToken = token;\nconst markDmg = \" + 1d6\";\nif (!game.user.targets.values().next().value) {\n  ui.notifications.error(\"Please select one target\");\n}\nconst target = game.user.targets.values().next().value;\n\nconst conditionList = target.data.effects;\nconst actorId = myToken.actor._id + \"_mark\";\nconst bonuses = myToken.actor.data.data.bonuses;\nlet className = \"\";\nlet spellName = \"\";\nlet gm_macro = null\n\n//Check to make sure that the GM has the GMConditions macro assigned.\ntry{\n    gm_macro = game.macros.entities.find(mb => mb.name === \"GMConditions\");\n}\ncatch(err)\n{\n    ui.notifications.error(\"GMConditions Macro was not found\")\n}\n\n//If Move flag and condition to a new selected target\nfunction move() {\n  let swapTarget = myToken.getFlag(flagScope, actorId);\n  const remCon = canvas.tokens.get(swapTarget.targetId);\n  gm_macro.execute(\"remove\", condition, swapTarget.targetId);\n  swapTarget.targetId = target.data._id;\n  (async () => {\n    await myToken.unsetFlag(flagScope, actorId);\n    myToken.setFlag(flagScope, actorId, swapTarget);\n  })();\n  gm_macro.execute(\"apply\", condition, target.id);\n  console.log();\n}\n\n//revert global damage to base, remove the condition and unset flag\n\nfunction remove() {\n  const flagId = myToken.getFlag(flagScope, actorId);\n\n  let obj = {\n    \"data.bonuses.mwak.damage\": flagId.meleeAtk,\n    \"data.bonuses.rwak.damage\": flagId.rangeAtk,\n    \"data.bonuses.msak.damage\": flagId.meleeSpell,\n    \"data.bonuses.rsak.damage\": flagId.rangeSpell\n  };\n\n  updateActor(myToken, obj);\n\n  const remFlag = canvas.tokens.get(flagId.targetId);\n\n  (async () => {\n    await gm_macro.execute(\"remove\", condition, flagId.targetId);\n    await myToken.unsetFlag(flagScope, actorId);\n  })();\n}\n\n// User input to move or remove flag and condition\n\nfunction alterMark() {\n  const d = new Dialog({\n    title: \"Mark Enemy\",\n    content: \"<p>Would you like to move or remove?</p>\",\n    buttons: {\n      one: {\n        icon: '<i class=\"fas fa-check\"></i>',\n        label: \"Move\",\n        callback: () => move()\n      },\n      two: {\n        icon: '<i class=\"fas fa-times\"></i>',\n        label: \"Remove\",\n        callback: () => remove()\n      }\n    },\n    default: \"two\",\n    close: () => console.log(\"Dialog closed\")\n  }).render(true);\n}\n\n// cast the spell, apply the condition, create and set flag\n\nasync function castSpell() {\n  try {\n    await game.dnd5e.rollItemMacro(spellName);\n  } catch (err) {\n    return null;\n  }\n  gm_macro.execute(\"apply\", condition, target.id);\n\n  let globalDmg = {\n    targetId: target.data._id,\n    meleeAtk: bonuses.mwak.damage,\n    rangeAtk: bonuses.rwak.damage,\n    meleeSpell: bonuses.msak.damage,\n    rangeSpell: bonuses.rsak.damage,\n    isSet: false\n  };\n  myToken.setFlag(flagScope, actorId, globalDmg);\n}\n\n//If the class is ranger and has the hunter's mark spell, set the spell name\n//or say the spell doesn't exist.\n\nfunction setRangerSpell() {\n  className = rangerName;\n  if (actor.items.find(i => i.name === `${rangerSpell}`)) {\n    spellName = rangerSpell;\n    castSpell();\n  } else {\n    ui.notifications.error(\n      \"Selected actor does not have the \" + rangerSpell + \" spell.\"\n    );\n    console.log(\"Selected actor does not have the \" + rangerSpell + \" spell.\");\n    return null;\n  }\n}\n\n//If the class is warlock and has the hex spell set the spell name\n//if say the spell doesn't exist\n\nfunction setWarlockSpell() {\n  className = warlockName;\n  if (actor.items.find(i => i.name === `${warlockSpell}`)) {\n    spellName = warlockSpell;\n    castSpell();\n  } else {\n    ui.notifications.error(\n      \"Selected actor does not have the \" + warlockSpell + \" spell.\"\n    );\n    console.log(\"Selected actor does not have the \" + warlockSpell + \" spell.\");\n    return null;\n  }\n}\n\n//check whether the token is a ranger or warlock\n\nfunction checkSpell() {\n  if (actor.items.find(i => i.name === `${rangerName}`)) {\n    setRangerSpell();\n  } else if (actor.items.find(i => i.name === `${warlockName}`)) {\n    setWarlockSpell();\n  } else {\n    ui.notifications.error(\n      \"Please select a \" + rangerName + \" or \" + warlockName + \" token.\"\n    );\n    console.log(\n      \"Please select a \" + rangerName + \" or \" + warlockName + \" token.\"\n    );\n  }\n}\n\nasync function updateActor(updateToken, obj) {\n  await updateToken.actor.update(obj);\n}\n\n//If the flag exists call functions to move or remove if it doesn't exist\n// call function to cast the spell\n\nif (myToken.getFlag(flagScope, actorId)) {\n  alterMark();\n} else {\n  checkSpell();\n}\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"applN29A4HWuoHMj","name":"Transformar Poly","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":7800000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"canvas.tokens.controlled[0].actor.transformInto(game.actors.getName('Giant Spider'));","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"axgablfZJ65LyyzP","name":"Greatsword of Life Stealing (Baleful Curse)","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":7900000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"tIjc1WtMeMkbc98k\", \"tZm8Q0Bt8bzB4zCs\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/skills/weapon_33.jpg","actorIds":[]}
{"_id":"aygtfmHwiTVVDvEs","name":"00 - A - Delete filters on Selected","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":5500000,"flags":{},"scope":"global","command":"// Delete all filters on the selected tokens/tiles\nTokenMagic.deleteFiltersOnSelected();","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"24 - T02 - Fire Shield","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"myFireField\",\r\n    shieldType: 1,\r\n    gridPadding: 2,\r\n    color: 0xE58550,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 1.2,\r\n    lightAlpha: 1,\r\n    lightSize: 0.7,\r\n    scale: 1,\r\n    radius: 1,\r\n    chromatic: false,\r\n    zOrder: 512,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"bOh3ngPp1CF0UB2G"}
{"_id":"bUIxoOidtMbVeKEx","name":"Shield (Artillerist)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":5600000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"jkDskn1sHQDVDYI6\", \"sEO5PM42H9jFU4td\");","author":"ZTQ5MTU5OTJhOWMx","img":"modules/plutonium/media/icon/spell/phb-shield.jpg","actorIds":[]}
{"_id":"bYAKBeNKDbmIsQwn","name":"Tool Proficiency","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":8000000,"flags":{},"scope":"global","command":"/**\n * Grab a list of tools in the selected player's inventory, then all the user to make a roll on the tool.\n * Will take into consideration if the player is proficient in using the tool.\n */\n\n// get the first entry from the array of currently selected tokens. Works best/exclusively with one selected token\nconst target = canvas.tokens.controlled[0].actor;\n// get the abilities of the selected token for ease of access later\nconst { abilities } = target.data.data;\n// Only items set as \"tools\" will be included!\n// get all held and equipped Tools/Kits/Supplies. Might want to replace with /[tT]ools|[kK]it|[sS]upplies|[sS]et$/ if gaming sets should be included\nconst toolsInInventory = target.items.filter( item => item.name.match(/[tT]ools|[kK]it|[sS]upplies$/) && item.data.data.hasOwnProperty(\"proficient\"));\n// const toolProficiencies = target.data.data.traits.toolProf; // Tools have proficiency mod in the object under <item>.data.data.proficient. \nlet tool = undefined;\n\n// Choose ability mod dialog\nconst abilityDialog = (async () => {\n    let template = `\n    <div>\n        <div class=\"form-group\">\n            <label>Choose ability</label>\n            <select id=\"selectedAbility\">`\n    for (let ability in abilities) {\n        switch (ability) {\n            case \"str\":\n                abilities[ability].name = \"Strength\"\n                break;\n            case \"dex\":\n                abilities[ability].name = \"Dexterity\"\n                break;\n            case \"con\":\n                abilities[ability].name = \"Constitution\"\n                break;\n            case \"int\":\n                abilities[ability].name = \"Intelligence\"\n                break;\n            case \"wis\":\n                abilities[ability].name = \"Wisdom\"\n                break;\n            case \"cha\":\n                abilities[ability].name = \"Charisma\"\n                break;\n            default:\n                console.log(\"something went wrong\");\n        }\n        template += `<option value=\"${ability}\">${abilities[ability].name} (${abilities[ability].value})</option>`;\n    }\n    template += `</select>\n        </div>\n    </div>`\n\n\n    new Dialog({\n        title: tool.name,\n        content: template,\n        buttons: {\n            ok: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: \"OK\",\n                callback: async (html) => {\n                    const selection = html.find(\"#selectedAbility\")[0].value;\n                    console.log(tool, target);\n                    let prof = tool.data.data.proficient * target.data.data.attributes.prof; // target might be half or doubly proficient. This will make sure it is accounted for\n\n                    let messageContent = `${target.name} rolled a <b>[[1d20+${abilities[selection].mod}(${abilities[selection].name})+${prof}(Proficiency)]]</b> for the ${tool.name} check.<br>`;\n                    let chatData = {\n                        user: game.user.id,\n                        speaker: ChatMessage.getSpeaker(),\n                        content: messageContent,\n                        // uncomment the line below to always whisper the roll to the GM\n                        // whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\n                    };\n                    ChatMessage.create(chatData, {});\n               }\n            },\n            cancel: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: 'Cancel'\n            }\n        },\n        default: \"cancel\"\n    }).render(true);\n})\n\n// Choose tool dialog\nif (toolsInInventory.length) {\n    (async () => {\n        let template = `\n        <div>\n            <div class=\"form-group\">\n                <label>Choose a tool</label>\n                <select id=\"selectedTool\">`\n        toolsInInventory.forEach( tempTool => {    \n            template += `<option value=\"${tempTool.name}\">${tempTool.name}</option>`;\n        });\n        template += `</select>\n            </div>\n        </div>`;\n\n        new Dialog({\n            title: 'Which tool?',\n            content: template,\n            buttons: {\n                ok: {\n                    icon: '<i class=\"fas fa-check\"></i>',\n                    label: \"OK\",\n                    callback: async (html) => {\n                        let selection = html.find(\"#selectedTool\")[0].value;\n                        tool = toolsInInventory.find( item => item.name === selection )\n                        abilityDialog();\n                   }\n                },\n                cancel: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: 'Cancel'\n                }\n            },\n            default: \"cancel\"\n        }).render(true);\n    })()    \n}\n\nelse {\n    new Dialog({\n        title: 'No Tools!',\n        content: '<p>You don\\'t seem to have any tool with you.</p>',\n        buttons: {\n            ok: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: \"OK\"\n            }\n        },\n        default: \"ok\"\n    }).render(true);\n}\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"c0Wr69NnMMovMi6h","name":"Display Attribute Lists for Selected Actor","permission":{"default":0,"OWUwMjUxOTE5MjE0":3,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":5700000,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"ShowActorAttributeData(actor);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/book.svg","actorIds":[]}
{"_id":"c17Xk3mq6hWlfHuO","name":"HP Temp","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":8100000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"game.user.character.update({'data.attributes.hp.temp': 6}}","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"cMbneukCUujSuMc2","name":"TokenUpdate","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"// args[0] === token\n// args[1] === updates\n// animate false turns off sliding\n(async()=>{\nlet animateOn = args[2] != \"off\" ? true : false;\nawait canvas.tokens.get(args[0].id).update(args[1], {animate : animateOn});\n})();","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"cWmOh52qZJ060GjI","name":"08 - Old film","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":5800000,"flags":{},"scope":"global","command":"// special : the OldFilm filter need an Outline filter to be contained (or else, it will affect all the container)\r\nlet params =\r\n[{\r\n    filterType: \"oldfilm\",\r\n    filterId: \"myOldfilm\",\r\n    sepia: 0.6,\r\n    noise: 0.2,\r\n    noiseSize: 1.0,\r\n    scratch: 0.8,\r\n    scratchDensity: 0.5,\r\n    scratchWidth: 1.2,\r\n    vignetting: 0.9,\r\n    vignettingAlpha: 0.6,\r\n    vignettingBlur: 0.2,\r\n    animated:\r\n    {\r\n        seed:        \r\n        { \r\n           active: true, \r\n           animType: \"randomNumber\", \r\n           val1: 0, \r\n           val2: 1 \r\n        },\r\n        vignetting:  \r\n        { \r\n           active: true, \r\n           animType: \"syncCosOscillation\" , \r\n           loopDuration: 2000, \r\n           val1: 0.2, \r\n           val2: 0.4 }\r\n    }\r\n},\r\n{\r\n    filterType: \"outline\",\r\n    filterId: \"oldfilmOutline\",\r\n    color: 0x000000,\r\n    thickness: 0,\r\n    zOrder: 61\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"cZ3PUeu5WJRy8blJ","name":"Eldritch Blast (PHB)","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":8200000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"tIjc1WtMeMkbc98k\", \"Fc1SbhtS3c7qo06B\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/spell/phb-eldritch-blast.jpg","actorIds":[]}
{"_id":"ct8BEzYQKU2XLPgF","name":"Cub_Condition","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"// Add this Callback macro to your GM's hotbar and use Furnace mod to check \"Execute as GM\".\n// You should only pass the target id to this macro\n(async ()=>{\nlet target = canvas.tokens.get(args[0]);\nlet condition = args[1];\nlet state = args[2];\nif (state === \"remove\"){game.cub.removeCondition(condition, target, {warn: false});}\nelse if (state === \"add\"){game.cub.addCondition(condition, target, {warn: false});}\n})();\n\n//### How to Execute the above, do not include this in the pasting into Foundry..####\n//include this line in the headever of whichever macro.\n// => let Cub_Condition = game.macros.getName(\"Cub_Condition\");\n// then use this line to execute it deep in your macro.\n// => Cub_Condition.execute(target, \"Condition\", \"add|remove\");\n// If bulk adding or removal is needed use the following example\n// => let element = [\"condition 1\",\"condition 2\",\"condition 3\"];\n// => Cub_Condition.execute(target, element, \"add|remove\");","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Manopla Manshoon","permission":{"default":0,"MzYzNTJjZTQ5OThh":3},"type":"script","sort":100001,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Manopla Manshoon\");","author":"MzYzNTJjZTQ5OThh","img":"systems/dnd5e/icons/skills/ice_10.jpg","actorIds":[],"_id":"d9yKk2f4dqSyUIIs"}
{"_id":"dZY9WRr1oJ49BJv8","name":"Hunters Mark - Cast Mark","permission":{"default":0,"OWUwMjUxOTE5MjE0":3,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":8300000,"flags":{},"scope":"global","command":"//This marco is designed to be used in conjunction with MarkAttackWrapper.json\n//and GMConditions.js.\n\n//It is designed to replace the standard rollItemMacro for either the Hex\n//spell or the hunter's mark Spell on either the warlock or ranger, but\n//it will work on any class with hex or hunter's mark by changing the Localization\n//parameters. To use hex, replace warlockName variable below and if you\n//would like to use it with hunter's mark replace rangerName variable below.\n\n// CAUTION! if you change your global damage variables while this macro is\n//active the change will be erased. It should work fine with dynamic effects.\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//This macro is designed to be used with the combat utility belt module.\n//and the furnace module. Once you have it installed, you will have to enable \n//enhanced conditions, and create a condition called 'Marked' as the Localization \n//parameter below. You just need to update that parameter to match whatever condition \n//name you want if you want to use a different name in condition lab.\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//Localization\nconst rangerName = \"Ranger\";\nconst warlockName = \"Warlock\";\nconst rangerSpell = \"Hunter's Mark\";\nconst warlockSpell = \"Hex\";\nconst condition = \"Marked\";\nconst flagScope = \"world\";\n\n//parameters\nif (!token) ui.notifications.error(\"Please select your token first.\");\nlet myToken = token;\nconst markDmg = \" + 1d6\";\nif (!game.user.targets.values().next().value) {\n  ui.notifications.error(\"Please select one target\");\n}\nconst target = game.user.targets.values().next().value;\n\nconst conditionList = target.data.effects;\nconst actorId = myToken.actor._id + \"_mark\";\nconst bonuses = myToken.actor.data.data.bonuses;\nlet className = \"\";\nlet spellName = \"\";\nlet gm_macro = null\n\n//Check to make sure that the GM has the GMConditions macro assigned.\ntry{\n    gm_macro = game.macros.entities.find(mb => mb.name === \"GMConditions\");\n}\ncatch(err)\n{\n    ui.notifications.error(\"GMConditions Macro was not found\")\n}\n\n//If Move flag and condition to a new selected target\nfunction move() {\n  let swapTarget = myToken.getFlag(flagScope, actorId);\n  const remCon = canvas.tokens.get(swapTarget.targetId);\n  gm_macro.execute(\"remove\", condition, swapTarget.targetId);\n  swapTarget.targetId = target.data._id;\n  (async () => {\n    await myToken.unsetFlag(flagScope, actorId);\n    myToken.setFlag(flagScope, actorId, swapTarget);\n  })();\n  gm_macro.execute(\"apply\", condition, target.id);\n  console.log();\n}\n\n//revert global damage to base, remove the condition and unset flag\n\nfunction remove() {\n  const flagId = myToken.getFlag(flagScope, actorId);\n\n  let obj = {\n    \"data.bonuses.mwak.damage\": flagId.meleeAtk,\n    \"data.bonuses.rwak.damage\": flagId.rangeAtk,\n    \"data.bonuses.msak.damage\": flagId.meleeSpell,\n    \"data.bonuses.rsak.damage\": flagId.rangeSpell\n  };\n\n  updateActor(myToken, obj);\n\n  const remFlag = canvas.tokens.get(flagId.targetId);\n\n  (async () => {\n    await gm_macro.execute(\"remove\", condition, flagId.targetId);\n    await myToken.unsetFlag(flagScope, actorId);\n  })();\n}\n\n// User input to move or remove flag and condition\n\nfunction alterMark() {\n  const d = new Dialog({\n    title: \"Mark Enemy\",\n    content: \"<p>Would you like to move or remove?</p>\",\n    buttons: {\n      one: {\n        icon: '<i class=\"fas fa-check\"></i>',\n        label: \"Move\",\n        callback: () => move()\n      },\n      two: {\n        icon: '<i class=\"fas fa-times\"></i>',\n        label: \"Remove\",\n        callback: () => remove()\n      }\n    },\n    default: \"two\",\n    close: () => console.log(\"Dialog closed\")\n  }).render(true);\n}\n\n// cast the spell, apply the condition, create and set flag\n\nasync function castSpell() {\n  try {\n    await game.dnd5e.rollItemMacro(spellName);\n  } catch (err) {\n    return null;\n  }\n  gm_macro.execute(\"apply\", condition, target.id);\n\n  let globalDmg = {\n    targetId: target.data._id,\n    meleeAtk: bonuses.mwak.damage,\n    rangeAtk: bonuses.rwak.damage,\n    meleeSpell: bonuses.msak.damage,\n    rangeSpell: bonuses.rsak.damage,\n    isSet: false\n  };\n  myToken.setFlag(flagScope, actorId, globalDmg);\n}\n\n//If the class is ranger and has the hunter's mark spell, set the spell name\n//or say the spell doesn't exist.\n\nfunction setRangerSpell() {\n  className = rangerName;\n  if (actor.items.find(i => i.name === `${rangerSpell}`)) {\n    spellName = rangerSpell;\n    castSpell();\n  } else {\n    ui.notifications.error(\n      \"Selected actor does not have the \" + rangerSpell + \" spell.\"\n    );\n    console.log(\"Selected actor does not have the \" + rangerSpell + \" spell.\");\n    return null;\n  }\n}\n\n//If the class is warlock and has the hex spell set the spell name\n//if say the spell doesn't exist\n\nfunction setWarlockSpell() {\n  className = warlockName;\n  if (actor.items.find(i => i.name === `${warlockSpell}`)) {\n    spellName = warlockSpell;\n    castSpell();\n  } else {\n    ui.notifications.error(\n      \"Selected actor does not have the \" + warlockSpell + \" spell.\"\n    );\n    console.log(\"Selected actor does not have the \" + warlockSpell + \" spell.\");\n    return null;\n  }\n}\n\n//check whether the token is a ranger or warlock\n\nfunction checkSpell() {\n  if (actor.items.find(i => i.name === `${rangerName}`)) {\n    setRangerSpell();\n  } else if (actor.items.find(i => i.name === `${warlockName}`)) {\n    setWarlockSpell();\n  } else {\n    ui.notifications.error(\n      \"Please select a \" + rangerName + \" or \" + warlockName + \" token.\"\n    );\n    console.log(\n      \"Please select a \" + rangerName + \" or \" + warlockName + \" token.\"\n    );\n  }\n}\n\nasync function updateActor(updateToken, obj) {\n  await updateToken.actor.update(obj);\n}\n\n//If the flag exists call functions to move or remove if it doesn't exist\n// call function to cast the spell\n\nif (myToken.getFlag(flagScope, actorId)) {\n  alterMark();\n} else {\n  checkSpell();\n}\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"ddMwDKMjvYQUFoU5","name":"Spiritual Weapon (PHB)","permission":{"default":0,"NDAwODQ0YzA2ODM1":3},"type":"script","sort":5900000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"9Vg3i0rmiNsKNHNr\", \"OzpuaZviFKtN2aCb\");","author":"NDAwODQ0YzA2ODM1","img":"modules/plutonium/media/icon/spell/phb-spiritual-weapon.jpg","actorIds":[]}
{"_id":"dfsTjLPCKNS1yRCs","name":"Claws","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":6000000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Claws\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/sword-brandish.svg","actorIds":[]}
{"_id":"dhdG8k7Y3Nfyca43","name":"Spell Scroll (1st Level) (Shield)","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":6100000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Spell Scroll (1st Level) (Shield)\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/tied-scroll.svg","actorIds":[]}
{"_id":"drrBL73dx6KppoeA","name":"Spirit Guardians (PHB)","permission":{"default":0,"NDAwODQ0YzA2ODM1":3},"type":"script","sort":6200000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"9Vg3i0rmiNsKNHNr\", \"wryzW2WFRfdhRZOd\");","author":"NDAwODQ0YzA2ODM1","img":"modules/plutonium/media/icon/spell/phb-spirit-guardians.jpg","actorIds":[]}
{"_id":"e0u4P8yxQfLVNdxj","name":"07 - Distortion","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":8400000,"flags":{},"scope":"global","command":"// you can change the mask of the filter\r\n// the mask must have a power of 2 h and w (512x512, 128x128, ...) \r\n// the distortion applies on black and white and shades of grey\r\n// after testing the first version of this macro try this :\r\n// -> maskPath: \"/modules/tokenmagic/fx/assets/waves-2.png\"\r\n\r\nlet params =\r\n{\r\n    filterType: \"distortion\",\r\n    maskPath: \"/modules/tokenmagic/fx/assets/distortion-1.png\",\r\n    maskSpriteScaleX: 5,\r\n    maskSpriteScaleY: 5,\r\n    padding: 20,\r\n    animated:\r\n    {\r\n        maskSpriteX: { active: true, speed: 0.05, animType: \"move\" },\r\n        maskSpriteY: { active: true, speed: 0.07, animType: \"move\" }\r\n    }\r\n};\r\n\r\nTokenMagic.addFilterOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"e6x1glG1KdoQpVXT","name":"Debug","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":6300000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let report = {};\nlet output = '';\nfunction formatBytes(a,b=2){if(0===a)return\"0 Bytes\";const c=0>b?0:b,d=Math.floor(Math.log(a)/Math.log(1024));return parseFloat((a/Math.pow(1024,d)).toFixed(c))+\" \"+[\"Bytes\",\"KB\",\"MB\",\"GB\",\"TB\",\"PB\",\"EB\",\"ZB\",\"YB\"][d]}\n\n// Foundry Details\nreport.System = {\n  Foundry: game.data.version,\n  System: `${game.system.id} version ${game.system.data.version}`,\n};\n\nreport.User = {\n  Role: Object.keys(CONST.USER_ROLES)[game.user.role],\n}\n\nreport.Scene = {\n  Walls: canvas.walls.placeables.length,\n  Lights: canvas.lighting.placeables.length,\n  Tokens: canvas.tokens.placeables.length,\n  Dimensions: `${canvas.dimensions.width} x ${canvas.dimensions.height}`,\n  Background: `${canvas.background?.img?.texture?.width} x ${canvas.background?.img?.texture?.height}`,\n}\n\nreport.Database = {\n  Actors: game.actors.size,\n  Items: game.items.size,\n  Scenes: game.scenes.size,\n  Journals: game.journal.size,\n  Tables: game.tables.size,\n}\n\n// Module details\nlet ct = 0;\ngame.modules.forEach(m => {\n  if (m.active) ct++;\n});\n\nreport.Modules = {\n  Total: game.modules.size,\n  Enabled: ct,\n}\n\n// Browser Details\nreport.Browser = {\n  Platform: navigator.platform,\n  Vendor: navigator.vendor,\n  Agent: navigator.userAgent,\n}\n\n// Browser Details\nlet gl = canvas.app.renderer.gl;\nif (gl) {\n  report.WebGL = {\n    Context: gl.constructor.name,\n    GL_Vendor: gl.getParameter(gl.VENDOR),\n    Renderer: gl.getParameter(gl.RENDERER),\n    WebGL_Version: gl.getParameter(gl.VERSION),\n    MAX_TEXTURE_SIZE: gl.getParameter(gl.MAX_TEXTURE_SIZE),\n    MAX_RENDERBUFFER: gl.getParameter(gl.MAX_RENDERBUFFER_SIZE),\n  }\n} else {\n  report.WebGL = {\n    Context: 'FAILED TO GET WEBGL CONTEXT'\n  }\n}\n\n// If chromium browser we can check memory stats\nif (performance?.memory) {\n  report.Memory = {\n    Heap_Limit: formatBytes(performance?.memory.jsHeapSizeLimit),\n    Heap_Total: formatBytes(performance?.memory.totalJSHeapSize),\n    Heap_Used: formatBytes(performance?.memory.usedJSHeapSize),\n  }\n}\n\nfor (const [k1, v1] of Object.entries(report)) {\n  output += `${k1}:\\n`;\n  for (const [k2, v2] of Object.entries(v1)) {\n    output += `  ${k2}: ${v2}\\n`;\n  }\n}\n\nlet d = new Dialog({\n  title: `Debug Output`,\n  content: `<textarea readonly style=\"height: 500px\" type=\"text\" id=\"debugmacro\">${output}</textarea>`,\n  buttons: {\n    copy: {\n      label: `Copy to clipboard`,\n      callback: () => {\n        $(\"#debugmacro\").select();\n        document.execCommand('copy');\n      }\n    },\n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Close`\n    },\n  },\n  default: \"close\",\n  close: () => {}\n});\n\nd.options.width = 600;\nd.position.width = 600;\nd.render(true);\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"ej4s36RZ11V8nx19","name":"Heal Hexblade Curse","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"(()=>{\n  if(!token || !token.actor.items.find(i=>i.name===`Warlock`)) return;\n  \n  let rollData = token.actor.getRollData(), value = rollData.classes.warlock.levels + rollData.abilities.cha.mod;\n  \n  ChatMessage.create({ \n    content : `${token.actor.name} has healed ${value} due to _Hex Blades Curse_!`,\n    speaker : ChatMessage.getSpeaker({ token })\n  });\n\n  token.actor.applyDamage((value*-1));\n})();","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"eumHC8v5dNhsCLVs","name":"Fireball (PHB)","permission":{"default":0,"NDAwODQ0YzA2ODM1":3},"type":"script","sort":6400000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"9Vg3i0rmiNsKNHNr\", \"dHvyTM3CEu0JLUA2\");","author":"NDAwODQ0YzA2ODM1","img":"modules/plutonium/media/icon/spell/phb-fireball.jpg","actorIds":[]}
{"_id":"exFJKBCPkQqgDayg","name":"New Macro","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":8500000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"token.control();\n// strip out conditions names from the token's effects and put them a string\nvar whatTheyGot = token.data.effects.toString().replace(/.svg/g, \"\").replace(new RegExp('modules/combat-utility-belt/icons/', 'g'), \"\");\n// pull game conditions from CUB\nvar conditions = game.cub.conditionLab.map;\n// create an array to log the checkboxes' statuses when called\nvar past = []\nvar condList = [];\n// loop to build html checkboxes\nfor (var i=0; i < conditions.length; i++){\n// if the condition is in the token's string, check the box\nif (whatTheyGot.includes(conditions[i].name.toLowerCase())) {\n    past.push(true);\n    var checked = \"CHECKED\";\n    }\n    else {\n    past.push(false);\n    var checked = \"\";}\n    var condList = condList + `<div style=\"vertical-align:middle;\"><img style=\"border:0; padding:0%;\" + src=\"`+conditions[i].icon + `\" alt=\"\" width=\"30\" height=\"30\" /><label style=\"font-size:16px; vertical-align:50%; margin-left:5%;\">`+conditions[i].name+`</input></label><input type=\"checkbox\" id=\"Cond` + i +`\" ` + checked + ` style=\"height:20px; vertical-align:50%; !important; margin-left:4%;\"></br></div>`\n}\n// publish\nnew Dialog({\n  title: `${token.name}`,\n  content: `<div><div class=\"form-group\" style=\"font-size:24px; text-align: center; padding: 10px\">\n             ${condList}\n            </div>\n    `,\n  buttons: {    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `cancel`\n   \n    },\n yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `apply changes`,\n      callback: html => {\n// loop through the results and against the past ...\n      for (var v=0; v < past.length; v++){\n           var nowt =\"Cond\"+v;\n           var checkedbox = document.getElementById(nowt).checked;\n           if (checkedbox != past[v]) {\n                    if (checkedbox == true) {console.log(`adding ` + conditions[v].name); \n                    game.cub.applyCondition(conditions[v].name, token);\n                    } else { console.log(`removing ` + conditions[v].name);\n                    game.cub.removeCondition(conditions[v].name, token, false);\n                 }\n              }\n           }\n        }\n     },\n  },\n  default: \"yes\",\n  close: html => {\n  }\n}).render(true);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"f2lrsBMpcFcF7bU3","name":"Blink","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":6500000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"jkDskn1sHQDVDYI6\", \"ILxoVALqHBGEXph9\");","author":"ZTQ5MTU5OTJhOWMx","img":"modules/plutonium/media/icon/spell/phb-blink.jpg","actorIds":[]}
{"_id":"f3IEKXDBLNBYzmTd","name":"01 - Bevel","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":8600000,"flags":{},"scope":"global","command":"let params = \r\n[{\r\n    filterType: \"bevel\",\r\n    rotation: 0,\r\n    thickness: 4,\r\n    lightColor: 0x00FF00,\r\n    lightAlpha: 0.7,\r\n    shadowColor: 0xFF0000,\r\n    shadowAlpha: 0.4,\r\n    animated :\r\n    {\r\n       rotation: \r\n       { \r\n          active: true,\r\n          clockWise: true, \r\n          loopDuration: 500, \r\n          animType: \"syncRotation\"\r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);\r\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"fMx47nXh8R3dPCDS","name":"24 - T11 - Grid Force Field","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":8700000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    shieldType: 11,\r\n    gridPadding: 2,\r\n    color: 0x009090,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 1,\r\n    lightAlpha: 1,\r\n    lightSize: 0.3,\r\n    scale: 0.5,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0009, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"fPChjfaLjdRb9FL5","name":"Wand of Magic Detection (Replicate)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":8800000,"flags":{"dnd5e":{"itemMacro":true},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"BetterRolls.quickRollById(\"iTrdFFPm7BwR9Tpw\", \"EHZ6dhzakprgOr2Z\");","author":"ZTQ5MTU5OTJhOWMx","img":"icons/svg/eye.svg","actorIds":[]}
{"_id":"fjhnyb27xNerv6yt","name":"Active Combat Initiative Change","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":6600000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Elevation based Initiative\n(()=>{\n  if(!game.combats.active) return ui.notifications.error(`No active combat.`);\n  let update = duplicate(game.combats.active);\n\n  if(canvas.tokens.controlled.length === 0) return ui.notifications.error(`No tokens selected`);\n\n  for(let token of canvas.tokens.controlled)\n  {\n    let elevation = token.data.elevation;\n    let initiative = new Roll(`1d20 +  ${elevation}.${elevation}`).roll().total;\n\n    let combatant = update.combatants.find(i=>i.tokenId===token.id);\n\n    combatant.initiative = initiative;\n  }\n  game.combats.active.update(update);\n})();\n\n//GM input based Initiative\n(()=>{\n  if(!game.combats.active) return ui.notifications.error(`No active combat.`);\n  let update = duplicate(game.combats.active);\n\n  let token_actors = canvas.tokens.placeables.filter(t=>t.actor.data.type === `character`);\n\n  let dialog_content = ``;\n\n  for(let token of token_actors)\n  {\n    if(update.combatants.find(c=>c.tokenId===token.id))\n    {\n      dialog_content += `\n      <img src = ${token.data.img} width=\"25\" height=\"25\">\n      <label for=\"${token.actor.name}\">${token.actor.name}</label>\n      <input name=\"${token.actor.name}\" id=\"${token.id}\" type =\"number\" value=\"0\"><br>`\n    }\n  }\n\n  new Dialog({\n    content : dialog_content,\n    buttons : \n    {\n      OK : \n      {\n        icon : ``,\n        label : `OK`,\n        callback : (html) => {\n          for(let token of token_actors)\n          {\n            if(update.combatants.find(c=>c.tokenId===token.id))\n            {\n              let new_init = parseInt(html.find(`[id=${token.id}]`)[0].value);\n              let combatant = update.combatants.find(i=>i.tokenId===token.id);\n              combatant.initiative = new_init;\n            }\n          }\n          game.combats.active.update(update);\n        }\n      }\n    }\n  }).render(true);\n})();","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"fsTgfahbZpDrjDSF","name":"Timer","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":6700000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let seconds_selected = 0;\nlet seconds_left = 0;\n\nlet times = {\n  buttons : [\n    [\"1 Min\", ()=> { seconds_selected = seconds_left = 60; update_dialog();}],\n    [\"5 Min\", ()=> { seconds_selected = seconds_left = 300; update_dialog();}],\n    [\"10 Min\", ()=> { seconds_selected = seconds_left = 600; update_dialog(); }],\n    [\"15 Min\", ()=> { seconds_selected = seconds_left = 900; update_dialog(); }],\n    [\"20 Min\", ()=> { seconds_selected = seconds_left = 1200; update_dialog(); }],\n    [\"30 Min\", ()=> { seconds_selected = seconds_left = 1800; update_dialog(); }]\n  ],\n  content : `<div sytle=\"width:100%; text-align:center;\"><h2> Choose a timer limit : </h2></div>`,\n  title : `Timer Selector`\n};\n\nasync function button_dialog(data)\n{\n  let value = await new Promise((resolve) => {\n    let buttons = {}, dialog;\n\n    data.buttons.forEach(([str, callback])=>{\n      buttons[str] = {\n        label : str,\n        callback\n      }\n    });\n  \n    dialog = new Dialog({title : data.title , content : data.content, buttons, close : () => resolve(true) }).render(true);\n  });\n  return value;\n}\n\nasync function update_dialog()\n{\n  let interval, content, buttons, dialog, interval_time;\n\n  interval_time = 1;\n  content = getContent();\n  buttons = getButtons();\n\n  dialog = new Dialog({ title : `Timer`, content, buttons, close : () =>  { clearInterval(interval); }}, {width : 200 }).render(true);\n\n  console.log(dialog);\n\n  interval = setInterval(()=> {\n    update();\n  }, interval_time * 1000);\n\n  function getContent()\n  {\n\n    if(seconds_left !== 0 )\n    {\n      let minutes = Math.floor(seconds_left/60);\n      let seconds = seconds_left%60;\n  \n      if (minutes < 10) minutes = `0${minutes}`;\n      if (seconds < 10) seconds = `0${seconds}`;\n\n      return `<div sytle=\"width:100%; text-align:center;\"><h1>${minutes}:${seconds}</h1></div>`;\n    }else{\n      if(dialog.data.content.includes(`Complete`))\n      {\n        return ``;\n      }else{\n        return `<div sytle=\"width:100%; text-align:center; color:red;\"><h1>Complete</h1></div>`;\n      }\n    }\n  }\n  function getButtons()\n  {\n    return {\n      Restart : { label : `Restart`, callback : () => { seconds_left = seconds_selected; update_dialog(); }},\n      Cancel : { label : `Cancel`, callback : () => { clearInterval(interval); }}\n    };\n  }\n  function update()\n  {\n    if(seconds_left !== 0) seconds_left--;\n\n    dialog.data.content = getContent();\n    dialog.render(true);\n  }\n}\n\nbutton_dialog(times);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/clockwork.svg","actorIds":[]}
{"name":"Crown of Stars","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":100001,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Crown of Stars\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/spell/xge-crown-of-stars.jpg","actorIds":[],"_id":"g2DhkURYem2aQCK3"}
{"_id":"g735roDKFR0Ux4Gb","name":"Force Ballista ","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":6800000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"NaadUH4JCqQOlkfG\", \"gkeQGS3DteyJhiJt\");","author":"ZTQ5MTU5OTJhOWMx","img":"systems/pf2e/icons/spells/door-to-beyond.jpg","actorIds":[]}
{"_id":"gFXdQYox9P1m6A9Y","name":"B - Multi-Filters Example","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":8900000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"distortion\",\r\n    maskPath: \"/modules/tokenmagic/fx/assets/waves-2.png\",\r\n    maskSpriteScaleX: 7,\r\n    maskSpriteScaleY: 7,\r\n    padding: 50,\r\n    animated:\r\n    {\r\n        maskSpriteX: { active: true, speed: 0.05, animType: \"move\" },\r\n        maskSpriteY: { active: true, speed: 0.07, animType: \"move\" }\r\n    }\r\n},\r\n{\r\n    filterType: \"ray\",\r\n    time: 0,\r\n    color: 0xEF9000,\r\n    alpha: 0.25,\r\n    divisor: 32,\r\n    anchorY: 1,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.0005, \r\n          animType: \"move\" \r\n       }\r\n    }\r\n},\r\n{\r\n    filterType: \"glow\",\r\n    distance: 10,\r\n    outerStrength: 8,\r\n    innerStrength: 0,\r\n    color: 0xB03000,\r\n    quality: 0.5,\r\n    animated:\r\n    {\r\n        color: \r\n        {\r\n           active: true, \r\n           loopDuration: 3000, \r\n           animType: \"colorOscillation\", \r\n           val1:0xB03000, \r\n           val2:0xFFD010\r\n        }\r\n    }\r\n}\r\n];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"gKxukV4lnrXS5fmm","name":"12 - Zoom Blur","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":9000000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"zoomblur\",\r\n    strength: 0.3,\r\n    innerRadiusPercent: 70,\r\n    radiusPercent: 120,\r\n    padding: 30,\r\n    animated:\r\n    {\r\n        innerRadiusPercent: \r\n        { \r\n           active: true, \r\n           animType: \"sinOscillation\", \r\n           loopDuration: 500, \r\n           val1: 65, \r\n           val2: 75\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"gYJ0xKErO193Ov2q","name":"24 - T10 - Evil Aura","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":9100000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    shieldType: 10,\r\n    gridPadding: 1,\r\n    color: 0x902005,\r\n    time: 0,\r\n    blend: 5,\r\n    intensity: 1,\r\n    lightAlpha: 4,\r\n    lightSize: 0.8,\r\n    scale: 0.5,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"gj5jSVShh9Ti4x70","name":"33 - T02 - Saving Roll (transform)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":6900000,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"let params =\r\n    [{\r\n        filterType: \"transform\",\r\n        filterId: \"savingRoll\",\r\n        autoDestroy: true,\r\n        padding: 80,\r\n        pivotX: 0.5,\r\n        pivotY: 0.55,\r\n        animated:\r\n        {\r\n            translationX:\r\n            {\r\n                animType: \"sinOscillation\",\r\n                val1: -0.220,\r\n                val2: +0.220,\r\n                loops: 1,\r\n                loopDuration: 1250\r\n            },\r\n            rotation:\r\n            {\r\n                animType: \"sinOscillation\",\r\n                val1: -360,\r\n                val2: +360,\r\n                loops: 1,\r\n                loopDuration: 1250,\r\n            },\r\n            scaleY:\r\n            {\r\n                animType: \"cosOscillation\",\r\n                val1: 1,\r\n                val2: 1.3,\r\n                loops: 2,\r\n                loopDuration: 625,\r\n            },\r\n            scaleX:\r\n            {\r\n                animType: \"cosOscillation\",\r\n                val1: 1,\r\n                val2: 1.4,\r\n                loops: 2,\r\n                loopDuration: 625,\r\n            }\r\n        }\r\n    }];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"gm8lAL6sbZlxYf4g","name":"Converter DAE","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":7000000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"DAE.convertAllItems()","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"h3vQkVoL4sub9YGl","name":"Poisoner's Kit","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":9200000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"OTAxNTAwZmJlZDYy\", \"wEIHb1GBVDMU70g0\");","author":"ZTQ5MTU5OTJhOWMx","img":"modules/plutonium/media/icon/toolbox.svg","actorIds":[]}
{"_id":"hvpzGKQDIQe0kQAx","name":"Curse Heal 2","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"const target = canvas.tokens.get(args[1]).actor;\nconst itemD = args[2];\nfunction healthCheck(scene, update) {\nif(update.actorData.data.attributes.hp.value === 0){\n// target is dead and either do a chat box for stating healing here\n// or place midi-qol healing line here\n  let effect_id = target.effects.find(ef=> ef.data.label === itemD.name).id;\n  target.deleteEmbeddedEntity(\"ActiveEffect\", effect_id);\n  }\n}\nif(args[0] === \"on\"){\nconst hookId = Hooks.on(\"updateToken\", healthCheck);\nDAE.setFlag(target.id, itemD.name, hookId);\n}\nif(args[0] === \"off\"){\nHooks.off(\"updateToken\", healthCheck);\nDAE.unsetFlag(target.id, itemD.name);\n}","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"iZHLhAK9iLcGceQZ","name":"Life Drain","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":7100000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Life Drain\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/sword-brandish.svg","actorIds":[]}
{"_id":"ifaxYMVIeVnSNOYQ","name":"35 - T03 - Sparks (xfire)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":7200000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"xfire\",\r\n    filterId: \"mySparksXFire\",\r\n    time: 0,\r\n    blend: 2,\r\n    amplitude: 0.7,\r\n    dispersion: 0,\r\n    chromatic: false,\r\n    scaleX: 2,\r\n    scaleY: 2,\r\n    inlay: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: -0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"ioRU7nCDettlh9Rp","name":"06 - Bloom","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":7300000,"flags":{},"scope":"global","command":"let params = \r\n[{\r\n   filterType: \"xbloom\",\r\n   filterId: \"letsShine\",\r\n   threshold: 0.35,\r\n   bloomScale: 0,\r\n   brightness: 1,\r\n   blur: 0.1,\r\n   padding: 10,\r\n   quality: 15,\r\n   blendMode: 0,\r\n   animated:\r\n   {\r\n       bloomScale: \r\n       { \r\n          active: true, \r\n          loopDuration: 2000, \r\n          animType: \"syncCosOscillation\", \r\n          val1: 0, \r\n          val2: 2.1\r\n       },\r\n       threshold:  \r\n       { \r\n          active: false, \r\n          loopDuration: 1000, \r\n          animType: \"syncCosOscillation\", \r\n          val1: 0.00, \r\n          val2: 1.90\r\n       }\r\n   }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);\r\n","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"isE3FEWXivPNLT34","name":"Fireball (Artillerist)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":7400000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"jkDskn1sHQDVDYI6\", \"BLd7SYrA5rSPCaEK\");","author":"ZTQ5MTU5OTJhOWMx","img":"modules/plutonium/media/icon/spell/phb-fireball.jpg","actorIds":[]}
{"_id":"iw29960nA7S6fH7n","name":"Force-Empowered Rend (Steel Defender)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":9300000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"iTrdFFPm7BwR9Tpw\", \"21EtIYAxVN8vtDsg\");","author":"ZTQ5MTU5OTJhOWMx","img":"worlds/herois-de-waterdeep/characters/151_-_Steel_Defender/token.png","actorIds":[]}
{"_id":"iwHyIIaDuNxpGlWM","name":"34 - T03 - Blood Bath (splash)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":9400000,"flags":{},"scope":"global","command":"let params =\r\n    [{\r\n        filterType: \"splash\",\r\n        filterId: \"mySplash\",\r\n        color: 0xFF0505,\r\n        padding: 80,\r\n        time: 0,\r\n        seed: 0.10,\r\n        splashFactor: 2.25,\r\n        spread: 7,\r\n        blend: 1,\r\n        dimX: 1,\r\n        dimY: 1,\r\n        cut: true,\r\n        animated :\r\n        {\r\n          time : \r\n          { \r\n            active: true, \r\n            speed: 0.0009, \r\n            animType: \"move\" \r\n          }\r\n        }\r\n    }];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"jNQoTnzgICmHFSXP","name":"Criacao","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"// Click on a token and fire away!\n(async ()=>{\nlet me = game.user.character || canvas.tokens.controlled[0].actor;\nlet ability_short_name = Object.keys(CONFIG.DND5E.abilities);\nlet ability_full_name = Object.values(CONFIG.DND5E.abilities);\nlet skill_short_name = Object.keys(CONFIG.DND5E.skills);\nlet skill_full_name = Object.values(CONFIG.DND5E.skills);\nlet get_tools = me.itemTypes.tool;\nlet abilityOptions = \"\";\nlet skillOptions = \"\";\nlet toolOptions = \"\";\nfor(let i = 0; i < ability_short_name.length; i++) {\nlet sname = ability_short_name[i];\nlet fname = ability_full_name[i];\n abilityOptions +=`<option value=\"${sname}\">${fname}</option>`;\n}\nfor(let i = 0; i < skill_short_name.length; i++) {\nlet sname = skill_short_name[i];\nlet fname = skill_full_name[i];\n skillOptions +=`<option value=\"${sname}\">${fname}</option>`;\n}\nfor(let i = 0; i < get_tools.length; i++) {\nlet tool = get_tools[i];\n toolOptions +=`<option value=\"${tool.name}\">${tool.name}</option>`;\n}\n\nnew Dialog({\n\ttitle: \"Actor Roller\",\n\tcontent: `<p>What would you like to roll?</p>`,\n\tbuttons: {\n        ability: { label: \"Ability\", callback: () => {\n            ability_roller();\n            }},\n         save: { label: \"Save\", callback: () => {\n            save_roller();\n            }},    \n        skill: { label: \"Skill\", callback: () => {\n            skill_roller();\n            }},\n        tool: { label: \"Tool\", callback: () => {\n            tool_roller();\n            }}\n    }\n}).render(true);\n\nfunction ability_roller(){\nlet the_content = `<form class=\"flexcol\"><div class=\"form-group\"><p>Pick a stat to roll.</p><select id=\"abilities\">${abilityOptions}</select></div></form>`;\nnew Dialog({\n\ttitle: \"Ability Check\",\n\tcontent: the_content,\n\tbuttons: {\n\t\troll: {label: \"Roll\", callback: (html) => {\n\t\t    let testAbility = html.find('#abilities')[0].value;\n\t\t    me.rollAbilityTest(testAbility);\n\t\t}}\n\t}\n}).render(true);\n}\n\nfunction save_roller(){\nlet the_content = `<form class=\"flexcol\"><div class=\"form-group\"><p>Pick a stat to roll.</p><select id=\"abilities\">${abilityOptions}</select></div></form>`;\nnew Dialog({\n\ttitle: \"Ability Check\",\n\tcontent: the_content,\n\tbuttons: {\n\t\troll: {label: \"Roll\", callback: (html) => {\n\t\t    let testAbility = html.find('#abilities')[0].value;\n\t\t    me.rollAbilitySave(testAbility);\n\t\t}}\n\t}\n}).render(true);\n}\n\n\nfunction skill_roller(){\nlet the_content = `<form class=\"flexcol\"><div class=\"form-group\"><p>Pick a skill to roll.</p><select id=\"skills\">${skillOptions}</select></div></form>`;\nnew Dialog({\n\ttitle: \"Skill Check\",\n\tcontent: the_content,\n\tbuttons: {\n\t\troll: {label: \"Roll\", callback: (html) => {\n\t\t    let testAbility = html.find('#skills')[0].value;\n\t\t    me.rollSkill(testAbility);\n\t\t}}\n    }\n}).render(true);\n}\n\nfunction tool_roller(){\nlet the_content = `<form class=\"flexcol\"><div class=\"form-group\"><p>Pick a tool to roll.</p><select id=\"tools\">${toolOptions}</select></div></form>`;\nnew Dialog({\n\ttitle: \"Tool Check\",\n\tcontent: the_content,\n\tbuttons: {\n        roll: { label: \"Roll\", callback: (html) => {\n            let testTool = html.find('#tools')[0].value;\n            me.items.find(i=> i.name === testTool).rollToolCheck();\n        }}\n    }\n}).render(true);    \n}\n\n})();","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"joEPnSwy8telk7Gm","name":"HideDefeated","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"// in Cub condition lab create a \"Defeated\" condition. On the defeated condition add macro.execute \"defeated\"\n// Make sure to setup the trigger for it in Triggler when to make a target defeated.\n// When a monster is defeated in combat, this will automatically hide them in the combat track.\nif (game.combat){\nconst combatants = game.combat.combatants;\nfor (const target of combatants){\nif (target.actor.data.data.attributes.hp.value === 0){\n    game.combat.updateCombatant({_id: target._id, hidden : true});\n    }\n  else {\n   game.combat.updateCombatant({_id: target._id, hidden : false});\n  }\n}\n}","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"joJUxPDxAuS4WGT4","name":"24 - T07 - Mage Armor","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":9500000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    shieldType: 7,\r\n    gridPadding: 1,\r\n    color: 0x777777,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 1,\r\n    lightAlpha: 1,\r\n    lightSize: 0.7,\r\n    scale: 1,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"jqsSf20TJesiIBH9","name":"remove all effects","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":9600000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"DynamicEffects.removeAllActiveffects()\r\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"k0CTnqG96KyIOa8n","name":"Divine Smite","permission":{"default":0,"OWUwMjUxOTE5MjE0":3,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":9800000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/*\n * The Smite macro emulates the Divine Smite feature of Paladins in DnD 5e. A spell slot level to use\n * can be selected, which increases the number of damage dice, and smiting a fiend or undead\n * will also increase the number of damage dice.\n *\n * First, select a token to perform the smite, then target an enemy to be smitten. Make your regular\n * attack and then if you choose to use Divine Smite, run this macro.\n */\n\n//Configurable variables\nlet maxSpellSlot = 5; //Highest spell-slot level that may be used.\nlet affectedCreatureTypes = [\"fiend\", \"undead\"]; //Creature types that take extra damage.\nlet allowConsumeSpellSlotChoice = false; //Can the user choose whether to consume the spell slot?\nlet consumeSpellSlot = true; //Does the macro consume a spell slot?\nlet allowCriticalHit = true; //Can the user choose whether the dice should be doubled as a critical hit?\nlet allowConsumepactSlot = true; //Can the user choose to use pact Magic slots, if present?\nlet macroFlavor = `Macro Divine Smite - Damage Roll (Radiant)`; //Flavor to show in the chat roll.\n\nlet dieSize = `d8`; //Die size to use for the SMITE.\n//\nif (allowCriticalHit) {\n  macroFlavor += ` - Critical Hit!`;\n}\nlet optionsText = `<p>Spell Slot level to use Divine Smite with.</p><form>\n <div class=\"form-group\"><label>Spell Slot Level:</label><select id=\"slot-level\" name=\"slot-level\">`;\n\nlet s_actor = game.user.character || canvas.tokens.controlled[0]?.actor;\n\nif (s_actor?.data.items.find((i) => i.name === \"Divine Smite\") === undefined) {\n  return ui.notifications.error(\n    `No valid actor selected that can use this macro.`\n  );\n}\n\n//#region Functions\nlet confirmed = false;\nlet criticalhit = false;\nif (getAvailableSlots(s_actor) || !consumeSpellSlot) {\n  for (let i = 1; i < maxSpellSlot; i++) {\n    let chosenSpellSlots = getSpellSlots(s_actor, i);\n    if (chosenSpellSlots.value > 0 && consumeSpellSlot) {\n      optionsText += `<option type=\"spell\" value=\"${i}\">${i} - ${chosenSpellSlots.value} slots available</option>`;\n    } else if (!consumeSpellSlot) {\n      optionsText += `<option type=\"spell\" value=\"${i}\">${i}</option>`;\n    }\n  }\n  if (getSpellSlots(s_actor, \"pact\")) {\n    optionsText += `<option type=\"pact\" value=\"pact\">Pact Magic level ${actor.data.data.spells.pact.level} - ${actor.data.data.spells.pact.value} slots available</option>`;\n  }\n  optionsText += `</select></div>`;\n  if (allowCriticalHit) {\n    optionsText += `<div class=\"form-group\"><label>Critical Hit:</label>\n       <input type=\"checkbox\" name=\"criticalCheckbox\" /></div>`;\n  }\n  if (allowConsumeSpellSlotChoice) {\n    optionsText += `<div class=\"form-group\"><label>Consume Spell Slot:</label>\n        <input type=\"checkbox\" name=\"consumeSpellSlot\" checked=\"${consumeSpellSlot}\" /></div>`;\n  }\n  optionsText += `</div></form>`;\n  // Create a dialogue box to select spell slot level to use when smiting.\n  new Dialog({\n    title: \"Divine Smite Damage\",\n    content: optionsText,\n    buttons: {\n      one: {\n        icon: '<i class=\"fas fa-check\"></i>',\n        label: \"SMITE!\",\n        callback: () => (confirmed = true),\n      },\n      two: {\n        icon: '<i class=\"fas fa-times\"></i>',\n        label: \"Cancel\",\n        callback: () => (confirmed = false),\n      },\n    },\n    default: \"Cancel\",\n    close: (html) => {\n      if (confirmed) {\n        let slotLevel = html.find(\"[name=slot-level]\")[0].value;\n        let userConsumeSpellSlot = html.find(\"[name=consumeSpellSlot]\")[0]\n          ?.checked;\n        let criticalHit = html.find(\"[name=criticalCheckbox]\")[0].checked;\n        smite(\n          s_actor,\n          slotLevel,\n          criticalHit,\n          consumeSpellSlot || userConsumeSpellSlot\n        );\n      }\n    },\n  }).render(true);\n} else {\n  return ui.notifications.error(\n    `No spell slots available to use this feature.`\n  );\n}\n/**\n * Gives the spell slot information for a particular actor and spell slot level.\n * @param {Actor5e} actor - the actor to get slot information from.\n * @param {string} level - the spell slot level to get information about. Can use pact to call Warlock levels.\n * @returns {object} contains value (number of slots remaining), max, and override.\n */\nfunction getSpellSlots(actor, level) {\n    if (level == \"pact\"){\n        return actor.data.data.spells.pact.value;\n    }\n  return actor.data.data.spells[`spell${level}`];\n}\n\n/**\n * Gives the spell slots available for\n * @param {Actor5e} actor - the actor to get slot information from.\n * @returns {boolean} True if any spell slots of any spell level are available to be used.\n */\nfunction getAvailableSlots(actor) {\n  for (let slot in actor.data.data.spells) {\n    if (actor.data.data.spells[slot].value > 0) {\n      return true;\n    }\n  }\n  if (allowConsumepactSlot) {\n    if (actor.data.data.spells.pact.value > 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Use the controlled token to smite the targeted token.\n * @param {Actor5e} actor - the actor that is performing the action.\n * @param {string} slotLevel - the spell slot level to use when smiting.\n * @param {boolean} criticalHit - whether the hit is a critical hit.\n * @param {boolean} consumeSpellSlot - whether to consume the selected spell slot.\n * @param {boolean} bonusDieCreatureType - whether to add an additional die due to creature type.\n */\nfunction smite(actor, slotLevel, criticalHit, consumeSpellSlot,bonusDieCreatureType) {\n  let chosenSpellSlots = getSpellSlots(actor, slotLevel);\n  let updateValue = `data.spells.spell${slotLevel}.value`;\n  if (slotLevel == \"pact\"){\n      slotLevel = actor.data.data.spells.pact.level;\n    updateValue = `data.spells.pact.value`;\n  }\n  let numDice = slotLevel + 1;\n    if (criticalHit) numDice *= 2;\n    if (bonusDieCreatureType) numDice += 1;\n    new Roll(`${numDice}${dieSize}`).roll().toMessage({\n      flavor: macroFlavor,\n      speaker,\n    });\n  if (consumeSpellSlot) {\n    let objUpdate = new Object();\n    objUpdate[updateValue] = chosenSpellSlots - 1;\n    actor.update(objUpdate);\n  }\n}\n//#endregion","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/spells/beam-red-2.jpg","actorIds":[]}
{"_id":"k1zGvUUDhGflcmkH","name":"24 - T03 - Poisoned Smoke","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":9900000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    shieldType: 3,\r\n    gridPadding: 1,\r\n    color: 0x106040,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 1,\r\n    lightAlpha: 1,\r\n    lightSize: 0.7,\r\n    scale: 1,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Crown of Stars","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":100001,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Crown of Stars\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/spell/xge-crown-of-stars.jpg","actorIds":[],"_id":"k8qHr4zNJBuaCs9y"}
{"_id":"kORDQxgnk3G0kxNn","name":"26 - T02 - Mantle of Madness (liquid)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":7500000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"liquid\",\r\n    filterId: \"myMantle\",\r\n    color: 0x0090FF,\r\n    time: 0,\r\n    blend: 5,\r\n    intensity: 0.0001,\r\n    spectral: false,\r\n    scale: 7,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.0015, \r\n          animType: \"move\" \r\n       },\r\n       intensity : \r\n       { \r\n          active: true, \r\n          animType: \"syncCosOscillation\",\r\n          loopDuration: 30000,\r\n          val1: 0.0001, \r\n          val2: 4 \r\n       },\r\n       scale: \r\n       { \r\n          active: true, \r\n          animType: \"syncCosOscillation\",\r\n          loopDuration: 30000,\r\n          val1: 7, \r\n          val2: 1 \r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"kWtmUgLorFLXkvag","name":"13 - Shockwave","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":10000000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"shockwave\",\r\n    time: 0,\r\n    amplitude: 8,\r\n    wavelength: 75,\r\n    radius: 500,\r\n    brightness: 1.5,\r\n    speed: 25,\r\n    padding: 0,\r\n    animated:\r\n    {\r\n        time: \r\n        { \r\n           animType: \"cosOscillation\",\r\n           active: true, \r\n           loopDuration: 1800, \r\n           val1: -4, val2: +4\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"kXs5PtZvzmQyYDv0","name":"New Macro","permission":{"default":0,"Mzk1ODQ2OTgwNmJk":3},"type":"chat","sort":10100000,"flags":{},"scope":"global","command":"","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"kdnxq4qEVOowGafW","name":"24 - T12 - Warp Time Aura","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":10200000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    shieldType: 12,\r\n    gridPadding: 2,\r\n    color: 0xAAAAAA,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 1.1,\r\n    lightAlpha: 0.5,\r\n    lightSize: 0.3,\r\n    scale: 1,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0009, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"kpFsBbotjCc0kny8","name":"Stealth Check","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":10300000,"flags":{},"scope":"global","command":"// Grabs selected tokens and rolls a stealth check against all other tokens passive perception on the map. Then returns the result.\n\n// getting all actors of selected tokens\nlet actors = canvas.tokens.controlled.map(({ actor }) => actor);\n\n// if there are no selected tokens, roll for the player's character.\nif (actors.length < 1) {\n  actors = game.users.entities.map(entity => {\n    if (entity.active && entity.character !== null) {\n      return entity.character;\n    }\n  });\n}\nconst validActors = actors.filter(actor => actor != null);\n\nlet messageContent = 'pp = passive perception<br>';\n\n// roll for every actor\nfor (const selectedActor of validActors) {\n  const stealthMod = selectedActor.data.data.skills.ste.total; // stealth roll\n  const stealth = new Roll(`1d20+${stealthMod}`).roll().total; // rolling the formula\n  messageContent += `<hr><h3>${selectedActor.name} stealth roll was a <b>${stealth}</b>.</h3>`; // creating the output string\n\n  // grab a list of unique tokens then check their passive perception against the rolled stealth.\n  const uniqueActor = {};\n  const caughtBy = canvas.tokens.placeables\n    .filter(token => !!token.actor)\n    .filter(({ actor }) => { // filter out duplicate token names. ie: we assume all goblins have the same passive perception\n      if (uniqueActor[actor.name]) {\n        return false;\n      }\n      uniqueActor[actor.name] = true;\n      return true;\n    })\n    .filter(({ actor }) => {\n      return selectedActor.id !== actor.id; // Don't check to see if the token sees himself.\n    })\n    .filter(({ actor }) => actor.data.data.skills.prc.passive >= stealth); // check map tokens passives with roller stealth\n\n  if (!caughtBy.length) {\n    messageContent += 'Stealth successful!<br>';\n  } else {\n    messageContent += 'Stealth questionable:<br>';\n    caughtBy.map(({ actor }) => {\n      messageContent += `<b>${actor.name}</b> pp(${actor.data.data.skills.prc.passive}).<br>`;\n    });\n  }\n}\n\n// create the message\nconst chatData = {\n  user: game.user._id,\n  speaker: game.user,\n  content: messageContent,\n  whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\n};\nChatMessage.create(chatData, {});\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"kr61tnvcD2xBayYj","name":"Arcane Recovery","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":7600000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"// not 100%, still needs work to check against max numbers of recovered spell slots.\nif (args[0] === \"on\") {\nlet confirmed = false;\nlet findClass = actor.items.find(i => i.name===\"Wizard\");\nlet wiz = duplicate(findClass);\nlet level = wiz.data.levels;\nlet numRec = Math.ceil(wiz.data.levels/2);\nlet spellSlots = actor.data.data.spells;\nif (hasAvailableSlot(actor)) {\n\n    // Get options for available slots\n    let inputText = \"\";\n    for (let i = 1; i <= 5; i++) {\n        let chosenSpellSlots = getSpellSlots(actor, i);        \n        let minSlots = Math.abs(chosenSpellSlots.value - chosenSpellSlots.max);\n        let maxSlots = minSlots >= numRec ? numRec : minSlots;\n        if (chosenSpellSlots.max > 0 && chosenSpellSlots.value < chosenSpellSlots.max ) {\n            inputText += `<div class=\"form-group\"><label for=\"spell${i}\">Spell Slot Level ${i} [${chosenSpellSlots.value}/${chosenSpellSlots.max}]</label><input id=\"spell${i}\" name=\"spell${i}\" type=\"number\" min=\"0\" max=\"${maxSlots}\"></div>`;\n        }\n    }\nnew Dialog({\n        title: \"Arcane Recovery\",\n        content: `\n        <form>\n        <p>You have regained <strong>${numRec}</strong> spell slots.</p>\n                ${inputText}                   \n        </form>\n        `,\n        buttons: {\n            recover: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: \"Recover\",\n                callback: (html) => {\n                    for (let i = 1; i <= 5; i++) {\n\t\t\tlet numRes = html.find(`#spell${i}`).val();\n            spell_refund(actor, i, numRes);               \n              }\n            },\n\t\t\tcancel: { label: \"Cancel\", callback: () => confirmed = false }\n        },\n        default: \"recover\",\n    }).render(true);\n\n} else {\n    return ui.notifications.warn(`You aren't missing any spell slots.`);    \n}\n\nfunction spell_refund(actor, i, numRes) {\n  let actor_data = duplicate(actor.data);\n  actor_data.data.spells[`spell${i}`].value = actor_data.data.spells[`spell${i}`].value + numRes;\n  actor.update(actor_data);\n}\n\t\nfunction getSpellSlots(actor, level) {\n    return actor.data.data.spells[`spell${level}`];\n}\n\nfunction hasAvailableSlot(actor) {\n     for (let slot in actor.data.data.spells) {\n         if (actor.data.data.spells[slot].value < actor.data.data.spells[slot].max) {\n             return true;\n         }\n     }\n     return false;\n }\n}","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"krH7okrDPAbguccN","name":"Aplicar Dano","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"(async ()=>{\nlet confirmed = false;\nlet tokenOptions = \"\";\nlet token_list = canvas.tokens.placeables;\nfor(let i = 0; i < token_list.length; i++) {\nlet t = token_list[i];\n tokenOptions +=`<option value=\"${t.name}\">${t.name}</option>`;\n}\nlet the_content = `<form><p>Hit Points Updater</p><div class=\"form-group\"><label for=\"token_name\">Target</label><select id=\"token_name\">${tokenOptions}</select></div><div class=\"form-group\"><label for=\"damageDealt\">Damage</label><input type=\"text\" id=\"damageDealt\"></div><div class=\"form-group\"><label for=\"damage_type\">Damage Type</label><select id=\"damage_type\"><option value=\"Acid\">Acid</option><option value=\"Blundgeoning\">Blundgeoning</option><option value=\"Cold\">Cold</option><option value=\"Fire\">Fire</option><option value=\"Force\">Force</option><option value=\"Lightning\">Lightning</option><option value=\"Necrotic\">Necrotic</option><option value=\"Piercing\">Piercing</option><option value=\"Poison\">Poison</option><option value=\"Psychic\">Psychic</option><option value=\"Radiant\">Radiant</option><option value=\"Slashing\">Slashing</option><option value=\"Thunder\">Thunder</option><option value=\"Healing\">Healing</option>\n</select></div></form>`;\nnew Dialog({\n    title: \"Damage Dealer\",\n    content: the_content,\n    buttons: {\n        roll: { label: \"Deal it\", callback: () => confirmed = true },\n        cancel: { label: \"Cancel\", callback: () => confirmed = false }\n    },\n    close: html => {\n        if (confirmed){\n           let ntoken = html.find('#token_name')[0].value;\n           let damageType = html.find('#damage_type')[0].value;\n           let ftoken = canvas.tokens.placeables.find(t=>t.name===ntoken);\n           let damageTotal = parseInt(html.find('#damageDealt')[0].value);\n           let curtHp = ftoken.actor.data.data.attributes.hp.value;\n           let set_message = \"\";\n           if (damageType != \"Healing\"){\n           ftoken.actor.update({\"data.attributes.hp.value\" : curtHp - damageTotal });\n           set_message = `${ftoken.name} has taken ${damageTotal} points of ${damageType}.`;\n           }\n           else {\n            ftoken.actor.update({\"data.attributes.hp.value\" : curtHp + damageTotal });\n            set_message = `${ftoken.name} has regained ${damageTotal} hit points.`;\n           }                     \n        ChatMessage.create({\n            user: game.user._id,\n            speaker: ChatMessage.getSpeaker({token: ftoken}),\n            content: set_message,\n            type: CONST.CHAT_MESSAGE_TYPES.IC\n                });    \n        }\n    }\n}).render(true);\n})();","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/biohazard.svg","actorIds":[]}
{"_id":"ktaCOAmQlxn30JNh","name":"Armor of Hexes","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":7700000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"xIySk7UUw2JJzT3S\", \"ZdkvOmSXNAkH9BiZ\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/skills/violet_15.jpg","actorIds":[]}
{"name":"Azuredge","permission":{"default":0,"MzYzNTJjZTQ5OThh":3},"type":"script","sort":100001,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Azuredge\");","author":"MzYzNTJjZTQ5OThh","img":"modules/plutonium/media/icon/crossed-swords.svg","actorIds":[],"_id":"ldO8Trdg129fCvw6"}
{"_id":"m8dYRRxUKXSMfzqq","name":"ActorFlag","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"(async()=>{\nif(args[0]===\"add\"){\nawait canvas.tokens.get(args[1]).actor.setFlag(args[2], args[3], args[4]);\n}\nif(args[0]===\"get\"){\nawait canvas.tokens.get(args[1]).actor.getFlag(args[2], args[3], args[4]);\n}\nif(args[0]===\"remove\"){\nawait canvas.tokens.get(args[1]).actor.unsetFlag(args[2], args[3]);\n}\n})();\n//usage\n//let ActorFlag = game.macros.getName(\"ActorFlag\");\n//ActorFlag.execute(\"add | get | remove\", target.id, scope, key, value);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"mELq1RCCzmqMdDEa","name":"Visão","permission":{"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let applyChanges = false;\r\nnew Dialog({\r\n  title: `Token Vision Configuration`,\r\n  content: `\r\n    <form>\r\n      <div class=\"form-group\">\r\n        <label>Vision Type:</label>\r\n        <select id=\"vision-type\" name=\"vision-type\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"dim0\">Self</option>\r\n          <option value=\"dim30\">Darkvision (30 ft)</option>\r\n          <option value=\"dim60\">Darkvision (60 ft)</option>\r\n          <option value=\"dim90\">Darkvision (90 ft)</option>\r\n          <option value=\"dim120\">Darkvision (120 ft)</option>\r\n          <option value=\"dim150\">Darkvision (150 ft)</option>\r\n          <option value=\"dim180\">Darkvision (180 ft)</option>\r\n          <option value=\"bright120\">Devil's Sight (Warlock)</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Light Source:</label>\r\n        <select id=\"light-source\" name=\"light-source\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"none\">None</option>\r\n          <option value=\"candle\">Candle</option>\r\n          <option value=\"lamp\">Lamp</option>\r\n          <option value=\"bullseye\">Lantern (Bullseye)</option>\r\n          <option value=\"hooded-dim\">Lantern (Hooded - Dim)</option>\r\n          <option value=\"hooded-bright\">Lantern (Hooded - Bright)</option>\r\n          <option value=\"light\">Light (Cantrip)</option>\r\n          <option value=\"torch\">Torch</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n    `,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Apply Changes`,\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel Changes`\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n      for ( let token of canvas.tokens.controlled ) {\r\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\r\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\r\n        let dimSight = 0;\r\n        let brightSight = 0;\r\n        let dimLight = 0;\r\n        let brightLight = 0;\r\n        let lightAngle = 360;\r\n        let lockRotation = token.data.lockRotation;\r\n        // Get Vision Type Values\r\n        switch (visionType) {\r\n          case \"dim0\":\r\n            dimSight = 0;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim30\":\r\n            dimSight = 30;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim60\":\r\n            dimSight = 60;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim90\":\r\n            dimSight = 90;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim120\":\r\n            dimSight = 120;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim150\":\r\n            dimSight = 150;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim180\":\r\n            dimSight = 180;\r\n            brightSight = 0;\r\n            break;\r\n          case \"bright120\":\r\n            dimSight = 0;\r\n            brightSight= 120;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimSight = token.data.dimSight;\r\n            brightSight = token.data.brightSight;\r\n        }\r\n        // Get Light Source Values\r\n        switch (lightSource) {\r\n          case \"none\":\r\n            dimLight = 0;\r\n            brightLight = 0;\r\n            break;\r\n          case \"candle\":\r\n            dimLight = 10;\r\n            brightLight = 5;\r\n            break;\r\n          case \"lamp\":\r\n            dimLight = 45;\r\n            brightLight = 15;\r\n            break;\r\n          case \"bullseye\":\r\n            dimLight = 120;\r\n            brightLight = 60;\r\n            lockRotation = false;\r\n            lightAngle = 52.5;\r\n            break;\r\n          case \"hooded-dim\":\r\n            dimLight = 5;\r\n            brightLight = 0;\r\n            break;\r\n          case \"hooded-bright\":\r\n            dimLight = 60;\r\n            brightLight = 30;\r\n            break;\r\n          case \"light\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"torch\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimLight = token.data.dimLight;\r\n            brightLight = token.data.brightLight;\r\n            lightAngle = token.data.lightAngle;\r\n            lockRotation = token.data.lockRotation;\r\n        }\r\n        // Update Token\r\n        console.log(token);\r\n        token.update({\r\n          vision: true,\r\n          dimSight: dimSight,\r\n          brightSight: brightSight,\r\n          dimLight: dimLight,\r\n          brightLight:  brightLight,\r\n          lightAngle: lightAngle,\r\n          lockRotation: lockRotation\r\n        });\r\n      }\r\n    }\r\n  }\r\n}).render(true);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/eye.svg","actorIds":[]}
{"_id":"md8C605UU30ta8jO","name":"Musket (DMG)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":10400000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"yUaOBOfm6pF7gQqZ\", \"uGAJMi2wNuk9juoo\");","author":"ZTQ5MTU5OTJhOWMx","img":"modules/plutonium/media/icon/pocket-bow.svg","actorIds":[]}
{"_id":"mfCpqWhKn9TeEfvX","name":"18 - Electric","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":10500000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"electric\",\r\n    color: 0xFFFFFF,\r\n    time: 0,\r\n    blend: 1,\r\n    intensity: 5,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0020, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"mfVBUxyKIaaNZzZY","name":"Hurl Flame","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":7800000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Hurl Flame\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/sword-brandish.svg","actorIds":[]}
{"_id":"mlqGDeBaoWPo55uN","name":"35 - T06 - Custom Color Fire (xfire)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":7900000,"flags":{},"scope":"global","command":"// example with color fine tuning\r\nlet params =\r\n[{\r\n    filterType: \"xfire\",\r\n    filterId: \"myCustomXFire\",\r\n    time: 0,\r\n    color1: 0x00DD20,\r\n    color2: 0x009090,\r\n    color3: 0x001020,\r\n    color4: 0x00CCFF,\r\n    blend: 1,\r\n    amplitude: 1,\r\n    dispersion: 0,\r\n    chromatic: false,\r\n    scaleX: 1,\r\n    scaleY: 1,\r\n    inlay: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: -0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"n2LcQ2nKJmu3Vxjv","name":"24 - T01 - Hexa Force Field 3 - Scintillating","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":8000000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"myHexaField\",\r\n    shieldType: 2,\r\n    gridPadding: 2,\r\n    color: 0x00CCDD,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 1,\r\n    lightAlpha: 0,\r\n    lightSize: 0,\r\n    scale: 2,\r\n    radius: 0.98,\r\n    chromatic: false,\r\n    discardThreshold: 0.13,\r\n    alphaDiscard: true,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n},\r\n{\r\n    filterType: \"xglow\",\r\n    filterId: \"myBurningAura\",\r\n    auraType: 2,\r\n    color: 0x500050,\r\n    scale: 1.,\r\n    time: 0,\r\n    auraIntensity: 1,\r\n    subAuraIntensity: 0,\r\n    threshold: 0,\r\n    discard: false,\r\n    zOrder: 3000,\r\n    animated:\r\n    {\r\n        time : \r\n        {  \r\n           active: true,\r\n           speed: 0.0027, \r\n           animType: \"move\" \r\n        },\r\n        thickness:\r\n        {\r\n           active: true,\r\n           loopDuration: 6000, \r\n           animType: \"cosOscillation\", \r\n           val1:2, \r\n           val2:4\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Harpoon Gun","permission":{"default":0,"MzYzNTJjZTQ5OThh":3},"type":"script","sort":100001,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Harpoon Gun\");","author":"MzYzNTJjZTQ5OThh","img":"modules/plutonium/media/icon/pirate-cannon.svg","actorIds":[],"_id":"nU4xLnvWW5MkSSf0"}
{"_id":"nW6TzUvkMAgq8nUC","name":"Force Strike (Robert Wall)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":10600000,"flags":{"dnd5e":{"itemMacro":true},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"BetterRolls.quickRollById(\"iTrdFFPm7BwR9Tpw\", \"uqJNo5o6jiJ0aFkx\");","author":"ZTQ5MTU5OTJhOWMx","img":"modules/plutonium/media/icon/pocket-bow.svg","actorIds":[]}
{"_id":"neOrT1WqnteZXvSz","name":"24 - T13 - Simple Color","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":10700000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    shieldType: 13,\r\n    gridPadding: 2,\r\n    color: 0x006030,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 1,\r\n    lightAlpha: 0,\r\n    lightSize: 0,\r\n    scale: 1,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0009, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"nqdqJyMF9X7HLiGg","name":"05 - Glow","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":8100000,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"glow\",\r\n    filterId: \"superSpookyGlow\",\r\n    outerStrength: 4,\r\n    innerStrength: 0,\r\n    color: 0x5099DD,\r\n    quality: 0.5,\r\n    padding: 10,\r\n    animated:\r\n    {\r\n        color: \r\n        {\r\n           active: true, \r\n           loopDuration: 3000, \r\n           animType: \"colorOscillation\", \r\n           val1:0x5099DD, \r\n           val2:0x90EEFF\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"o0RCswyBYiPHZPyG","name":"Glaive","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":8200000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Glaive\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/items/weapons/glaive.png","actorIds":[]}
{"_id":"oMdpyxntpuYeudik","name":"33 - T02 - Saving Roll (transform)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":8300000,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"let params =\r\n    [{\r\n        filterType: \"transform\",\r\n        filterId: \"savingRoll\",\r\n        autoDestroy: true,\r\n        padding: 80,\r\n        pivotX: 0.5,\r\n        pivotY: 0.55,\r\n        animated:\r\n        {\r\n            translationX:\r\n            {\r\n                animType: \"sinOscillation\",\r\n                val1: -0.220,\r\n                val2: +0.220,\r\n                loops: 1,\r\n                loopDuration: 1250\r\n            },\r\n            rotation:\r\n            {\r\n                animType: \"sinOscillation\",\r\n                val1: -360,\r\n                val2: +360,\r\n                loops: 1,\r\n                loopDuration: 1250,\r\n            },\r\n            scaleY:\r\n            {\r\n                animType: \"cosOscillation\",\r\n                val1: 1,\r\n                val2: 1.3,\r\n                loops: 2,\r\n                loopDuration: 625,\r\n            },\r\n            scaleX:\r\n            {\r\n                animType: \"cosOscillation\",\r\n                val1: 1,\r\n                val2: 1.4,\r\n                loops: 2,\r\n                loopDuration: 625,\r\n            }\r\n        }\r\n    }];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"pBoodAS36xGHgPQc","name":"35 - T08 - Animated SuperFrost (xfire+xglow)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":8400000,"flags":{},"scope":"global","command":"let params =\r\n    [{\r\n        filterType: \"zapshadow\",\r\n        filterId: \"myAnimSuperFrost\",\r\n        alphaTolerance: 0.50\r\n    },\r\n    {\r\n        filterType: \"xfire\",\r\n        filterId: \"myAnimSuperFrost\",\r\n        color: 0xACC5C5,\r\n        time: 0,\r\n        blend: 5,\r\n        amplitude: 1,\r\n        dispersion: 0,\r\n        chromatic: false,\r\n        scaleX: 1,\r\n        scaleY: 1,\r\n        inlay: true,\r\n        animated:\r\n        {\r\n            time:\r\n            {\r\n                active: true,\r\n                speed: -0.0020,\r\n                animType: \"move\"\r\n            },\r\n            dispersion:\r\n            {\r\n                animType: \"cosOscillation\",\r\n                val1: 0.25,\r\n                val2: 0.55,\r\n                loopDuration: 3000\r\n            }\r\n        }\r\n    },\r\n    {\r\n        filterType: \"xglow\",\r\n        filterId: \"myAnimSuperFrost\",\r\n        auraType: 1,\r\n        color: 0x6090AA,\r\n        thickness: 4.5,\r\n        scale: 10,\r\n        time: 0,\r\n        auraIntensity: 0.25,\r\n        subAuraIntensity: 1,\r\n        threshold: 0.5,\r\n        discard: false,\r\n        animated:\r\n        {\r\n            time:\r\n            {\r\n                active: true,\r\n                speed: 0.0018,\r\n                animType: \"move\"\r\n            },\r\n            thickness:\r\n            {\r\n                val1: 2, val2: 2.5,\r\n                animType: \"cosOscillation\",\r\n                loopDuration: 3000\r\n            },\r\n            subAuraIntensity:\r\n            {\r\n                val1: 0.45, val2: 0.65,\r\n                animType: \"cosOscillation\",\r\n                loopDuration: 6000\r\n            },\r\n            auraIntensity:\r\n            {\r\n                val1: 0.9, val2: 1.1,\r\n                animType: \"cosOscillation\",\r\n                loopDuration: 3000\r\n            }\r\n        }\r\n    }];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"pEIhDFELNx2xyakI","name":"Toll the Dead (XGE)","permission":{"default":0,"NDAwODQ0YzA2ODM1":3},"type":"script","sort":8500000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"9Vg3i0rmiNsKNHNr\", \"BLI4hI6YT6ikkyoi\");","author":"NDAwODQ0YzA2ODM1","img":"modules/plutonium/media/icon/spell/xge-toll-the-dead.jpg","actorIds":[]}
{"_id":"pg4rljxSUrEeTy0x","name":"Content size","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"ChatMessage.create({\ncontent: `\nscenes : ${game.scenes.size}<br>\nactors : ${game.actors.size}<br>\nitems : ${game.items.size}<br>\njournals : ${game.journal.size}<br>\ntables : ${game.tables.size}<br>\n`})","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"prNUKXoVr1YIwmoa","name":"26 - T02 - Mantle of Madness (liquid)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":10800000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"liquid\",\r\n    filterId: \"myMantle\",\r\n    color: 0x0090FF,\r\n    time: 0,\r\n    blend: 5,\r\n    intensity: 0.0001,\r\n    spectral: false,\r\n    scale: 7,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.0015, \r\n          animType: \"move\" \r\n       },\r\n       intensity : \r\n       { \r\n          active: true, \r\n          animType: \"syncCosOscillation\",\r\n          loopDuration: 30000,\r\n          val1: 0.0001, \r\n          val2: 4 \r\n       },\r\n       scale: \r\n       { \r\n          active: true, \r\n          animType: \"syncCosOscillation\",\r\n          loopDuration: 30000,\r\n          val1: 7, \r\n          val2: 1 \r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"psEfgRmNeeerfaoB","name":"Hurl Flame","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":8600000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Hurl Flame\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/sword-brandish.svg","actorIds":[]}
{"_id":"pszzzRxOSuyES97k","name":"Armor of Hexes","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":8700000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"xIySk7UUw2JJzT3S\", \"ZdkvOmSXNAkH9BiZ\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/mighty-force.svg","actorIds":[]}
{"_id":"pwVczsXxJETwrs7i","name":"Fireball","permission":{"default":0,"NDAwODQ0YzA2ODM1":3},"type":"script","sort":10900000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"MLwpZTVAEwVSGhKu\", \"sA3Bdb6fAA2uI0fN\");","author":"NDAwODQ0YzA2ODM1","img":"systems/dnd5e/icons/spells/fireball-red-2.jpg","actorIds":[]}
{"_id":"q1MNja4BqYZHcZLV","name":"Jeweler's Tools","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":11000000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"OTAxNTAwZmJlZDYy\", \"nMmQX5e1jlTUVqSj\");","author":"ZTQ5MTU5OTJhOWMx","img":"systems/dnd5e/icons/items/inventory/gem-blue.jpg","actorIds":[]}
{"name":"DisintegrateOrangePink","permission":{"default":0,"ccsO3NtPJs2xE1RS":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.kCyhpxaDJxgpmFGG"}},"scope":"global","command":"// Requires at least 1 target\nif(game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires token to be selected\nif(canvas.tokens.controlled.length == 0) ui.notifications.error(\"Please select your token\");\n// Requires FX Master Module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\nvar myStringArray = Array.from(game.user.targets)[0];\nvar arrayLength = game.user.targets.size;\nfor (var i = 0; i < arrayLength; i++) {\n\nlet mainTarget = Array.from(game.user.targets)[i];\nlet myToken = canvas.tokens.controlled [0];\n\nlet ray = new Ray(myToken.center, mainTarget.center);\nlet anDeg = -(ray.angle * 57.3);\nlet anDist = ray.distance;\n// Animation file path\nlet file = \"modules/jb2a_patreon/Library/6th_Level/Disintegrate/\";\n// Checking for range to target to choose which file to pull\nlet anFile = `${file}Disintegrate_01_Regular_OrangePink_15ft_1000x400.webm`;\nlet anFileSize = 600;\nlet anchorX = 0.2;\nswitch(true){\n case (anDist<=600):\n    anFileSize = 600;\n    anFile = `${file}Disintegrate_01_Regular_OrangePink_15ft_1000x400.webm`;\n    anchorX = 0.2;\n    break;\n case (anDist>1200):\n    anFileSize = 1800;\n    anFile = `${file}Disintegrate_01_Regular_OrangePink_45ft_2200x400.webm`;\n    anchorX = 0.091;\n    break;\n default:\n    anFileSize = 1200;\n    anFile = `${file}Disintegrate_01_Regular_OrangePink_30ft_1600x400.webm`;\n    anchorX = 0.125;\n    break;\n}\n// Scaling the Height of the animation for consistency across ranges\nlet anScale = anDist / anFileSize;\nlet anScaleY = anDist <= 600 ? 0.6  : anScale;\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: myToken.center,\n                      anchor: {\n                       x: anchorX,\n                       y: 0.5\n                      },\n                      angle: anDeg,\n                      scale: {\n                       x: anScale,\n                       y: anScaleY\n                      }\n                    }; \n\ncanvas.fxmaster.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\n\n// Add some sound\n/*\nawait wait (300);\nlet soundFile = `sound path here`;\nAudioHelper.play({src: soundFile, volume: 1.0, autoplay: true, loop: false}, true);\n*/\n// Or play random sounds on each attack\n/*\nlet soundHome = \"CustomSounds/battle/\";\n\nlet m1 = `sound 01 file location here`;\nlet m2 = `sound 02 file location here`;\nfunction random_sound(sounds)\n{\nreturn sounds[Math.floor(Math.random()*sounds.length)];\n}\n\nvar sounds = [m1, m2];\n\nlet roll = new Roll('1d3').roll().total;\nlet soundFile = random_sound(sounds);\nAudioHelper.play({src: soundHome + soundFile, volume: 0.9, autoplay: true, loop: false}, true);\n*/\n\n// Delete comments to activate token Magic FX. Requires the Token Magic FX Modules to be installed\n/*\nlet params =\n[{\n    filterType: \"fire\",\n    filterId: \"myFire\",\n    intensity: 3,\n    color: 0xFFFFFF,\n    amplitude: 2,\n    time: 0,\n    blend: 10,\n    fireBlend : 1,\n    alphaDiscard: true,\n    zOrder: 50,\n    animated :\n    {\n      time : \n      { \n        active: true, \n        speed: -0.0024, \n        animType: \"move\" \n      }\n    }\n},{\n    filterType: \"glow\",\n    filterId: \"glowripples\",\n    outerStrength: 4,\n    innerStrength: 2,\n// Change color here in hex\n    color: 0xFF5858,\n    quality: 0.5,\n    padding: 10,\n    zOrder: 100,\n}];\nawait wait(500);\nTokenMagic.addUpdateFiltersOnTargeted(params);\nawait wait(2000);\nTokenMagic.deleteFiltersOnTargeted();\n*/\n}\n}\nCast ()","author":"OWUwMjUxOTE5MjE0","img":"modules/jb2a_patreon/Library/6th_Level/Disintegrate/Disintegrate_01_Regular_OrangePink_Thumb.webp","actorIds":[],"_id":"q3wGoV5oj4B5hokL"}
{"_id":"q7fprWG52oV1f5Zc","name":"Combat Creator","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":8800000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"/*\n  1. Get tokens that need to be added to combat.\n  2. Resolve \"Suprise\" (ask the question?? -- dialog with option \"Players/Monsters/None\")\n  3. Add enemies to combat_tracker & set their initative\n  4. Release both controlled & targets\n  5. Set up running macros for the combat using turn alert\n    a. Exp_Loot_Combat_Macro\n    b. Round_Initiative\n    c. Lengendary Actions -- (Might add this for to test out.)\n*/\nconst options = [`Players`, `Monsters`, `None`];\nconst combatants = (canvas.tokens.controlled.length !== 0)\n  ? canvas.tokens.controlled : Array.from(game.user.targets);\nconst players = combatants.filter(token => token.data.disposition !== -1);\nconst monsters = combatants.filter(token => token.data.disposition === -1);\n\nlet suprised = [];\n\n(async ()=>{\n  let suprise = await button_selection(options, `Who is suprised?`);\n  let stealth_average = \n    suprise === `Players` ? get_average(monsters) :\n    suprise === `Monsters` ? get_average(players) : null;\n\n  if(suprise === `Players`)\n  {\n    for(let player of players)\n    {\n      let roll = new Roll(`1d20 + ${player.actor.data.data.skills[`per`].mod}`).roll().total;\n      if( roll < stealth_average )\n        suprised.push(player.id);\n    }\n  }\n  if(suprise === `Monsters`)\n  {\n    for(let monster of monsters)\n    {\n      let roll = new Roll(`1d20 + ${monster.actor.data.data.skills[`per`].mod}`).roll().total;\n      if( roll < stealth_average )\n        suprised.push(monster.id);\n    }\n  }\n\n  await add_to_combat();\n  await roll_iniative();\n  await game.combats.active.startCombat();\n  await ui.combat.createPopout().render(true);\n  await build_combat_control();\n})();\n\nasync function button_selection(options, title = ``)\n{\n  let value = await new Promise((resolve)=>{\n    let buttons = {};\n    options.forEach(option => {\n      buttons[option] = {\n        label : option,\n        callback : () => {resolve(option)} \n      }\n    })\n    new Dialog({\n      title,\n      buttons\n    }).render(true);\n  });\n  return value;\n}\n\nfunction get_average(tokens = [], check = `ste`)\n{\n  if(!tokens) return 0;\n\n  let total =  tokens.reduce((acc, token)=>{\n    let roll = new Roll(`1d20 + ${token.actor.data.data.skills[check].mod}`).roll().total;\n    return acc + roll;\n  }, 0);\n\n  return Math.min(total/tokens.length);\n}\n\nasync function add_to_combat()\n{\n  for(let token of combatants)\n  {\n    await token.toggleCombat();\n  }\n}\n\nasync function roll_iniative()\n{\n  if(!game.combats.active) return;\n  let updates = duplicate(game.combats.active);\n\n  for(let token of combatants)\n  {\n    let initiative = suprised.includes(token.id)\n      ? 0 : new Roll(`1d20 + ${token.actor.data.data.attributes.init.value}`).roll().total;\n\n    updates.combatants.find(tokenData => tokenData.tokenId === token.id).initiative = initiative;\n  }\n\n  await game.combats.active.update(updates);\n}\n\nasync function build_combat_control()\n{\n  //return if turn_alert isn't installed or active\n  if(!game.modules.get(\"turnAlert\").active) return;\n\n  TurnAlert.create({\n    round : 1, \n    roundAbsolute : false, \n    repeating : {\n      frequency : 1\n    },\n    macro : `Exp_Loot_Combat_Macro`,\n    message : \"Executing Experience and Loot Combat Macro.\",\n    recipientIds : ChatMessage.getWhisperRecipients(\"GM\")\n  });\n\n  TurnAlert.create({\n    round : 1,\n    roundAbsolute : false,\n    repeating : {\n      frequency : 1\n    }, \n    macro : `Roll_Initative`,\n    message : \"Executing Initative Roll Macro\",\n    recipientIds : ChatMessage.getWhisperRecipients(\"GM\")\n  });\n}","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"DisintegrateGreen","permission":{"default":0,"ccsO3NtPJs2xE1RS":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.4pLmYAdYsctqIXwC"}},"scope":"global","command":"// Requires at least 1 target\nif(game.user.targets.size == 0) ui.notifications.error('You must target at least one token');\n// Requires token to be selected\nif(canvas.tokens.controlled.length == 0) ui.notifications.error(\"Please select your token\");\n// Requires FX Master Module\nif (!canvas.fxmaster) ui.notifications.error(\"This macro depends on the FXMaster module. Make sure it is installed and enabled\");\n    function moduleIncludes(test) {\n        if (game.modules.get(test)) return true;\n    }\n    var path00 = moduleIncludes(\"jb2a_patreon\") === true ? `jb2a_patreon` : `JB2A_DnD5e`;\n\nconst wait = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\n\nasync function Cast() {\nvar myStringArray = Array.from(game.user.targets)[0];\nvar arrayLength = game.user.targets.size;\nfor (var i = 0; i < arrayLength; i++) {\n\nlet mainTarget = Array.from(game.user.targets)[i];\nlet myToken = canvas.tokens.controlled [0];\n\nlet ray = new Ray(myToken.center, mainTarget.center);\nlet anDeg = -(ray.angle * 57.3);\nlet anDist = ray.distance;\n// Animation file path\nlet file = `modules/${path00}/Library/6th_Level/Disintegrate/`;\n// Checking for range to target to choose which file to pull\nlet anFile = `${file}Disintegrate_01_Regular_Green01_15ft_1000x400.webm`;\nlet anFileSize = 600;\nlet anchorX = 0.2;\nswitch(true){\n case (anDist<=600):\n    anFileSize = 600;\n    anFile = `${file}Disintegrate_01_Regular_Green01_15ft_1000x400.webm`;\n    anchorX = 0.2;\n    break;\n case (anDist>1200):\n    anFileSize = 1800;\n    anFile = `${file}Disintegrate_01_Regular_Green01_45ft_2200x400.webm`;\n    anchorX = 0.091;\n    break;\n default:\n    anFileSize = 1200;\n    anFile = `${file}Disintegrate_01_Regular_Green01_30ft_1600x400.webm`;\n    anchorX = 0.125;\n    break;\n}\n// Scaling the Height of the animation for consistency across ranges\nlet anScale = anDist / anFileSize;\nlet anScaleY = anDist <= 600 ? 0.6  : anScale;\n\nlet spellAnim = \n                    {\n                     file: anFile,\n                      position: myToken.center,\n                      anchor: {\n                       x: anchorX,\n                       y: 0.5\n                      },\n                      angle: anDeg,\n                      scale: {\n                       x: anScale,\n                       y: anScaleY\n                      }\n                    }; \n\ncanvas.fxmaster.playVideo(spellAnim);\ngame.socket.emit('module.fxmaster', spellAnim);\n// Add some sound\n/*\nawait wait (300);\nlet soundFile = `sound path here`;\nAudioHelper.play({src: soundFile, volume: 1.0, autoplay: true, loop: false}, true);\n*/\n// Or play random sounds on each attack\n/*\nlet soundHome = \"CustomSounds/battle/\";\n\nlet m1 = `sound 01 file location here`;\nlet m2 = `sound 02 file location here`;\nfunction random_sound(sounds)\n{\nreturn sounds[Math.floor(Math.random()*sounds.length)];\n}\n\nvar sounds = [m1, m2];\n\nlet roll = new Roll('1d3').roll().total;\nlet soundFile = random_sound(sounds);\nAudioHelper.play({src: soundHome + soundFile, volume: 0.9, autoplay: true, loop: false}, true);\n*/\n\n// Delete comments to activate token Magic FX. Requires the Token Magic FX Modules to be installed\n/*\nlet params =\n[{\n    filterType: \"fire\",\n    filterId: \"myFire\",\n    intensity: 3,\n    color: 0xFFFFFF,\n    amplitude: 2,\n    time: 0,\n    blend: 10,\n    fireBlend : 1,\n    alphaDiscard: true,\n    zOrder: 50,\n    animated :\n    {\n      time : \n      { \n        active: true, \n        speed: -0.0024, \n        animType: \"move\" \n      }\n    }\n},{\n    filterType: \"glow\",\n    filterId: \"glowripples\",\n    outerStrength: 4,\n    innerStrength: 2,\n    color: 0xBEBE00,\n    quality: 0.5,\n    padding: 10,\n    zOrder: 100,\n}];\nawait wait(500);\nTokenMagic.addUpdateFiltersOnTargeted(params);\nawait wait(2000);\nTokenMagic.deleteFiltersOnTargeted();\n*/\n}\n}\nCast ()","author":"OWUwMjUxOTE5MjE0","img":"modules/jb2a_patreon/Library/6th_Level/Disintegrate/Disintegrate_01_Regular_Green01_Thumb.webp","actorIds":[],"_id":"qIrSSpAwes8cJNz4"}
{"_id":"qTeAaR6bYrvgVu0m","name":"23 - T01 - Mirror Images","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":8900000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"images\",\r\n    filterId: \"myMirrorImages\",\r\n    time: 0,\r\n    nbImage: 4,\r\n    alphaImg: 1.0,\r\n    alphaChr: 0.0,\r\n    blend: 4,\r\n    ampX: 0.10,\r\n    ampY: 0.10,\r\n    zOrder: 20,\r\n    animated :\r\n    {\r\n      time: \r\n      { \r\n        active: true, \r\n        speed: 0.0010, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"qXJTDUcpFdM1NkxK","name":"New Macro","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"/**\n * Monk Ki Point spender\n * \n * This macro will prompt which Feature you want to spend Ki points on.\n * \n * Flurry of Blows: Automatically cast two Unarmed Strike's\n * Stunning Strike: Automatically show the saving throw DC\n * Deflect Missiles: Automatically show the damage reduction\n */\n(async () => {\n    const kiName = \"Ki Points\";\n    const errNoMonkToken = \"Please select a single monk token.\";\n\n    const sendChat = async (msg) => {\n        let chatData = {\n            user: game.user.id,\n            speaker: ChatMessage.getSpeaker(),\n            content: msg,\n        };\n        ChatMessage.create(chatData, {});\n    }\n\n    if (!actor) {\n        ui.notifications.warn(errNoMonkToken);\n        return\n    }\n\n    let monk = actor.items.find(i => i.name === 'Monk' && i.type === 'class');\n    if (!monk) {\n        ui.notifications.warn(errNoMonkToken);\n        return\n    }\n\n    let monkLevels = monk.data.data.levels || 20;\n    //let subClass = monk.data.data.subclass;\n\n    if (monkLevels < 2) {\n        ui.notifications.warn('You must have a least 2 Monk levels to use ki points.');\n        return\n    }\n\n    class KiFeature {\n        /**\n         * @param {string} name\n         * @param {string} fallbackText\n         * @param {number} requireLevel\n         * @param {function} action\n         * @param {function} appendTemplate\n         * @param {number} kiCost\n         */\n        constructor(name, fallbackText, requireLevel, action, appendTemplate, kiCost) {\n            this.name = name;\n            this.fallbackText = fallbackText;\n            this.requireLevel = requireLevel;\n            this.kiCost = kiCost || 1;\n            if (action) {\n                this.action = action;\n            }\n            if (appendTemplate) {\n                this.appendTemplate = appendTemplate;\n            }\n        }\n\n        render(allowHigher) {\n            let entry = null;\n\n            const pack = game.packs.get(\"dnd5e.classfeatures\");\n            if (!pack) {\n                console.warn('Could not find \"dnd5e.classfeatures\" compendium.');\n            } else {\n                entry = pack.index.find(e => e.name === this.name);\n            }\n\n            if (!allowHigher && this.requireLevel && monkLevels && this.requireLevel > monkLevels) {\n                ui.notifications.warn(`You need to have ${this.requireLevel} monk levels, you only have ${monkLevels}.`)\n                return\n            }\n\n            if (entry) {\n                pack.getEntity(entry._id).then(o => {\n                    let template = `@Compendium[dnd5e.classfeatures.${entry._id}]{${this.name}}\n                    ${o.data.data.description.value}`;\n                    if (this.appendTemplate) {\n                        template += '\\n\\n' + this.appendTemplate();\n                    }\n                    sendChat(template);\n                    if (this.action) {\n                        this.action();\n                    }\n                });\n            } else {\n                console.warn(`Could not find \"${this.name}\" entry in compendium.`);\n                let template = this.fallbackText;\n                if (this.appendTemplate) {\n                    template += '\\n\\n' + this.appendTemplate();\n                }\n                sendChat(template);\n                if (this.action) {\n                    this.action();\n                }\n            }\n        }\n    }\n\n   const openHand = !!actor.items.find(o => o.data.name === 'Open Hand Technique') ? `<br />In addition, you can impose one of the following: <ul><li>It must succeed on a <b>Dexterity</b> saving throw or be knocked prone.</li><li>It must make a <b>Strength</b> saving throw. If it fails, you can push it up to 15 feet away from you.</li><li>It can’t take reactions until the end of your next turn.</li></ul> Saving throw <b>DC ${10 + actor.data.data.abilities.wis.mod}</b>` : \"\";\n\n    const features = [\n        new KiFeature(\"Ki: Flurry of Blows\",\n            `Immediately after you take the <b>Attack</b> action on your turn, you can spend 1 ki point to make two unarmed strikes as a bonus action. ${openHand}`,\n            2,\n            function () {\n                // Automatically roll two Unarmed Strike attacks\n                let strike = actor.items.find(o => o.data.name === 'Unarmed Strike' && o.data.labels.activation === '1 Action')\n                if (strike) {\n                    strike.roll();\n                    strike.roll();\n                }\n            }),\n        new KiFeature(\"Ki: Patient Defense\",\n            \"You can spend 1 ki point to take the <b>Dodge</b> action as a bonus action on your turn.\",\n            2),\n        new KiFeature(\"Ki: Step of the Wind\",\n            \"You can spend 1 ki point to take the <b>Disengage</b> or <b>Dash</b> action as a bonus action on your turn, and your jump distance is doubled for the turn.\",\n            2),\n        new KiFeature(\"Deflect Missiles\",\n            `Starting at 3rd level, you can use your reaction to deflect or catch the missile when you are hit by a ranged weapon attack. When you do so, the damage you take from the attack is reduced by 1d10 + your Dexterity modifier + your monk level. <br />\n\n        If you reduce the damage to 0, you can catch the missile if it is small enough for you to hold in one hand and you have at least one hand free. If you catch a missile in this way, you can spend 1 ki point to make a ranged attack with the weapon or piece of ammunition you just caught, as part of the same reaction. You make this attack with proficiency, regardless of your weapon proficiencies, and the missile counts as a monk weapon for the attack, which has a normal range of 20 feet and a long range of 60 feet.`,\n            3,\n            null,\n            function () {\n                return `Damage reduction: [[/r 1d10+${actor.data.data.abilities.dex.mod}+${monkLevels}]]`;\n            }),\n\t\tnew KiFeature(\"Ki: Ki-Fueled Attack\",\n            \"If you spend 1 ki point or more as part of your action on your turn, you can make one attack with an unarmed strike or a monk weapon as a bonus action before the end of the turn.\",\n            3),\n\t\tnew KiFeature(\"Ki: Quickened Healing\",\n            `As an action, you can spend 2 ki points and roll a Martial Arts die. You regain a number of hit points equal to the number rolled plus your proficiency bonus.`,\n            4),\n\t\t\tnull,\n\t\t\tfunction () {\n\t\t\t\treturn `Regain HP: [[/r 1d(4+2*floor((@classes.monk.levels + 1) / 6))+@attributes.prof]]`;\n\t\t\t}),\n        new KiFeature(\"Ki: Stunning Strike\",\n            \"Starting at 5th level, you can interfere with the flow of ki in an opponent’s body. When you hit another creature with a melee weapon attack, you can spend 1 ki point to attempt a stunning strike. The target must succeed on a Constitution saving throw or be <b>stunned</b> until the end of your next turn.\",\n            5,\n            null,\n            function () {\n                // Append the saving throw DC to the chat message\n                return `CON saving throw (DC [[8+${actor.data.data.abilities.wis.mod}+@attributes.prof]])`;\n            }),\n\t\tnew KiFeature(\"Ki: Focused Aim\",\n            \"When you miss with an attack roll, you can spend 1 to 3 ki points to increase your attack roll by 2 for each of these ki points you spend, potentially turning the miss into a hit.\",\n            5),\n        new KiFeature(\"Ki: Diamond Soul\",\n            `Beginning at 14th level, your mastery of ki grants you proficiency in all saving throws.\n\n        Additionally, whenever you make a saving throw and fail, you can spend 1 ki point to reroll it and take the second result.`,\n            14),\n        new KiFeature(\"Ki: Empty Body\",\n            `Beginning at 18th level, you can use your action to spend 4 ki points to become invisible for 1 minute. During that time, you also have resistance to all damage but force damage.\n\n        Additionally, you can spend 8 ki points to cast the astral projection spell, without needing material components. When you do so, you can’t take any other creatures with you.`,\n            18,\n            null,\n            function () {\n                return \"Note: 4 ki points have been spent. Adjust manually if casting astral projection spell.\";\n            },\n            4),\n    ];\n\n    const consumeKi = (feature, allowNegative, allowHigher) => {\n        let hasAvailableResource = false;\n        let selected = features.find(o => o.name == feature);\n        let kiCost = selected.kiCost || 1;\n\n        // Look for Resources under the Core actor data\n        let resourceKey = Object.keys(actor.data.data.resources).filter(k => actor.data.data.resources[k].label === kiName).shift();\n        if (resourceKey && (actor.data.data.resources[resourceKey].value >= kiCost || allowNegative)) {\n            hasAvailableResource = true;\n            actor.data.data.resources[resourceKey].value -= kiCost;\n        }\n\n        // Look for Ki Points Feat that has uses\n        actor.items.filter(i => i.data.name === kiName && i.data.hasUses && (i.data.data.uses.value >= kiCost || allowNegative)).forEach(i => {\n            hasAvailableResource = true;\n            i.data.data.uses.value -= kiCost\n        })\n\n        if (!hasAvailableResource) {\n            ui.notifications.warn(`${actor.name} does not have any ${kiName} left!`);\n            return false;\n        }\n        if (actor.sheet.rendered) {\n            // Update the actor sheet if it is currently open\n            actor.render(true);\n        }\n\n        if (selected) {\n            selected.render(allowHigher);\n        }\n\n        return true;\n    };\n\n    (async () => {\n        let template = `\n        <form>\n            <div class=\"form-group\">\n                <label>Select feature:</label>\n                <select id=\"feature\" name=\"feature\">`\n        features.filter(o => o.requireLevel <= monkLevels).forEach(o => {\n            template += `<option value=\"${o.name}\">${o.name}</option>`;\n        });\n        template += `</select>\n            </div>\n            <div class=\"form-group\">\n                <label>Allow consuming Ki into negative? <input type=\"checkbox\" id=\"allow-negative\" name=\"allow-negative\" value=\"1\"></label>\n            </div>\n            <div class=\"form-group\">\n                <label>Allow consuming Ki feats of higher level? <input type=\"checkbox\" id=\"allow-higher\" name=\"allow-higher\" value=\"1\"></label>\n            </div>\n        </form>`;\n        new Dialog({\n            title: `Monk Ki Point Spender`,\n            content: template,\n            buttons: {\n                yes: {\n                    icon: \"<i class='fas fa-check'></i>\",\n                    label: `Apply`,\n                    callback: (html) => {\n                        let feature = html.find('#feature')[0].value;\n                        let allowNegative = html.find('#allow-negative')[0].checked;\n                        let allowHigher = html.find('#allow-higher')[0].checked;\n                        consumeKi(feature, allowNegative, allowHigher);\n                    }\n                },\n                no: {\n                    icon: \"<i class='fas fa-times'></i>\",\n                    label: `Cancel`\n                },\n            },\n            default: \"yes\"\n        }).render(true);\n    })();\n})()","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"qgGS0ynRrYn3Fl4T","name":"Delete filters on Selected","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":11100000,"flags":{},"scope":"global","command":"// Delete all filters on the selected tokens/tiles\r\nTokenMagic.deleteFiltersOnSelected();","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"qh8Tw65zMgeZsrEV","name":"Stealth Check","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":9000000,"flags":{},"scope":"global","command":"// Grabs selected tokens and rolls a stealth check against all other tokens passive perception on the map. Then returns the result.\n\n// getting all actors of selected tokens\nlet actors = canvas.tokens.controlled.map(({ actor }) => actor);\n\n// if there are no selected tokens, roll for the player's character.\nif (actors.length < 1) {\n  actors = game.users.entities.map(entity => {\n    if (entity.active && entity.character !== null) {\n      return entity.character;\n    }\n  });\n}\nconst validActors = actors.filter(actor => actor != null);\n\nlet messageContent = 'pp = passive perception<br>';\n\n// roll for every actor\nfor (const selectedActor of validActors) {\n  const stealthMod = selectedActor.data.data.skills.ste.total; // stealth roll\n  const stealth = new Roll(`1d20+${stealthMod}`).roll().total; // rolling the formula\n  messageContent += `<hr><h3>${selectedActor.name} stealth roll was a <b>${stealth}</b>.</h3>`; // creating the output string\n\n  // grab a list of unique tokens then check their passive perception against the rolled stealth.\n  const uniqueActor = {};\n  const caughtBy = canvas.tokens.placeables\n    .filter(token => !!token.actor)\n    .filter(({ actor }) => { // filter out duplicate token names. ie: we assume all goblins have the same passive perception\n      if (uniqueActor[actor.name]) {\n        return false;\n      }\n      uniqueActor[actor.name] = true;\n      return true;\n    })\n    .filter(({ actor }) => {\n      return selectedActor.id !== actor.id; // Don't check to see if the token sees himself.\n    })\n    .filter(({ actor }) => actor.data.data.skills.prc.passive >= stealth); // check map tokens passives with roller stealth\n\n  if (!caughtBy.length) {\n    messageContent += 'Stealth successful!<br>';\n  } else {\n    messageContent += 'Stealth questionable:<br>';\n    caughtBy.map(({ actor }) => {\n      messageContent += `<b>${actor.name}</b> pp(${actor.data.data.skills.prc.passive}).<br>`;\n    });\n  }\n}\n\n// create the message\nconst chatData = {\n  user: game.user._id,\n  speaker: game.user,\n  content: messageContent,\n  whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\n};\nChatMessage.create(chatData, {});\n","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"qmd2xS7CtshHBk5j","name":"ToggleIcon","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"(async ()=>{\nlet target = canvas.tokens.get(args[0]);\nlet img = args[1];\nif (args[2] === \"on\"){\n    await target.toggleEffect(img, {active : true}); \n}\nif (args[2] === \"off\"){\n    await target.toggleEffect(img, {active : false});\n}\n})();","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"qpsL5j2Z88eodUNU","name":"24 - T08 - Chromatic Bubble","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":11200000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    shieldType: 8,\r\n    gridPadding: 2,\r\n    color: 0x505050,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 1,\r\n    lightAlpha: 0,\r\n    lightSize: 0,\r\n    scale: 2,\r\n    radius: 1,\r\n    chromatic: true,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0045, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"r1CzAtcuAeWWwBcE","name":"Blink - spell","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":11300000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"MinorQOL.doRoll(event, \"Blink\", {type: \"spell\", versatile: false});","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/spells/wind-grasp-magenta-1.jpg","actorIds":[]}
{"_id":"rt2HounYPNS5ykKN","name":"animar trem","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"chat","sort":11400000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"/animate-pan 0 0 0","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"s7TrkBa2UDSKPyMN","name":"Measure Token Distances","permission":{"default":0,"OWUwMjUxOTE5MjE0":3,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":11500000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// This macro will measure the distance between the selected tokens\n// and every targetted tokens within a scene.\n// It will then output the measured distances to the chat\n// If called with an argument, determines who to whisper the message to,\n// otherwise sends it as a public message\n\nlet message = \"\"\nfor (let token of canvas.tokens.controlledTokens) {\n   let ruler = canvas.controls.ruler;\n   for (let target of game.user.targets) {\n       ruler.clear()\n       ruler.waypoints.push(token.center)\n       ruler.labels.addChild(new PIXI.Text(\"\"));\n       ruler.measure(target.center);\n       let distance = ruler.labels.children[0].text;\n       message += `From '${token.name}' to '${target.name}' : ${distance}<br/>`\n       ruler.clear();\n   }\n}\nif (message) {\n   const whisper = args[0] ? ChatMessage.getWhisperIDs(args[0]) : undefined;\n   ChatMessage.create({content: message, whisper});\n}","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/direction.svg","actorIds":[]}
{"_id":"sOGZhh0PitGIfUbH","name":"33 - T04 - Some Real Nuts Here! (transform)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":9100000,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"let params =\r\n    [{\r\n        filterType: \"transform\",\r\n        filterId: \"myTransform\",\r\n        padding: 200,\r\n        animated:\r\n        {\r\n            rotation:\r\n            {\r\n                clockWise: true,\r\n                loopDuration: 700,\r\n                animType: \"syncRotation\"\r\n            },\r\n            translationX:\r\n            {\r\n                animType: \"sinOscillation\",\r\n                val1: -0.25,\r\n                val2: +0.25\r\n            },\r\n            translationY:\r\n            {\r\n                animType: \"sinOscillation\",\r\n                val1: -0.125,\r\n                val2: +0.125,\r\n                loopDuration: 1500\r\n            },\r\n            scaleX:\r\n            {\r\n                animType: \"sinOscillation\",\r\n                val1: 0.5,\r\n                val2: 2.6,\r\n                loopDuration: 1200\r\n            },\r\n            scaleY:\r\n            {\r\n                animType: \"sinOscillation\",\r\n                val1: 0.5,\r\n                val2: 2.6,\r\n                loopDuration: 1200\r\n            }\r\n        }\r\n    }];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"sZKCuu1GuooqKuo6","name":"Narrate","permission":{"default":0,"AoaY7Qm0EqEvkIJr":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":9200000,"flags":{},"scope":"global","command":"/*\r\nThis macro creates a button wich reads the following paragraph as a narration (/narrate).\r\n*/\r\n\r\ntry {\r\n\tvar macroName = event.srcElement.closest('button,a')?.textContent.trim(),\r\n        macroText = event.srcElement.parentElement.innerText.trim().replace(macroName,'').trim();\r\n        if (macroText && event.srcElement.className == 'entity-link') {\r\n                Narrator.createSpecialChatMessage('narrate', macroText);\r\n        }\r\n}\r\ncatch(err) {\r\n\tconsole.error(err, \"Macro Narrate: failed to catch narration.\");\r\n}\r\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"tWE93K7HPbAn4Ev0","name":"04 - Outline","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":11600000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params = \r\n[{\r\n   filterType: \"outline\",\r\n   padding: 10,\r\n   color: 0x05B0B0,\r\n   thickness: 1,\r\n   quality: 10,\r\n   animated :\r\n   {\r\n      thickness: \r\n      { \r\n         active: true,\r\n         loopDuration: 1000,\r\n         animType: \"syncCosOscillation\",\r\n         val1: 1, \r\n         val2: 8\r\n      }\r\n   }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"tjtPm5VYNhPneM0u","name":"14 - Remove Shadow","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":11700000,"flags":{},"scope":"global","command":"// this simple filter remove pixels with a certain amount of alpha\r\n// it can be useful to remove shadows before using glow or outline filters.\r\n\r\nlet params =\r\n[{\r\n    filterType: \"zapshadow\",\r\n    alphaTolerance: 0.60\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"tmRjqiS9a04NX1wR","name":"Wand of Magic Detection (Replicate)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":9300000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"jkDskn1sHQDVDYI6\", \"wHV6tS4zxlDVfbO1\");","author":"ZTQ5MTU5OTJhOWMx","img":"systems/pf2e/icons/equipment/wands/magic-wands/magic-wand.jpg","actorIds":[]}
{"_id":"tve8mts9cYNpgQou","name":"D6 roll","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":9400000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"xIySk7UUw2JJzT3S\", \"pxx5YZ1myy4V2OyS\");","author":"OGI1ZmNiNjZhNWIz","img":"icons/svg/mystery-man.svg","actorIds":[]}
{"name":"35 - T05 - Black Fire (xfire)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"xfire\",\r\n    filterId: \"myBlackXFire\",\r\n    time: 0,\r\n    color: 0x707070,\r\n    blend: 11,\r\n    amplitude: 1,\r\n    dispersion: 2.2,\r\n    chromatic: false,\r\n    scaleX: 2.5,\r\n    scaleY: 2,\r\n    inlay: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: -0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"u8VFbh2j2WjXohPi"}
{"_id":"uCTzKYQwS2GLm7cw","name":"Hexcurse Pact Greatsword","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":10800000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Hexcurse Pact Greatsword\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/items/weapons/sword-great.jpg","actorIds":[]}
{"_id":"uDyjePDPrmxRZdd0","name":"Cure Wounds (Spell-Storing Item)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":11800000,"flags":{"dnd5e":{"itemMacro":true},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"BetterRolls.quickRollById(\"iTrdFFPm7BwR9Tpw\", \"vLRi7hLGaemSn2kO\");","author":"ZTQ5MTU5OTJhOWMx","img":"icons/svg/heal.svg","actorIds":[]}
{"_id":"uJhTN2f6n00XEQ4c","name":"Animate Object","permission":{"default":0,"OWUwMjUxOTE5MjE0":3,"jSIbaKrMQZ5trOzn":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"(async ()=> {\n  const values = {\n    Tiny : [20,18,8,`1d4 + 4`],\n    Small : [25,16,6,`1d8 + 2`],\n    Medium : [40 ,13,5,`2d6 + 1`],\n    Large : [50,10,6,`2d10 + 2`],\n    Huge : [80,10,8,`2d12 + 4`]\n  };\n\n  let target = Array.from(game.user.targets)[0];\n  if(!target) return;\n\n  let choice = await choose(Object.keys(values), `Choose object size : `);\n\n  let attack_modifier = values[choice][2], damage_dice = values[choice][3], { ac } = target.actor.data.data.attributes;\n\n  let attacks = Array(10)\n    .fill(0)\n    .map(e=> new Roll(`1d20 + ${attack_modifier}`).roll().total);\n  let damage = attacks\n    .filter(e=> e >= ac.value )\n    .map(e=> new Roll(`${damage_dice}`).roll().total )\n    .reduce( (acc,val) => acc+=val, 0);\n\n  ChatMessage.create({\n    /*flavor : `${character.name} casts animate objects!`,*/\n    content : `${choice} objects! <br> HP : ${values[choice][0]} / AC : ${values[choice][1]} <br> Attack : +${values[choice][2]} to hit, ${values[choice][3]} damage <br> Consolidated Damage done : ${damage}`,\n    speaker : ChatMessage.getSpeaker()\n  });\n})();\n\nasync function choose(options = [], prompt = ``)\n{\n  let value = await new Promise((resolve) => {\n\n    let dialog_options = (options[0] instanceof Array)\n      ? options.map(o => `<option value=\"${o[0]}\">${o[1]}</option>`).join(``)\n      : options.map(o => `<option value=\"${o}\">${o}</option>`).join(``);\n  \n    let content = `\n    <table style=\"width=100%\">\n      <tr><th>${prompt}</th></tr>\n      <tr><td><select id=\"choice\">${dialog_options}</select></td></tr>\n    </table>`;\n  \n    new Dialog({\n      content, \n      buttons : { OK : {label : `OK`, callback : async (html) => { resolve(html.find('#choice').val()); } } }\n    }).render(true);\n  });\n  return value;\n}","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"uXayBkndZDYd7oXW","name":"ActiveEffect","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//args[0] = token ID\n//args[1] = Name of Item in \"\" or update data\n//args[2] = \"add\", \"enable\", \"disable\" or \"remove\"\n(async ()=>{\nlet target = canvas.tokens.get(args[0]).actor;\nif (args[2] === \"remove\"){\nconsole.log(\"remove active effect\");\nlet effect_id = target.effects.entries.find(ef=> ef.data.label === args[1]).id;\nawait target.deleteEmbeddedEntity(\"ActiveEffect\", effect_id);\n}\nif (args[2] === \"disable\") {\nconsole.log(\"disable active effect\");\nlet effect_id = target.effects.entries.find(ef=> ef.data.label === args[1]).id;    \nawait target.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": effect_id,  \"disabled\" : true});\n}\nif (args[2] === \"enable\") {\nconsole.log(\"enable active effect\");\nlet effect_id = target.effects.entries.find(ef=> ef.data.label === args[1]).id;\nawait target.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": effect_id,  \"disabled\" : false});\n}\nif (args[2] === \"add\") {\nconsole.log(\"add active effect\");\nlet effect_data = args[1];\nawait target.createEmbeddedEntity(\"ActiveEffect\", effect_data);\n}    \n})();\n//usage\n// let ActiveEffect = game.macros.getName(\"ActiveEffect\");\n// ActiveEffect.execute(target, \"Name of Item\" or data if add, \"add\", \"enable\", \"disable\" or \"remove\");","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"uhFGIqT5DgafUmS8","name":"Greatsword of Life Stealing (DMG)","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":11900000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"tIjc1WtMeMkbc98k\", \"UgSGJUx7VLumGhhw\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/skills/violet_24.jpg","actorIds":[]}
{"_id":"ureEIeyjTy0pk7zs","name":"24 - T01 - Hexa Force Field","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":12000000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    shieldType: 2,\r\n    gridPadding: 0,\r\n    color: 0x900090,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 1,\r\n    lightAlpha: 0.75,\r\n    lightSize: 0.45,\r\n    scale: 2,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"uuZThgOdsfHuJYO7","name":"animate-pan","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":12100000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/* Pan the camera to the X, Y and scale positions.\r\n * See the 'pan-camera' macro for more details.\r\n * The first argument is the duration in milliseconds for the panning animation\r\n * The second argument is X, third argument is Y and fourth argument is the zoom level\r\n * Example: /animate-pan 500 1500 1500 0.5\r\n */\r\n\r\ncanvas.animatePan({duration: args[0], x: args[1], y: args[2], scale: args[3]})","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"uwqzlGzN27HsJA10","name":"Ex Rolar Tabela","permission":{"OWUwMjUxOTE5MjE0":3},"type":"script","sort":12200000,"flags":{},"scope":"global","command":"// Simple macro example to only roll from a table and whisper the result to the DM\r\n\r\nconst table = game.tables.entities.find(t => t.name === \"Art-Objects-25-GP\");\r\nlet roll = table.roll();\r\n\r\nlet chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: roll[1].text,\r\n    whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n};\r\nChatMessage.create(chatData, {});","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"vbGNrYUfNYgOj1k3","name":"26 - T03 - Drift in Plans (liquid+waves)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":9600000,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"wave\",\r\n    filterId: \"myDriftWaves\",\r\n    time: 0,\r\n    anchorX: 0.5,\r\n    anchorY: 0.5,\r\n    strength: 0.035,\r\n    frequency: 20,\r\n    color: 0xFFFFFF,\r\n    maxIntensity: 1.5,\r\n    minIntensity: 0.5,\r\n    padding:10,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0085, \r\n        animType: \"move\" \r\n      },\r\n      anchorX :\r\n      {\r\n        active: true,\r\n        val1: 0.35,\r\n        val2: 0.65,\r\n        animType: \"syncCosOscillation\",\r\n        loopDuration: 10000\r\n      },\r\n      anchorY :\r\n      {\r\n        active: true,\r\n        val1: 0.35,\r\n        val2: 0.65,\r\n        animType: \"syncSinOscillation\",\r\n        loopDuration: 10000\r\n      }\r\n    }\r\n},\r\n{\r\n    filterType: \"liquid\",\r\n    filterId: \"myDriftLiquid\",\r\n    color: 0xFF0000,\r\n    time: 0,\r\n    blend: 6,\r\n    intensity: 5,\r\n    spectral: false,\r\n    scale: 2.5,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.0018, \r\n          animType: \"move\" \r\n       },\r\n       color: \r\n       {\r\n          active: true, \r\n          loopDuration: 9000, \r\n          animType: \"colorOscillation\", \r\n          val1:0xFF0000, \r\n          val2:0xFFFFFF\r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"vsqGv48HDKZzjnja","name":"Ajuda Hex Crawl","permission":{"OWUwMjUxOTE5MjE0":3},"type":"script","sort":12300000,"flags":{},"scope":"global","command":"/*\r\nRequired Rollable Tables:\r\n*Wilderness Encounters*\r\n    coast\r\n    jungle1\r\n    jungle2\r\n    jungle3\r\n    mountains\r\n    rivers\r\n    ruins\r\n    swamp\r\n    wasteland\r\n\r\n*Other Tables*\r\n    weather\r\n    directions\r\n\r\n    cache\r\n    deadexplorers\r\n\r\nCache and Deadexplorers are not mandatory, but if you don't want them search the file for // CACHE LINES or // DEAD EXPLORER LINES and comment out the 2 lines below the comments\r\n\r\nExplanation of those tables:\r\nIf you have an encounter table that has the word cache in it, the cache table will be rolled automatically.\r\n    <br/><span id=\"cache\">The party finds a cache: </span>\r\nIf you have an encounter table that has DeadExplorers in it, the dead explorer table will be rolled automatically.\r\n    <br/><span id=\"DeadExplorers\">The party finds: </span> \r\n\r\n\r\nYou can have an automatic moving \"Actual Location\" Marker by creating a Token named \"Actual Location\" and placing it on your hex grid.\r\nThis will move if the players are \"Lost\". If the players are not lost it will not move.\r\n\r\n\r\n\r\n*/\r\n\r\n\r\n// Macro requires selecting a token to roll the survival check\r\n\r\nif (canvas.tokens.controlled.length === 0)\r\n    return ui.notifications.error(\"Please select the token of the Navigator!\");\r\n\r\nconst playerMarker = canvas.scene.data.tokens.find(a => a.name === 'Player Location');\r\nconst locationMarker = canvas.scene.data.tokens.find(a => a.name === 'Actual Location');\r\n\r\nconst gridSize = canvas.grid.size;\r\nconst vertical = gridSize * 0.866666;\r\nconst diagVertical = gridSize * 0.433333;\r\nconst diagHorizontal = gridSize * 0.75;\r\n\r\n// The option values below are the names of your rollable tables for each hex type. If these get changed here you will need to change them in the Survival Check DC section too!\r\n\r\nlet pace = 'none';\r\nnew Dialog({\r\n    title: `Hex Crawl Helper`,\r\n    content: `\r\n    <form>\r\n        <div class=\"form-group\">\r\n            <label>Hex Type:</label>\r\n            <select id=\"hex-type\" name=\"hex-type\">\r\n                <option value=\"coast\">Coast</option>\r\n                <option value=\"jungle1\">Jungle: No Undead</option>\r\n                <option value=\"jungle2\">Jungle: Lesser Undead</option>\r\n                <option value=\"jungle3\">Jungle: Greater Undead</option>\r\n                <option value=\"mountains\">Mountains</option>\r\n                <option value=\"rivers\">River</option>\r\n                <option value=\"ruins\">Ruins</option>\r\n                <option value=\"swamp\">Swamp</option>\r\n                <option value=\"wasteland\">Wasteland</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label>Travel Direction:</label>\r\n            <select id=\"travel-direction\" name=\"travel-direction\">\r\n                <option value=\"North\">North</option>\r\n                <option value=\"Northeast\">Northeast</option>\r\n                <option value=\"Southeast\">Southeast</option>\r\n                <option value=\"South\">South</option>\r\n                <option value=\"Southwest\">Southwest</option>\r\n                <option value=\"Northwest\">Northwest</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label>Travel Type:</label>\r\n            <select id=\"travel-type\" name=\"travel-type\">\r\n                <option value=\"on-foot\">On Foot</option>\r\n                <option value=\"canoe\">By Canoe</option>\r\n            </select>\r\n        </div>\r\n    </form>\r\n    `,\r\n    buttons: {\r\n        slow: {\r\n            icon: \"<i class='fas fa-user-ninja'></i>\",\r\n            label: `Slow Pace`,\r\n            callback: () => pace = 'slow'\r\n        },\r\n        average: {\r\n            icon: \"<i class='fas fa-hiking'></i>\",\r\n            label: `Average Pace`,\r\n            callback: () => pace = 'average'\r\n        },\r\n        fast: {\r\n            icon: \"<i class='fas fa-running'></i>\",\r\n            label: `Fast Pace`,\r\n            callback: () => pace = 'fast'\r\n        }\r\n    },\r\n    default: \"average\",\r\n    close: html => {\r\n        // set variables\r\n        let hexType = html.find('[name=\"hex-type\"]')[0].value;\r\n        let travelType = html.find('[name=\"travel-type\"]')[0].value;\r\n        let playerDirection = html.find('[name=\"travel-direction\"]')[0].value;\r\n        const weatherTable = game.tables.entities.find(t => t.name === \"weather\");\r\n        const directionTable = game.tables.entities.find(t => t.name === \"directions\");\r\n        const cacheTable = game.tables.entities.find(t => t.name === \"cache\");\r\n        const deadExplorerTable = game.tables.entities.find(t => t.name === \"deadexplorers\");\r\n        const encounterTable = game.tables.entities.find(t => t.name === hexType);\r\n        let weatherRoll = weatherTable.roll()[1].text;\r\n        let lostDirection = directionTable.roll()[1].text;\r\n        let msgContent = '<strong>Weather</strong> ' + weatherRoll + '<br/><br/>';\r\n        let navigator = Actors.instance.get(canvas.tokens.controlled[0].data.actorId);\r\n        let wis = navigator.data.data.abilities.wis.mod;\r\n        let survival = new Roll(`1d20`).roll().total + wis;\r\n        let slowPace = new Roll(`1d4`).roll().total;\r\n        let fastPace = new Roll(`1d2`).roll().total;\r\n        let hexesMoved = 1;\r\n        let encounter = '';\r\n        let hexText = 'hexes';\r\n\r\n        if (travelType === 'canoe') {\r\n            hexesMoved++;\r\n        }\r\n\r\n        // build pace message and hex movement\r\n        if (pace === 'slow') {\r\n            if (slowPace === 1)\r\n                hexesMoved--;\r\n            if (hexesMoved === 1)\r\n                hexText = 'hex';\r\n            msgContent += '<strong>Slow pace:</strong> Can hide from encounters or approach stealthily.<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\r\n            survival += 5;\r\n        } else if (pace === 'average') {\r\n            if (hexesMoved === 1)\r\n                hexText = 'hex';\r\n            msgContent += '<strong>Average pace:</strong> For rivers, upstream and downstream have no effect, and waterfalls occur every 10 to 20 miles (requiring portage of canoes).<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\r\n        } else if (pace === 'fast') {\r\n            if (fastPace === 1)\r\n                hexesMoved++;\r\n            if (hexesMoved === 1)\r\n                hexText = 'hex';\r\n            msgContent += '<strong>Fast pace:</strong> -5 to passive Perception.<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\r\n            survival -= 5;\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        // Survival Check DC for each hex type. If selected token rolls under DC the party is lost!\r\n        if (((hexType === 'coast' || hexType === 'ruins') && survival < 10) || ((hexType === 'jungle1' || hexType === 'jungle2' || hexType === 'jungle3' || hexType === 'mountains' || hexType === 'rivers' || hexType === 'swamp' || hexType === 'wasteland') && survival < 15)) {\r\n            msgContent += '<strong>Party is Lost:</strong> Move actual location ' + hexesMoved + ' ' + hexText + ' to the ' + lostDirection + '<br/><br/>';\r\n            if (locationMarker) {\r\n                const locToken = canvas.tokens.get(locationMarker._id);\r\n                switch (lostDirection) {\r\n                    case 'South':\r\n                        locToken.update({\r\n                            x: locToken.x,\r\n                            y: locToken.y + (vertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Southwest':\r\n                        locToken.update({\r\n                            x: locToken.x - (diagHorizontal * hexesMoved),\r\n                            y: locToken.y + (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Southeast':\r\n                        locToken.update({\r\n                            x: locToken.x + (diagHorizontal * hexesMoved),\r\n                            y: locToken.y + (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'North':\r\n                        locToken.update({\r\n                            x: locToken.x,\r\n                            y: locToken.y - (vertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Northwest':\r\n                        locToken.update({\r\n                            x: locToken.x - (diagHorizontal * hexesMoved),\r\n                            y: locToken.y - (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Northeast':\r\n                        locToken.update({\r\n                            x: locToken.x + (diagHorizontal * hexesMoved),\r\n                            y: locToken.y - (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            if (playerMarker) {\r\n                const playerToken = canvas.tokens.get(playerMarker._id);\r\n                switch (playerDirection) {\r\n                    case 'South':\r\n                        playerToken.update({\r\n                            x: playerToken.x,\r\n                            y: playerToken.y + (vertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Southwest':\r\n                        playerToken.update({\r\n                            x: playerToken.x - (diagHorizontal * hexesMoved),\r\n                            y: playerToken.y + (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Southeast':\r\n                        playerToken.update({\r\n                            x: playerToken.x + (diagHorizontal * hexesMoved),\r\n                            y: playerToken.y + (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'North':\r\n                        playerToken.update({\r\n                            x: playerToken.x,\r\n                            y: playerToken.y - (vertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Northwest':\r\n                        playerToken.update({\r\n                            x: playerToken.x - (diagHorizontal * hexesMoved),\r\n                            y: playerToken.y - (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Northeast':\r\n                        playerToken.update({\r\n                            x: playerToken.x + (diagHorizontal * hexesMoved),\r\n                            y: playerToken.y - (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        } else {\r\n            if (playerMarker && locationMarker) {\r\n                const locToken = canvas.tokens.get(locationMarker._id);\r\n                const playerToken = canvas.tokens.get(playerMarker._id);\r\n\r\n                switch (playerDirection) {\r\n                    case 'South':\r\n                        playerToken.update({\r\n                            x: locToken.x,\r\n                            y: locToken.y + (vertical * hexesMoved)\r\n                        });\r\n                        locToken.update({\r\n                            x: locToken.x,\r\n                            y: locToken.y + (vertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Southwest':\r\n                        playerToken.update({\r\n                            x: locToken.x - (diagHorizontal * hexesMoved),\r\n                            y: locToken.y + (diagVertical * hexesMoved)\r\n                        });\r\n                        locToken.update({\r\n                            x: locToken.x - (diagHorizontal * hexesMoved),\r\n                            y: locToken.y + (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Southeast':\r\n                        playerToken.update({\r\n                            x: locToken.x + (diagHorizontal * hexesMoved),\r\n                            y: locToken.y + (diagVertical * hexesMoved)\r\n                        });\r\n                        locToken.update({\r\n                            x: locToken.x + (diagHorizontal * hexesMoved),\r\n                            y: locToken.y + (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'North':\r\n                        playerToken.update({\r\n                            x: locToken.x,\r\n                            y: locToken.y - (vertical * hexesMoved)\r\n                        });\r\n                        locToken.update({\r\n                            x: locToken.x,\r\n                            y: locToken.y - (vertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Northwest':\r\n                        playerToken.update({\r\n                            x: locToken.x - (diagHorizontal * hexesMoved),\r\n                            y: locToken.y - (diagVertical * hexesMoved)\r\n                        });\r\n                        locToken.update({\r\n                            x: locToken.x - (diagHorizontal * hexesMoved),\r\n                            y: locToken.y - (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    case 'Northeast':\r\n                        playerToken.update({\r\n                            x: locToken.x + (diagHorizontal * hexesMoved),\r\n                            y: locToken.y - (diagVertical * hexesMoved)\r\n                        });\r\n                        locToken.update({\r\n                            x: locToken.x + (diagHorizontal * hexesMoved),\r\n                            y: locToken.y - (diagVertical * hexesMoved)\r\n                        });\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        msgContent += '<strong>Morning Encounter:</strong> ';\r\n\r\n        if (new Roll(`1d20`).roll().total > 15) {\r\n            encounter = encounterTable.roll()[1].text;\r\n            msgContent += encounter;\r\n            // CACHE LINES comment out the next 2 lines if you don't want to use a cache table!\r\n            if (encounter.indexOf('cache') > -1)\r\n                msgContent += cacheTable.roll()[1].text + '<br/><br/>';\r\n            // DEAD EXPLORER LINES comment out the next 2 lines if you don't want to use a dead explorer table!\r\n            if (encounter.indexOf('DeadExplorers') > -1)\r\n                msgContent += deadExplorerTable.roll()[1].text + '<br/><br/>';\r\n            msgContent += '<strong>Afternoon Encounter:</strong> ';\r\n        } else {\r\n            msgContent += 'None.<br/><br/><strong>Afternoon Encounter:</strong> ';\r\n        }\r\n\r\n        if (new Roll(`1d20`).roll().total > 15) {\r\n            encounter = encounterTable.roll()[1].text;\r\n            msgContent += encounter;\r\n            // CACHE LINES comment out the next 2 lines if you don't want to use a cache table!\r\n            if (encounter.indexOf('cache') > -1)\r\n                msgContent += cacheTable.roll()[1].text + '<br/><br/>';\r\n            // DEAD EXPLORER LINES comment out the next 2 lines if you don't want to use a dead explorer table!\r\n            if (encounter.indexOf('DeadExplorers') > -1)\r\n                msgContent += deadExplorerTable.roll()[1].text + '<br/><br/>';\r\n            msgContent += '<strong>Evening Encounter:</strong> ';\r\n        } else {\r\n            msgContent += 'None.<br/><br/><strong>Evening Encounter:</strong> ';\r\n        }\r\n\r\n        if (new Roll(`1d20`).roll().total > 15) {\r\n            encounter = encounterTable.roll()[1].text;\r\n            msgContent += encounter;\r\n            // CACHE LINES comment out the next 2 lines if you don't want to use a cache table!\r\n            if (encounter.indexOf('cache') > -1)\r\n                msgContent += cacheTable.roll()[1].text + '<br/><br/>';\r\n            // DEAD EXPLORER LINES comment out the next 2 lines if you don't want to use a dead explorer table!\r\n            if (encounter.indexOf('DeadExplorers') > -1)\r\n                msgContent += deadExplorerTable.roll()[1].text + '<br/><br/>';\r\n        } else {\r\n            msgContent += 'None.';\r\n        }\r\n\r\n        // create the message\r\n        let chatData = {\r\n            content: msgContent,\r\n            whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n        };\r\n        ChatMessage.create(chatData, {});\r\n    }\r\n}).render(true);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"w3DSLWOe5zJcKjiR","name":"Show Active/Passive Effects","permission":{"default":0,"devnIbfBHb74U9Zv":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":12400000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"for ( let token of canvas.tokens.controlled ){\r\nDynamicEffects.effects(event.shiftKey, {token, activeOnly: false});\r\n}","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"wPo8ZEvIohY48IvF","name":"35 - T04 - Cold Fire (xfire)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":9700000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"xfire\",\r\n    filterId: \"myColdXFire\",\r\n    time: 0,\r\n    color: 0xBBDDEE,\r\n    blend: 1,\r\n    amplitude: 1,\r\n    dispersion: 0,\r\n    chromatic: false,\r\n    scaleX: 1,\r\n    scaleY: 1,\r\n    inlay: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: -0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"wRayXa6MYxNI0iK2","name":"27 - T03 - Ugly Villains Aura (xglow)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":9800000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"zapshadow\",\r\n    filterId: \"myUglyZapShadow\",\r\n    alphaTolerance: 0.50\r\n},\r\n{\r\n    filterType: \"xglow\",\r\n    filterId: \"myUglyGlow\",\r\n    auraType: 2,\r\n    color: 0x050505,\r\n    thickness: 2.7,\r\n    scale: 7,\r\n    time: 0,\r\n    auraIntensity: 5,\r\n    subAuraIntensity: 2,\r\n    threshold: 0.08,\r\n    discard: false,\r\n    animated:\r\n    {\r\n        time : \r\n        {  \r\n           active: true,\r\n           speed: 0.0012, \r\n           animType: \"move\" \r\n        },\r\n        auraIntensity:\r\n        {\r\n           active: true,\r\n           loopDuration: 3000, \r\n           animType: \"syncCosOscillation\", \r\n           val1:5, \r\n           val2:0\r\n        },\r\n        subAuraIntensity:\r\n        {\r\n           active: true,\r\n           loopDuration: 3000, \r\n           animType: \"syncCosOscillation\", \r\n           val1:2, \r\n           val2:0\r\n        },\r\n        color:\r\n        {\r\n           active: true,\r\n           loopDuration: 6000, \r\n           animType: \"syncColorOscillation\", \r\n           val1:0x050505, \r\n           val2:0x200000\r\n        },\r\n        threshold:\r\n        {\r\n           active: true,\r\n           loopDuration: 1500, \r\n           animType: \"syncCosOscillation\", \r\n           val1:0.02, \r\n           val2:0.50\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"wboXMhJQSDGXJofT","name":"Critico 20","permission":{"default":0,"OWUwMjUxOTE5MjE0":3,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":9900000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"actor.unsetFlag('dnd5e', 'weaponCriticalThreshold')\nactor.unsetFlag('dnd5e', 'spellCriticalThreshold')\nlet msgContent = \"Crítico 19 Desativado\";\nlet chatData = {\n  user:  game.user.id,\n  speaker: game.user,\n  content:  msgContent,\n  whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\n};\nChatMessage.create(chatData,{});","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/d20-highlight.svg","actorIds":[]}
{"_id":"wixSgvG1BdCfAISv","name":"Link Token To Actor","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":100001,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let tokenName = _token.data.name;\nlet findActorName = ActorDirectory.collection.find(i => i.name == tokenName);\nlet actorName = findActorName ? findActorName.data.name : null;\nlet newActorId = findActorName ? findActorName.data._id : null;\nlet newActorImg = findActorName ? findActorName.data.token.img : null;\n\nlet noId = canvas.tokens.placeables.filter(t => t.data.actorId == \"\" && t.data.name == tokenName);\nlet mappedNoId = noId.map(n => {\n  return {\n    _id: n.data._id,\n    actorId: newActorId,\n    img: newActorImg,\n    \"bar1.attribute\": \"attributes.hp\",\n    \"displayName\": CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER,\n    \"displayBars\": CONST.TOKEN_DISPLAY_MODES.OWNER,\n  }\n});\ncanvas.tokens.updateMany(mappedNoId);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/padlock.svg","actorIds":[]}
{"_id":"wrIsp8AjfrWbq1Eu","name":"Hurl Flame","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":10000000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Hurl Flame\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/skills/fire_12.jpg","actorIds":[]}
{"_id":"x0Nf4FEI57i5Xc8g","name":"Bite","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":10100000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Bite\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/skills/beast_02.jpg","actorIds":[]}
{"_id":"xNzELbJnkHMzIBzH","name":"Na Mocada","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":12500000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// getting all actors of selected tokens\r\nlet actors = canvas.tokens.controlledTokens.map(({ actor }) => actor);\r\n\r\n// if there are no selected tokens, roll for the player's character.\r\nif (actors.length < 1) {\r\n  actors = game.users.entities.map(entity => {\r\n    if (entity.active && entity.character !== null) {\r\n      return entity.character;\r\n    }\r\n  });\r\n}\r\nconst validActors = actors.filter(actor => actor != null);\r\n\r\nlet messageContent = 'pp = passive perception<br>';\r\n\r\n// roll for every actor\r\nfor (const selectedActor of validActors) {\r\n  const stealthMod = selectedActor.data.data.skills.ste.mod; \r\n  const stealth = new Roll(`1d20+${stealthMod}`).roll().total; \r\n  messageContent += `<hr><h3>${selectedActor.name} stealth roll was a <b>${stealth}</b>.</h3>`;\r\n\r\n  // grab a list of unique tokens then check their passive perception against the rolled stealth.\r\n  const uniqueActor = {};\r\n  const caughtBy = canvas.tokens.placeables\r\n    .filter((token) => { // filter out duplicate token names. ie: we assume all goblins have the same passive perception\r\n      if (uniqueActor[token.actor.name]) {\r\n        return false;\r\n      }\r\n      uniqueActor[token.actor.name] = true;\r\n      return true;\r\n    })\r\n    .filter(token => {\r\n      return selectedActor.id !== token.actor.id; // Don't check to see if the token sees himself.\r\n    })\r\n    .filter(({ actor }) => actor.data.data.skills.prc.passive >= stealth); // check map tokens passives with roller stealth\r\n\r\n  if (!caughtBy.length) {\r\n    messageContent += 'Stealth successful!<br>';\r\n  } else {\r\n    messageContent += 'Stealth questionable:<br>';\r\n    caughtBy.map(({ actor }) => {\r\n      messageContent += `<b>${actor.name}</b> pp(${actor.data.data.skills.prc.passive}).<br>`;\r\n    });\r\n  }\r\n}\r\n\r\n// create the message\r\nconst chatData = {\r\n  user: game.user._id,\r\n  speaker: game.user,\r\n  content: messageContent,\r\n  whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\r\n};\r\nChatMessage.create(chatData, {});","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"xeis9PbTWgT9A5nK","name":"Remover Condição","permission":{"OWUwMjUxOTE5MjE0":3},"type":"script","sort":12600000,"flags":{},"scope":"global","command":"for ( let token of canvas.tokens.controlled ){\r\n  await token.update({\"effects\": []});\r\n}\r\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"yPT43Jf12OII4tXM","name":"35 - T02 - Chromatic Fire (xfire)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":10200000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"xfire\",\r\n    filterId: \"myChromaticXFire\",\r\n    time: 0,\r\n    blend: 2,\r\n    amplitude: 1.1,\r\n    dispersion: 0,\r\n    chromatic: true,\r\n    scaleX: 1,\r\n    scaleY: 1,\r\n    inlay: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: -0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"ybt6cglHWrCtTo78","name":"16 - Inner Fog","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":12700000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"fog\",\r\n    color: 0xFFFFFF,\r\n    density: 0.45,\r\n    time: 0,\r\n    dimX: 1,\r\n    dimY: 1,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 1.2, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"yfoXFJV3AxJAy7f6","name":"Wandering Monsters","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":12800000,"flags":{},"scope":"global","command":"// setting variables\nlet tableName = \"Wandering Monsters\";\nlet msgContent = 'Wandering Monster roll was: ';\nlet result = '';\n\n// roll to check for wandering monster\nresult = new Roll(`1d20`).roll().total;\n\n// create the message\nif(result !== '') {\n  let chatData = {\n    content: msgContent + result,\n    whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\n  };\n  ChatMessage.create(chatData, {});\n}\n\n// In this example, a roll between 17-20 will generate a roll from the Table. Tweak as needed!\nif (result >= 17) {\n  const table = game.tables.entities.find(t => t.name === tableName);\n  table.draw();\n}\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"yg75oOytRG1aOlqy","name":"23 - T01 - Mirror Images","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":10300000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"images\",\r\n    filterId: \"myMirrorImages\",\r\n    time: 0,\r\n    nbImage: 4,\r\n    alphaImg: 1.0,\r\n    alphaChr: 0.0,\r\n    blend: 4,\r\n    ampX: 0.10,\r\n    ampY: 0.10,\r\n    zOrder: 20,\r\n    animated :\r\n    {\r\n      time: \r\n      { \r\n        active: true, \r\n        speed: 0.0010, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"yotgwt6oxiXtaniR","name":"10 - BulgePinch","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":12900000,"flags":{},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"bulgepinch\",\r\n    padding: 150,\r\n    strength: 0,\r\n    zIndex: 2,\r\n    radiusPercent: 200,\r\n    animated:\r\n    {\r\n        strength: \r\n        { \r\n           active: true, \r\n           animType: \"cosOscillation\", \r\n           loopDuration: 2000, \r\n           val1: 0, \r\n           val2: 0.8\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Eldritch Blast","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":100001,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Eldritch Blast\");","author":"OGI1ZmNiNjZhNWIz","img":"modules/plutonium/media/icon/spell/phb-eldritch-blast.jpg","actorIds":[],"_id":"z5FE6vSPwgvbZ4sY"}
{"_id":"z6JDvxV9093Sfiwi","name":"00 - A - Delete filters on Selected","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":10400000,"flags":{},"scope":"global","command":"// Delete all filters on the selected tokens/tiles\nTokenMagic.deleteFiltersOnSelected();","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"zPpR9bfNStVJo0OH","name":"Armor of Hexes","permission":{"default":0,"OGI1ZmNiNjZhNWIz":3},"type":"script","sort":10500000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Armor of Hexes\");","author":"OGI1ZmNiNjZhNWIz","img":"systems/dnd5e/icons/skills/violet_15.jpg","actorIds":[]}
{"_id":"zRPlpk53PobOFJQK","name":"Wand of Magic Detection (Replicate)","permission":{"default":0,"ZTQ5MTU5OTJhOWMx":3},"type":"script","sort":13000000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"iTrdFFPm7BwR9Tpw\", \"EHZ6dhzakprgOr2Z\");","author":"ZTQ5MTU5OTJhOWMx","img":"worlds/herois-de-waterdeep/characters/186_-_Zaak/token.png","actorIds":[]}
{"_id":"zXHCRTDRcNCBLTV3","name":"Edicao Rapida Luz Ambiente","permission":{"OWUwMjUxOTE5MjE0":3},"type":"script","sort":13100000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let macroName = \"AmbientLight QuickEditor\"\nlet macroEndLog = \"---------------------------------------------\"\n\nlet i=0;\nlet lights = canvas.lighting.objects.children;\nlet lightSelected = lights[0];\nlet selectOptions = \"\";\nlet lightSelectedAngle = 0;\nlet lightSelectedBright = 0;\nlet lightSelectedDim = 0;\nlet lightSelectedRotation = 0;\nlet lightSelectedTintAlpha = 1;\nlet lightSelectedTintColor = \"\";\n\nconsole.log(\"---------------------------------------------\");\nconsole.log(`${macroName} by PaperPunk`);\nconsole.log(\"---------------------------------------------\");\nconsole.log(`${macroName} | Start`);\n\nconst drawingDetails = {\n      author: game.user._id,\n      fillAlpha: 0,\n      fillColor: \"#808080\",\n      fillType: 1,\n      fontFamily: \"FontAwesome\",\n      fontSize: 24,\n      height: 48,\n      hidden: false,\n      locked: false,\n      rotation: 0,\n      strokeAlpha: 1,\n      strokeColor: \"#000000\",\n      strokeWidth: 2,\n      text: i,\n      textAlpha: 1,\n      textColor: \"#ffffff\",\n      type: \"r\",\n      width: 48,\n      //x: 250,\n      x: lightSelected.x-24,\n      //y: 250\n      y: lightSelected.y+25\n};\n\n//let d = Drawing.create(drawingDetails);\n//d.update({\"x\": lights[i].x-24, \"y\": lights[i].y+25, \"text\": i});\n\nfor (i= 0; i< lights.length; i++) {\n selectOptions += `<option value=\"${i}\">AmbientLight ${i}</option>`;\n}\n\nconst htmlLightSelection = `\n    <form>\n      <h2>Select your light.</h2>\n      <div class=\"form-group\">\n        <label>Light:</label>\n        <select id=\"light-selector\" name=\"light-selector\">\n          ${selectOptions}\n        </select>\n      </div>\n    </form>\n    `;\n\nlet dialogSelector = new Dialog({\n  title: `${macroName}`,\n  content: htmlLightSelection,\n  buttons: {\n    confirm: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Confirm`,\n      callback: htmlLightSelection => { \n        lightSelected = (htmlLightSelection.find('[name=\"light-selector\"]')[0].value)\n        lightSelectedAngle = lights[lightSelected].data.angle;\n        lightSelectedBright = lights[lightSelected].data.bright;\n        lightSelectedDim = lights[lightSelected].data.dim;\n        lightSelectedRotation = lights[lightSelected].data.rotation;\n        lightSelectedTintAlpha = lights[lightSelected].data.tintAlpha;\n        lightSelectedTintColor = lights[lightSelected].data.tintColor;\n        //console.log(`${macroName} | lightSelected = ${lightSelected}`);\n        //console.log(`${macroName} | lightSelectedBright = ${lightSelectedBright}`);\n        dialogEditor.render(true);\n      }\n    },\n    cancel: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel`,\n      callback: () => {\n        console.log(`${macroName} | Goodbye`);\n        console.log(macroEndLog);\n      }\n    },\n  },\n  default: \"cancel\",\n  //close: () => console.log(\"AmbientLight QuickEditor | Dialog Window Closed\")\n});\n\nlet dialogEditor = new Dialog({\n  title: `${macroName}`,\n  content: `<h2>Edit your light.</h2>\n      <p>Emission Angle: ${lightSelectedAngle}</p>\n      <p>Bright light distance: ${lightSelectedBright}</p>\n      <p>Dim light distance: ${lightSelectedDim}</p>\n      <p>Rotation CW from down: ${lightSelectedRotation}</p>\n      <p>Tint Alpha: ${lightSelectedAngle}</p>\n      <p>Tint Color HexCode: ${lightSelectedAngle}</p>`,\n  buttons: {\n    rot5cw: {\n      icon: \"<i class='fas fa-redo'></i>\",\n      label: `Rotate 5* CW`,\n      callback: () => { \n        let rot = lights[lightSelected].data.rotation;\n        lights[lightSelected].update({\"rotation\":rot+5});\n        dialogEditor.render(true);\n      }\n    },\n    rot15cw: {\n      icon: \"<i class='fas fa-redo'></i>\",\n      label: `Rotate 15* CW`,\n      callback: () => { \n        let rot = lights[lightSelected].data.rotation;\n        lights[lightSelected].update({\"rotation\":rot+15});\n        dialogEditor.render(true);\n      }\n    },\n    rot45cw: {\n      icon: \"<i class='fas fa-redo'></i>\",\n      label: `Rotate 45* CW`,\n      callback: () => { \n        let rot = lights[lightSelected].data.rotation;\n        lights[lightSelected].update({\"rotation\":rot+45});\n        dialogEditor.render(true);\n      }\n    },\n    rot5ccw: {\n      icon: \"<i class='fas fa-undo'></i>\",\n      label: `Rotate 5* CCW`,\n      callback: () => { \n        let rot = lights[lightSelected].data.rotation;\n        lights[lightSelected].update({\"rotation\":rot-5});\n        dialogEditor.render(true);\n      }\n    },\n    rot15ccw: {\n      icon: \"<i class='fas fa-undo'></i>\",\n      label: `Rotate 15* CCW`,\n      callback: () => { \n        let rot = lights[lightSelected].data.rotation;\n        lights[lightSelected].update({\"rotation\":rot-15});\n        dialogEditor.render(true);\n      }\n    },\n    rot45ccw: {\n      icon: \"<i class='fas fa-undo'></i>\",\n      label: `Rotate 45* CCW`,\n      callback: () => { \n        let rot = lights[lightSelected].data.rotation;\n        lights[lightSelected].update({\"rotation\":rot-45});\n        dialogEditor.render(true);\n      }\n    },\n    brightup: {\n      icon: \"<i class='fas fa-circle'></i>\",\n      label: `Increase Bright by 5`,\n      callback: () => { \n        let bright = lights[lightSelected].data.bright;\n        lights[lightSelected].update({\"bright\":bright+5});\n        dialogEditor.render(true);\n      }\n    },\n    brightdown: {\n      icon: \"<i class='fas fa-circle'></i>\",\n      label: `Decrease Bright by 5`,\n      callback: () => { \n        let bright = lights[lightSelected].data.bright;\n        lights[lightSelected].update({\"bright\":bright-5});\n        dialogEditor.render(true);\n      }\n    },\n    brightoff: {\n      icon: \"<i class='fas fa-circle'></i>\",\n      label: `Remove Bright Light`,\n      callback: () => { \n        lights[lightSelected].update({\"bright\":0});\n        dialogEditor.render(true);\n      }\n    },\n    dimup: {\n      icon: \"<i class='fas fa-dot-circle'></i>\",\n      label: `Increase Dim by 5`,\n      callback: () => { \n        let dim = lights[lightSelected].data.dim;\n        lights[lightSelected].update({\"dim\":dim+5});\n        dialogEditor.render(true);\n      }\n    },\n    dimdown: {\n      icon: \"<i class='fas fa-dot-circle'></i>\",\n      label: `Decrease Dim by 5`,\n      callback: () => { \n        let dim = lights[lightSelected].data.dim;\n        lights[lightSelected].update({\"dim\":dim-5});\n        dialogEditor.render(true);\n      }\n    },\n    dimoff: {\n      icon: \"<i class='fas fa-dot-circle'></i>\",\n      label: `Remove Dim Light`,\n      callback: () => { \n        lights[lightSelected].update({\"dim\":0});\n        dialogEditor.render(true);\n      }\n    },\n    emit15: {\n      icon: \"<i class='fas fa-rss'></i>\",\n      label: `Emission Angle 15*`,\n      callback: () => { \n        lights[lightSelected].update({\"angle\":15});\n        dialogEditor.render(true);\n      }\n    },\n    emit45: {\n      icon: \"<i class='fas fa-rss'></i>\",\n      label: `Emission Angle 45*`,\n      callback: () => { \n        lights[lightSelected].update({\"angle\":45});\n        dialogEditor.render(true);\n      }\n    },\n    emit90: {\n      icon: \"<i class='fas fa-rss'></i>\",\n      label: `Emission Angle 90*`,\n      callback: () => { \n        lights[lightSelected].update({\"angle\":90});\n        dialogEditor.render(true);\n      }\n    },\n    emit180: {\n      icon: \"<i class='fas fa-rss'></i>\",\n      label: `Emission Angle 180*`,\n      callback: () => { \n        lights[lightSelected].update({\"angle\":180});\n        dialogEditor.render(true);\n      }\n    },\n    emit270: {\n      icon: \"<i class='fas fa-rss'></i>\",\n      label: `Emission Angle 270*`,\n      callback: () => { \n        lights[lightSelected].update({\"angle\":270});\n        dialogEditor.render(true);\n      }\n    },\n    emit360: {\n      icon: \"<i class='fas fa-rss'></i>\",\n      label: `Emission Angle 360*`,\n      callback: () => { \n        lights[lightSelected].update({\"angle\":360});\n        dialogEditor.render(true);\n      }\n    },\n    back: {\n      icon: \"<i class='fas fa-reply'></i>\",\n      label: `Back`,\n      callback: () => dialogSelector.render(true)\n    },\n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Close`\n    },\n  },\n  default: \"close\",\n  close: () => {\n    console.log(`${macroName} | Goodbye`);\n    console.log(macroEndLog);\n  }\n});\n\ndialogSelector.render(true);\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"zaSJwhW9D6aFLFbn","name":"Shield","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":10600000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//type the name of the EFFECT present on an actor to toggle it\nlet dae_effect = async function() {\nconst effect_name = \"Shield\";\nconst effect = token.actor.effects.entries;\nfor (let i = 0; i < effect.length; i++){\n     let condition = effect[i].data.label;\n     let status = effect[i].data.disabled;\n     let effect_id = effect[i].data._id;\n     if ((condition === effect_name) && (status === false)) {\n        await token.actor.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": effect_id,  \"disabled\" : true});\n     }\n     if ((condition === effect_name) && (status === true)){\n        await token.actor.updateEmbeddedEntity(\"ActiveEffect\", {\"_id\": effect_id,  \"disabled\" : false});\n    }\n}\n}\ndae_effect();\ntoken.toggleEffect(\"systems/dnd5e/icons/spells/protect-magenta-2.jpg\")","author":"OWUwMjUxOTE5MjE0","img":"systems/dnd5e/icons/spells/protect-magenta-2.jpg","actorIds":[]}
{"_id":"zaUidw2eHm67qUYX","name":"31 - T01 - Glowing Globes (globes)","permission":{"default":0,"Njc5YzFjZDI5NjZl":3,"Mzk1ODQ2OTgwNmJk":3},"type":"script","sort":10700000,"flags":{},"scope":"global","command":"let params = \r\n[{\r\n    filterType: \"globes\",\r\n    filterId: \"glowingGlobes\",\r\n    time: 0,\r\n    color: 0x5099DD,\r\n    distortion: 0.4,\r\n    scale: 80,\r\n    alphaDiscard: false,\r\n    zOrder: 1,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0005, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}]\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"Mzk1ODQ2OTgwNmJk","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"ziE7LXz1Th0kXJwb","name":"Toll the Dead","permission":{"default":0,"NDAwODQ0YzA2ODM1":3},"type":"script","sort":13200000,"flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"MLwpZTVAEwVSGhKu\", \"3Gb2AcHhEY4g2EnJ\");","author":"NDAwODQ0YzA2ODM1","img":"modules/plutonium/media/icon/scroll-unfurled.svg","actorIds":[]}
{"_id":"zkVrHsZvRwY8H1xO","name":"pan-camera","permission":{"FRJk2q4bH9IdLZDf":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":13300000,"flags":{},"scope":"global","command":"// Pan the canvas camera to a position X and Y, in pixels.\r\n// Can also set the zoom level using the third optional argument.\r\n// Example: /pan-camera 1500\r\n// Example: /pan-camera 2500 2000 0.3\r\n\r\ncanvas.pan({x: args[0], y: args[1], scale: args[2]})","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"zpmHs9C59oD7fEtC","name":"Hunters Mark - Mark Attack Wrapper","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":13400000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"//This marco is replacement for a rollItemMacro. Replace the name of the item\n//you wish to use to make the attack. This macro must be used with the\n//CastMark.json macro or it will just make a standard attack.\n\n// PUT ITEM MACRO HERE between quotes ****************\nconst itemName = \"Greatsword of Life Stealing (DMG)\";\n// ***************************************************\n\n//parameters\n\nlet myToken = token;\nconst macroName = \"world\";\nconst markDmg = \" + 1d6\";\nconst target = game.user.targets.values().next().value;\nconst bonuses = myToken.actor.data.data.bonuses;\nconst actorId = myToken.actor._id + \"_mark\";\n\n//Check to see if the mark flag is set else make attack\n\nfunction checkMark() {\n  const flag = myToken.getFlag(macroName, actorId);\n\n  if (flag) {\n    if (flag.targetId == target.data._id) {\n      markAttack(flag);\n    } else {\n      baseAttack(flag);\n    }\n  } else {\n    game.dnd5e.rollItemMacro(itemName);\n  }\n}\n\n//check if the mark damag is set and if not increase\n//increase global damage by 1d6\n\nfunction markAttack(flag) {\n  if (!flag.isSet) {\n    let obj = {\n      \"data.bonuses.mwak.damage\": flag.meleeAtk + markDmg,\n      \"data.bonuses.rwak.damage\": flag.rangeAtk + markDmg,\n      \"data.bonuses.msak.damage\": flag.meleeSpell + markDmg,\n      \"data.bonuses.rsak.damage\": flag.rangeSpell + markDmg\n    };\n    updateActor(myToken, obj);\n    flag.isSet = true;\n  }\n  game.dnd5e.rollItemMacro(itemName);\n  token.setFlag(macroName, actorId, flag);\n}\n\n// check if the mark damage is set and if it is revert to base global damage\n\nfunction baseAttack(flag) {\n  if (flag) {\n    let obj = {\n      \"data.bonuses.mwak.damage\": flag.meleeAtk,\n      \"data.bonuses.rwak.damage\": flag.rangeAtk,\n      \"data.bonuses.msak.damage\": flag.meleeSpell,\n      \"data.bonuses.rsak.damage\": flag.rangeSpell\n    };\n    updateActor(myToken, obj);\n    flag.isSet = false;\n    game.dnd5e.rollItemMacro(itemName);\n    token.setFlag(macroName, actorId, flag);\n  } else {\n    game.dnd5e.rollItemMacro(itemName);\n  }\n}\n\nasync function updateActor(updateToken, obj) {\n  await updateToken.actor.update(obj);\n}\n\n//Ensure target is set and then call check mark function\n\nif (!myToken) ui.notifications.error(\"Please select your token first.\");\nelse {\n  checkMark();\n}\n","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"zsXp6gOvPJxPtNYZ","name":"Destransformar Poly","permission":{"default":0,"OWUwMjUxOTE5MjE0":3},"type":"script","sort":13500000,"flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"canvas.tokens.controlled[0].actor.revertOriginalForm()","author":"OWUwMjUxOTE5MjE0","img":"icons/svg/dice-target.svg","actorIds":[]}
